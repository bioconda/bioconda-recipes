{% set name = "ymp" %}
{% set version = "0.3.1" %}

package:
  name: "{{ name|lower }}"
  version: "{{ version }}"

source:
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  sha256: dbd88b552584f1268c8b7b68df18a94a08eca127561bf60162b8e894711814b4

build:
  number: 0
  entry_points:
    - ymp=ymp.cli:main
  noarch: python
  script: "{{ PYTHON }} -m pip install . --no-deps --ignore-installed -vv"
  run_exports:
    - {{ pin_subpackage('ymp', max_pin="x.x") }}


requirements:
  host:
    - python >=3.10
    - setuptools_scm >=3.4
    - setuptools >=42
    - pytest-runner
    - aiohttp
    - click
    - click-completion
    - coloredlogs
    - drmaa
    - networkx >=2
    - pandas >=0.20
    - pip
    - ruamel.yaml >0.15
    - snakemake >=7.32.1,<8.0a0
    - tqdm >=4.21.0
    - xdg
    - xlrd
    - openpyxl
    - fastentrypoints

  run:
    - python >=3.10
    - aiohttp
    - click >8
    - click-completion
    - coloredlogs
    - drmaa
    - networkx >=2
    - pandas >=0.20
    - ruamel.yaml >0.15
    - snakemake >=7.32.1,<8.0a0
    - tqdm >=4.21.0
    - xdg
    - xlrd
    - openpyxl
    - conda
    - mamba

test:
  imports:
    - ymp
    - ymp.cli
    - ymp.stage
  commands:
    - mkdir test; cd test
    - ymp --help
    - ymp init demo
    - ymp make -n toy.assemble_megahit.map_bbmap
    # remove potential cache files written as root in docker:
    - cd ..; rm -vrf test
    - rm -vrf ~/.ymp ~/.cache/ymp .ymp  
    - ls -lR
    - find / -name conda | xargs ls -l

about:
  home: https://ymp.readthedocs.io
  dev_url: https://github.com/epruesse/ymp
  doc_url: https://ymp.readthedocs.io
  license: GNU General Public v3 or later (GPLv3+)
  license_family: GPL3
  license_file: LICENSE
  summary: Create entire NGS pipelines with one command 
  description: |
    YMP allows composing complex NGS data analysis workflows from
    conceptual building blocks ("stages") using a single command line
    statement. Pre-tested conda environments are installed on-the fly,
    reference databases downloaded as needed and requested workflows
    executed using Snakemake.

    With YMP, developing new pipelines or testing alternative
    approaches using differnt tools or optimizing parameters becomes
    easy. Results from previous results are reused where possible. The
    collection of stages included with YMP is can be extended with
    project specific YMP stage definitions or simple Snakefiles.

extra:
  container:
    # click requires a unicode locale when used with Python 3
    # extended-base generates en_US.UTF-8 locale and sets LC_ALL, LANG properly
    extended-base: true
  recipe-maintainers:
    - epruesse
