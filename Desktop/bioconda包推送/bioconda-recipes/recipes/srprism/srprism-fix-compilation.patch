--- a/lib/srprism/query_store.hpp	2024-06-28 08:20:07.016000000 +0000
+++ b/lib/srprism/query_store.hpp	2024-06-28 08:35:20.720000000 +0000
@@ -570,7 +570,7 @@
                     else AdjustMinRankInfo< t_scoring >( qn );
                 }
 
-                int max_err( qa->MaxErr< true >( qn ) );
+                int max_err( qa->template MaxErr<true>( qn ) );
 
                 if( max_err < min_err ||
                         (max_err == min_err && 
@@ -595,7 +595,7 @@
                         qn, align_len, n_err, n_gap, n_del, n_gopen ) );
 
             if( res ) {
-                int max_err( qa->MaxErr< false >( qn ) );
+                int max_err( qa->template MaxErr< false >( qn ) );
 
                 if( max_err < min_err ||
                         (max_err == min_err && 
@@ -623,13 +623,13 @@
         TSeqSize MaxQueryLen( void ) const { return max_query_len_; }
 
         template< typename t_scoring, bool paired > int MaxErr( TQNum qn ) const
-        { return GetScoringData< t_scoring >()->MaxErr< paired >( qn ); }
+        { return GetScoringData< t_scoring >()->template MaxErr< paired >( qn ); }
 
         template< typename t_scoring, bool paired > int 
         GroupMaxErr( TQNum qn ) const
         {
             if( IsUnique( qn ) || DupDataStart( qn )[N_MIN_RANK] == 0 ) {
-                return GetScoringData< t_scoring >()->MaxErr< paired >( qn );
+                return GetScoringData< t_scoring >()->template MaxErr< paired >( qn );
             }
             else {
                 return GetScoringData< t_scoring >()->GroupMaxErr(
--- a/lib/srprism/query_acct.hpp	2024-06-28 08:15:57.448000000 +0000
+++ b/lib/srprism/query_acct.hpp	2024-06-28 08:39:14.900000000 +0000
@@ -112,10 +112,10 @@
 
         template< bool paired >
         bool BestLevelFull( TQNum qn ) const
-        { return query_info_[qn].BestLevelFull< paired >( res_lim_ ); }
+        { return query_info_[qn].template BestLevelFull< paired >( res_lim_ ); }
 
         template< bool paired > int MaxErr( TQNum qn ) const
-        { return query_info_[qn].MaxErr< paired >(); }
+        { return query_info_[qn].template MaxErr< paired >(); }
 
         int GroupMaxErr( TQNum dup_idx ) const
         { return t_scoring::template MaxErr< true >( dup_data_[dup_idx] ); }
