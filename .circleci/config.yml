# .circleci/config.yml
version: 2.1

executors:
  # osx-arm64:
  #   macos:
  #     xcode: 14.2.0 # indicate your selected version of Xcode
  #   resource_class: macos.m1.large.gen1
  linux-aarch64:
    machine:
      image: ubuntu-2204:current
    resource_class: arm.medium

jobs: # a basic unit of work in a run
  build_and_test:
    parameters:
      os:
        type: executor
    executor: << parameters.os >>
    steps:
      - run:
          name: Testing
          command: |
            set -xeu
            for image in \
              quay.io/bioconda/base-glibc-busybox-bash:3 \
              quay.io/bioconda/base-glibc-debian-bash:3 \
              quay.io/bioconda/create-env:3 \
              quay.io/bioconda/bioconda-utils-build-env-cos7-aarch64:2.13.2 \
              quay.io/condaforge/linux-anvil-aarch64:latest \
              docker.io/arm64v8/centos:7 \
              quay.io/condaforge/mambaforge:latest \
              docker.io/continuumio/miniconda3:latest \
              ; do
              for shell in sh bash ; do
                for run_opts in '' '--entrypoint=' ; do
                  for opts in '' '-l' '-i' '-li' ; do
                    docker run --rm --quiet ${run_opts} "${image}" "${shell}" ${opts} -c umask 2> /dev/null
                  done
                done
              done
            done
            exit 1


  build_and_upload:
    parameters:
      os:
        type: executor
    executor: << parameters.os >>
    steps:
      - checkout

      - run:
          name: Check for Additional Platforms
          command: ./.circleci/check-for-additional-platforms.sh "${CIRCLE_SHA1}~1 ${CIRCLE_SHA1}" "build_and_upload"

      - run:
          name: Fetch bioconda install script
          command: wget https://raw.githubusercontent.com/bioconda/bioconda-common/master/{common,install-and-set-up-conda,configure-conda}.sh

      - run:
          name: Install bioconda-utils
          command: |
            sudo mkdir -p /opt
            sudo chmod o+rwx /opt
            bash install-and-set-up-conda.sh

      - run:
          name: Setup PATH
          command:
            echo 'export PATH=/opt/mambaforge/bin:"$PATH"' >> "$BASH_ENV"

      # We reconfigure conda to use the right channel setup.
      # This has to be done after the cache is restored, because
      # the channel setup is not cached as it resides in the home directory.
      # We could use a system-wide (and therefore cached) channel setup,
      # but mamba does not support that at the time of implementation
      # (it ignores settings made by --system).
      - run:
          name: Configure conda
          command: bash configure-conda.sh

      - run:
          name: Build and push
          command: |
            source /opt/mambaforge/etc/profile.d/conda.sh
            source /opt/mambaforge/etc/profile.d/mamba.sh
            mamba activate bioconda
            bioconda-utils handle-merged-pr recipes config.yml \
              --repo bioconda/bioconda-recipes \
              --git-range ${CIRCLE_SHA1}~1 ${CIRCLE_SHA1} \
              --fallback build \
              --artifact-source circleci

  bulk_build:
    parameters:
      os:
        type: executor
      runner:
        type: integer
    executor: << parameters.os >>
    steps:
      - add_ssh_keys:
          fingerprints:
            - 1e:85:74:42:35:5f:c5:a2:35:c2:ec:b7:80:c0:7c:40

      - checkout

      - run:
          name: Check for [ci run]
          command: |
            commit_message="$(git log --format=oneline -n 1 $CIRCLE_SHA1)"
            if [[ $commit_message  =~ "[ci run]" ]]; then
              echo "[ci run] found, continuing."
            else
              echo "[ci run] not found, exiting."
              circleci-agent step halt
            fi

      - run:
          name: set git user
          command: |
            git config user.name BiocondaBot
            git config user.email biocondabot@users.noreply.github.com
            git branch --set-upstream-to=origin/$CIRCLE_BRANCH $CIRCLE_BRANCH

      - run:
          name: Fetch bioconda install script
          command: wget https://raw.githubusercontent.com/bioconda/bioconda-common/bulk/{common,install-and-set-up-conda,configure-conda}.sh

      - run:
          name: Install bioconda-utils
          command: |
            sudo mkdir -p /opt/
            sudo chmod o+rwx /opt
            bash install-and-set-up-conda.sh

      - run:
          name: Setup PATH
          command:
            echo 'export PATH=/opt/mambaforge/bin:"$PATH"' >> "$BASH_ENV"

      # We reconfigure conda to use the right channel setup.
      # This has to be done after the cache is restored, because
      # the channel setup is not cached as it resides in the home directory.
      # We could use a system-wide (and therefore cached) channel setup,
      # but mamba does not support that at the time of implementation
      # (it ignores settings made by --system).
      - run:
          name: Configure conda
          command: bash configure-conda.sh

      # For now, do not upload ARM images to biocontainers: --mulled-upload-target biocontainers
      - run:
          name: Build and upload
          command: |
            set -e
            source /opt/mambaforge/etc/profile.d/conda.sh
            source /opt/mambaforge/etc/profile.d/mamba.sh
            mamba activate bioconda
            echo '============'
            conda info --all
            conda config --show-sources
            python -c 'import bioconda_utils.utils as u ; import pathlib as p ; print(*(f"{f}:\n{p.Path(f).read_text()}" for f in u.load_conda_build_config().exclusive_config_files), sep="\n")'
            echo '============'
            bioconda-utils build recipes config.yml \
              --worker-offset << parameters.runner >> --n-workers 6 \
              --docker --mulled-test --docker-base-image quay.io/bioconda/bioconda-utils-build-env-cos7-$(arch) \
              --anaconda-upload \
              --mulled-upload-target biocontainers \
              --record-build-failures \
              --skiplist-leafs
            conda clean -y --all


workflows:
  build and test (ARM):
    jobs:
      - build_and_test:
          filters:
            branches:
              ignore:
                - master
                - bulk
          matrix:
            parameters:
              os:
                #- osx-arm64
                - linux-aarch64

  build and upload (ARM):
    jobs:
      - build_and_upload:
          filters:
            branches:
              only: master
          matrix:
            parameters:
              os:
                #- osx-arm64
                - linux-aarch64

  Bulk branch (ARM):
    jobs:
      - bulk_build:
          filters:
            branches:
              only: bulk
          matrix:
            parameters:
              os: 
                #- osx-arm64
                - linux-aarch64
              runner: [0, 1, 2, 3, 4, 5]
