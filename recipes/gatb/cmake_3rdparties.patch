--- gatb-core/CMakeLists.txt	2017-12-14 06:52:34.000000000 +0100
+++ gatb-core/CMakeLists.txt	2018-08-30 11:52:50.556242054 +0200
@@ -64,7 +64,7 @@
     IF(NOT CMAKE_CXX_COMPILER_VERSION) #for old cmakes
         include(CheckCompiler)
     ENDIF()
-    if (CMAKE_CXX_COMPILER_VERSION  VERSION_LESS 4.7) 
+    if (CMAKE_CXX_COMPILER_VERSION  VERSION_LESS 4.7)
         message(FATAL_ERROR "Insufficient gcc version (gcc>=4.7 needed)")
     endif()
 
@@ -83,7 +83,7 @@
         endif()
 
     else()
-        if (CMAKE_CXX_COMPILER_VERSION  VERSION_LESS 3.2) 
+        if (CMAKE_CXX_COMPILER_VERSION  VERSION_LESS 3.2)
             message(FATAL_ERROR "Insufficient clang version (clang>=3.2 needed)")
         endif()
 
@@ -124,7 +124,7 @@
 endif()
 
 
-# detect SSE for popcount 
+# detect SSE for popcount
 # this was for emphf, maybe it's for something else also? otherwise this part can be removed.
 #
 # from https://github.com/rurban/smhasher/blob/master/CMakeLists.txt
@@ -163,30 +163,30 @@
 ENDIF()
 
 # WARNING !!! For the moment, we need to remove some warnings (on Macos) due to use of offsetof macro on non Plain Old Data
-set (LIBRARY_COMPILE_DEFINITIONS "${LIBRARY_COMPILE_DEFINITIONS} -Wno-invalid-offsetof") 
+set (LIBRARY_COMPILE_DEFINITIONS "${LIBRARY_COMPILE_DEFINITIONS} -Wno-invalid-offsetof")
 
 # We may have some custom compilation flags.
 if (use_allocator)
-    set (LIBRARY_COMPILE_DEFINITIONS "${LIBRARY_COMPILE_DEFINITIONS} -DGATB_USE_CUSTOM_ALLOCATOR") 
+    set (LIBRARY_COMPILE_DEFINITIONS "${LIBRARY_COMPILE_DEFINITIONS} -DGATB_USE_CUSTOM_ALLOCATOR")
 endif()
 
 message("-- Options: ${LIBRARY_COMPILE_DEFINITIONS}")
 
 ################################################################################
-#  DIRECTORIES MANAGEMENT 
+#  DIRECTORIES MANAGEMENT
 ################################################################################
 
 set (LIBRARY_OUTPUT_PATH       ${PROJECT_BINARY_DIR}/lib/${CMAKE_BUILD_TYPE})
 set (EXECUTABLE_OUTPUT_PATH    ${PROJECT_BINARY_DIR}/bin/${CMAKE_BUILD_TYPE})
 
 ################################################################################
-#  EXPORT FOR THIRD PARTIES 
+#  EXPORT FOR THIRD PARTIES
 ################################################################################
 
 # In case you need to use external libraries, you can use the following variables:
 #   EXTRALIBS      : names of the libraries to be used
 #   EXTRALIBS_PATH : directory where the libraries are
-#   EXTRALIBS_INC  : directory of the include files for the libraries 
+#   EXTRALIBS_INC  : directory of the include files for the libraries
 # For instance, you can do the following:
 #       cmake -DEXTRALIBS="somelib"  -DEXTRALIBS_PATH="/somewhere/libs"  -DEXTRALIBS_INC="/somewhere/inc" ..
 
@@ -223,7 +223,7 @@
 set (gatb-core-cmake          ${gatb-core-cmake}          PARENT_SCOPE)
 
 ################################################################################
-#  LIBRARY GENERATION 
+#  LIBRARY GENERATION
 ################################################################################
 ADD_SUBDIRECTORY(src)
 
@@ -231,7 +231,7 @@
 set (gatb-core-klist   ${gatb-core-klist}  PARENT_SCOPE)
 
 ################################################################################
-#  UNIT TESTS GENERATION 
+#  UNIT TESTS GENERATION
 ################################################################################
 IF (DEFINED CPPUNIT_FOUND)
     IF (EXISTS "${PROJECT_SOURCE_DIR}/test")
@@ -242,7 +242,7 @@
 ENDIF()
 
 ################################################################################
-#  TOOLS GENERATION 
+#  TOOLS GENERATION
 ################################################################################
 IF (NOT DEFINED GATB_CORE_EXCLUDE_TOOLS)
     ADD_SUBDIRECTORY(tools)
@@ -254,20 +254,14 @@
 ADD_SUBDIRECTORY(thirdparty)
 
 ################################################################################
-#  DEPENDENCIES 
-################################################################################
-# we must be sure that hdf5 is built and installed before building gatb-core
-ADD_DEPENDENCIES (gatbcore-static hdf5 hdf5_postbuild)
-
-################################################################################
-#  DOCUMENTATION GENERATION 
+#  DOCUMENTATION GENERATION
 ################################################################################
 IF (EXISTS "${PROJECT_SOURCE_DIR}/doc")
     ADD_SUBDIRECTORY(doc EXCLUDE_FROM_ALL)
 ENDIF()
 
 ################################################################################
-#  EXAMPLES GENERATION 
+#  EXAMPLES GENERATION
 ################################################################################
 IF (EXISTS "${PROJECT_SOURCE_DIR}/examples")
     IF (GATB_CORE_INCLUDE_EXAMPLES)
@@ -278,30 +272,29 @@
 INSTALL(DIRECTORY "${PROJECT_SOURCE_DIR}/examples/" DESTINATION "examples")
 
 ################################################################################
-#  INSTALL 
+#  INSTALL
 ################################################################################
 
 IF (NOT DEFINED GATB_CORE_INSTALL_EXCLUDE)
     INSTALL (FILES ${PROJECT_SOURCE_DIR}/doc/misc/README.txt  DESTINATION . OPTIONAL)
     INSTALL (FILES ${PROJECT_SOURCE_DIR}/LICENCE              DESTINATION . OPTIONAL)
     INSTALL (FILES ${PROJECT_SOURCE_DIR}/THIRDPARTIES.md      DESTINATION . OPTIONAL)
-    INSTALL (DIRECTORY ${PROJECT_SOURCE_DIR}/thirdparty/boost DESTINATION ./include)
 ENDIF()
 
 ################################################################################
-#  DELIVERY 
+#  DELIVERY
 ################################################################################
 SET (CPACK_PACKAGE_DESCRIPTION_SUMMARY  "gatb-core project")
 SET (CPACK_PACKAGE_VENDOR               "Genscale team (INRIA)")
 SET (CPACK_PACKAGE_VERSION_MAJOR        "${gatb-core_VERSION_MAJOR}")
 SET (CPACK_PACKAGE_VERSION_MINOR        "${gatb-core_VERSION_MINOR}")
 SET (CPACK_PACKAGE_VERSION_PATCH        "${gatb-core_VERSION_PATCH}")
-SET (CPACK_PACKAGE_VERSION              "${gatb-core-version}")  
+SET (CPACK_PACKAGE_VERSION              "${gatb-core-version}")
 SET (CPACK_PACKAGE_FILE_NAME            "${CMAKE_PROJECT_NAME}-${CPACK_PACKAGE_VERSION}-bin-${CMAKE_SYSTEM_NAME}")
 SET (CPACK_GENERATOR                    "TGZ")
 SET (CPACK_SOURCE_GENERATOR             "TGZ")
-SET (CPACK_SOURCE_IGNORE_FILES          
-    "^${PROJECT_SOURCE_DIR}/build/"  
+SET (CPACK_SOURCE_IGNORE_FILES
+    "^${PROJECT_SOURCE_DIR}/build/"
     "^${PROJECT_SOURCE_DIR}/.project"
     "^${PROJECT_SOURCE_DIR}/.gitignore"
     "^${PROJECT_SOURCE_DIR}/doc/design"
--- gatb-core/thirdparty/CMakeLists.txt	2017-12-14 06:52:34.000000000 +0100
+++ gatb-core/thirdparty/CMakeLists.txt	2018-08-30 11:35:32.118424979 +0200
@@ -1,53 +1,5 @@
-################################################################################
-#  HDF5 GENERATION 
-################################################################################
-
-#SET (HDF5_ENABLE_THREADSAFE       ON)
-#SET (H5_HAVE_THREADSAFE 1)
-
-##########  MOMENTARY DEACTIVATED => CRASH ON MACOS TO BE INVESTIGATED  ##########
-SET (HDF5_BUILD_TOOLS             ON CACHE BOOL "Build HDF5 Tools")
 #SET (CMAKE_EXE_LINKER_FLAGS       "-lpthread -lz")
 
-SET (HDF5_EXTERNALLY_CONFIGURED     ON)
-
-#SET (HDF5_INSTALL_BIN_DIR           ${PROJECT_BINARY_DIR}/bin/${CMAKE_BUILD_TYPE})
-#SET (HDF5_INSTALL_LIB_DIR           ${PROJECT_BINARY_DIR}/lib/${CMAKE_BUILD_TYPE})
-SET (HDF5_INSTALL_BIN_DIR           bin)
-SET (HDF5_INSTALL_LIB_DIR           lib)
-
-SET (HDF5_INSTALL_INCLUDE_DIR       ${PROJECT_BINARY_DIR}/include/${CMAKE_BUILD_TYPE}/hdf5)
-SET (HDF5_INSTALL_DATA_DIR          ${PROJECT_BINARY_DIR}/share/${CMAKE_BUILD_TYPE})
-SET (HDF5_INSTALL_CMAKE_DIR         ${PROJECT_BINARY_DIR}/share/${CMAKE_BUILD_TYPE})
-
-IF (NOT DEFINED GATB_CORE_INSTALL_EXCLUDE)
-    SET (HDF5_EXPORTED_TARGETS          "gatb-hdf5")
-ENDIF()
-
-IF (NOT DEFINED GATB_CORE_EXCLUDE_HDF5_ZLIB)
-	OPTION (HDF5_ENABLE_Z_LIB_SUPPORT "Enable Zlib Filters" ON)
-ENDIF()
-
-# We don't want warnings from HDF5 compilation
-set (COMPILE_DEFINITIONS  "${COMPILE_DEFINITIONS}  -w")
-add_definitions (${COMPILE_DEFINITIONS})
-
-# add HDF5 generation
-ADD_SUBDIRECTORY (hdf5)
-
-# We add a custom target for copying header files.
-add_custom_target (hdf5_postbuild ALL)
-
-# We build the output directory
-add_custom_command (TARGET hdf5_postbuild POST_BUILD  COMMAND ${CMAKE_COMMAND} -E make_directory ${HDF5_INSTALL_INCLUDE_DIR})
-
-# We define all the header files to be copied
-file (GLOB headerfiles ${PROJECT_SOURCE_DIR}/thirdparty/hdf5/src/*.h ${PROJECT_BINARY_DIR}/thirdparty/hdf5/H5pubconf.h)
-
-# We copy each header file
-foreach (header ${headerfiles})
-  add_custom_command (TARGET hdf5_postbuild POST_BUILD  COMMAND ${CMAKE_COMMAND} -E copy_if_different ${header} ${HDF5_INSTALL_INCLUDE_DIR}  )
-endforeach()
 
 # include other smaller libraries (json, Boophf)
 
@@ -60,10 +12,9 @@
 add_custom_command (TARGET thirdparty_copy  COMMAND ${CMAKE_COMMAND} -E copy_if_different ${PROJECT_SOURCE_DIR}/thirdparty/json/json.hpp   ${PROJECT_BINARY_DIR}/include/${CMAKE_BUILD_TYPE}/json/)
 
 ################################################################################
-#  INSTALL 
+#  INSTALL
 ################################################################################
 IF (NOT DEFINED GATB_CORE_INSTALL_EXCLUDE)
-    INSTALL (DIRECTORY ${PROJECT_BINARY_DIR}/include/${CMAKE_BUILD_TYPE}/hdf5 DESTINATION include)
     INSTALL (DIRECTORY ${PROJECT_BINARY_DIR}/include/${CMAKE_BUILD_TYPE}/json DESTINATION include)
     INSTALL (DIRECTORY ${PROJECT_BINARY_DIR}/include/${CMAKE_BUILD_TYPE}/BooPHF DESTINATION include)
 ENDIF ()
