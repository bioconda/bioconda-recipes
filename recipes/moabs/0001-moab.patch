diff --git a/src/bsmap/reads.cpp b/src/bsmap/reads.cpp
index 60043113..ca401a42 100644
--- a/src/bsmap/reads.cpp
+++ b/src/bsmap/reads.cpp
@@ -7,7 +7,7 @@ extern Param param;
 ReadClass::ReadClass()
 {
 	_index=0;
-	mreads.resize(BatchNum);
+	mreads.resize(BatchNum);
 }
 
 void ReadClass::InitIndex(ifstream &fin, igzstream &gzfin, string filename) {
@@ -46,7 +46,7 @@ int ReadClass::LoadBatchReads(ifstream &fin, igzstream &gzfin, int readset)  //
 	vector<ReadInf>::iterator p=mreads.begin();
 
 	size_t i,l_seq;
-	char *s, *t;
+	char *s, *t;
 	
 	if (param.input_format<2) //.fa and .fq format
 		if(param.gz_input){
@@ -56,7 +56,7 @@ int ReadClass::LoadBatchReads(ifstream &fin, igzstream &gzfin, int readset)  //
 				gzfin>>p->name; gzfin.getline(ch,1000);
 				gzfin>>p->seq; p->readset=readset;
                 if(param.input_format) {//*.fq
-					gzfin>>ch; fin.getline(ch, 1000);
+					gzfin>>ch; gzfin.getline(ch, 1000);
 					gzfin>>p->qual;
 				}
                 else p->qual=string(p->seq.size(), param.zero_qual+param.default_qual);
@@ -70,14 +70,14 @@ int ReadClass::LoadBatchReads(ifstream &fin, igzstream &gzfin, int readset)  //
     			fin>>c; if(fin.eof()) break;
     			p->index=_index;
 	    		fin>>p->name; fin.getline(ch,1000);
-	    		fin>>p->seq; p->readset=readset;
+	    		fin>>p->seq; p->readset=readset;
 	    		if(param.input_format) {//*.fq
 	    			fin>>ch; fin.getline(ch, 1000);
 	    			fin>>p->qual;
 	    		}
-	    		else p->qual=string(p->seq.size(), param.zero_qual+param.default_qual);
-            	if(p->seq.size()>param.max_readlen) {
-                	p->seq.erase(param.max_readlen); p->qual.erase(param.max_readlen);
+	    		else p->qual=string(p->seq.size(), param.zero_qual+param.default_qual);
+            	if(p->seq.size()>param.max_readlen) {
+                	p->seq.erase(param.max_readlen); p->qual.erase(param.max_readlen);
 				}
 			}
 	    }
@@ -85,20 +85,20 @@ int ReadClass::LoadBatchReads(ifstream &fin, igzstream &gzfin, int readset)  //
     	for(num=0; num<BatchNum && _index<param.read_end; num++,p++,_index++){
 		//cout<< "index:"<<_index<<endl;
             //cout<<"num:"<<num<<"  mode:"<<mode<<endl;
-            if(readset==2) if (samread(SAM_fp,SAM_b)<0) break;
+            if(readset==2) if (samread(SAM_fp,SAM_b)<0) break;
     		if (samread(SAM_fp,SAM_b)<0) break;
       		p->index=_index;
        		p->name=string((char*)bam1_qname(SAM_b));
            //  
        		l_seq=min((bit32_t)SAM_b->core.l_qseq,(bit32_t)param.max_readlen);
        		p->seq.assign(l_seq,0); p->qual.assign(l_seq,0);
-       		s=(char*) bam1_seq(SAM_b);  t=(char*) bam1_qual(SAM_b);
-            if(readset) {
-                if(SAM_b->core.flag&0x40) p->readset=1;
-                else if(SAM_b->core.flag&0x80) p->readset=2;
-                else p->readset=readset;
-            }
-            else p->readset=readset;
+       		s=(char*) bam1_seq(SAM_b);  t=(char*) bam1_qual(SAM_b);
+            if(readset) {
+                if(SAM_b->core.flag&0x40) p->readset=1;
+                else if(SAM_b->core.flag&0x80) p->readset=2;
+                else p->readset=readset;
+            }
+            else p->readset=readset;
        		for(i=0;i<l_seq;i++){
        		    p->seq[i]=bam_nt16_rev_table[bam1_seqi(s,i)];
        		    p->qual[i]=t[i]+33;
