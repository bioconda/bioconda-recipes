{% set name="gdsctools" %}
{% set version="0.19.0" %}
{% set md5="e132773005061cd936f5c53fd106b04f" %}

package:
  name: {{ name }}
  version: {{ version }}

source:
  fn: {{ name }}-{{ version }}.tar.gz
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  md5: {{ md5 }}
  #patches:
  #  - patch.diff

build:
  skip: True # [py27]
  entry_points:
    # Put any entry points (scripts to be generated automatically) here. The
    # syntax is module:function.  For example
     - gdsctools_anova=gdsctools.scripts.anova:main
     - gdsctools_regression=gdsctools.scripts.regression:main

requirements:
  build:
    - python
    - setuptools
    - easydev >=0.9.34
    - reports >=0.3.1
    - xlrd
    - colorlog
    - biokit >=0.4
    - scikit-learn
    - statsmodels
    - colormap ==1.0.1
    - pandas ==0.20.0
    - numexpr

  run:
    - python
    - numpy
    - easydev >=0.9.34
    - reports >=0.3.1
    - pandas ==0.20.0
    - matplotlib >=1.4.3
    - reports >=0.3.1
    - statsmodels
    - colorlog
    - scipy
    - statsmodels
    - colormap ==1.0.1
    - jinja2
    - biokit >=0.4
    - scikit-learn
    - numexpr
    - xlrd

test:
  # Python imports
  #imports:
  #  - gdsctools
  #  - gdsctools.data
  #  - gdsctools.data.css
  #  - gdsctools.data.images
  #  - gdsctools.data.javascript
  #  - gdsctools.data.templates
  #  - gdsctools.pipelines
  #  - gdsctools.scripts
  #commands:
  #  - gdsctools_anova --help 1>out 2>>err
  #  - gdsctools_regression --help 1>out 2>>err

  # You can also put a file called run_test.py in the recipe that will be run
  # at test time.

about:
  home: ['http://pypi.python.org/pypi/gdsctools']
  license: "BSD 3-clause"
  summary: 'Set of tools and pipelines to analyse GDSC data (cancerrxgene.org)'
  license_family: BSD

extra:
  recipe-maintainers:
    - cokelaer

