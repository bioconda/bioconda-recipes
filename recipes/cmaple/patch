diff --git a/CMakeLists.txt b/CMakeLists.txt
index a58bf79..306b4e8 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,6 +1,6 @@
 ##################################################################
 # CMAPLE cmake build definition
-# Copyright (c) 2022 Nhan Ly-Trong, Chris Bielow, Nicola De Maio, Bui Quang Minh 
+# Copyright (c) 2022 Nhan Ly-Trong, Chris Bielow, Nicola De Maio, Bui Quang Minh
 ##################################################################
 
 # Windows example usages:
@@ -11,10 +11,8 @@
 #
 # cmake -G "Visual Studio 12" <source_dir>          (32-bit version, compiled with MSVC)
 # cmake -G "Visual Studio 12 Win64" <source_dir>    (64-bit version, compiled with MSVC)
-# cmake -G "Visual Studio 12 Win64" -T "Intel C++ Compiler XE 15.0" <source_dir>        (64-bit version, compiled with ICC)
-# cmake -G "MinGW Makefiles" <source_dir> (TDM-GCC)
-# cmake -G "Unix Makefiles" -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_MAKE_PROGRAM=mingw32-make <source_dir> (TDM-GCC and clang)
-
+## using clang.exe as shipped with Visual Studio:
+# cmake -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -G "Ninja" -DCMAPLE_FLAGS=static ..\cmaple
 
 # Linux example usages:
 #----------------------
@@ -63,13 +61,24 @@ set(GCC_MIN_VERSION "5")
 ##############################################################
 # Clang-tidy
 ##############################################################
-message("Setup clang-tidy")
-#set(CMAKE_CXX_CLANG_TIDY "clang-tidy;-header-filter=.;-checks=performance-*")
+if (USE_CLANG_TIDY)
+  message("Setup clang-tidy (USE_CLANG_TIDY=ON)")
+  set(CMAKE_CXX_CLANG_TIDY "clang-tidy;-header-filter=.;-checks=performance-*")
+else()
+  message("No clang-tidy (USE_CLANG_TIDY=OFF)")
+endif()
+
 
 project(cmaple)
 add_definitions(-DCMAPLE)
 set(CMAKE_CXX_STANDARD 20)
-set(CMAKE_INTERPROCEDURAL_OPTIMIZATION TRUE) # Enable IPO (LTO) by default
+
+if (((${CMAKE_SYSTEM_PROCESSOR} MATCHES "arm" OR ${CMAKE_SYSTEM_PROCESSOR} MATCHES "aarch") AND (NOT APPLE AND UNIX))
+    OR WIN32)
+    set(CMAKE_INTERPROCEDURAL_OPTIMIZATION FALSE) # Disable IPO (LTO) for Linux ARM
+else()
+    set(CMAKE_INTERPROCEDURAL_OPTIMIZATION TRUE) # Enable IPO (LTO) by default
+endif()
 
 # The version number.
 set (cmaple_VERSION_MAJOR 1)
@@ -80,14 +89,19 @@ option(BUILD_SHARED_LIBS "Build Shared Libraries" OFF)
 option(INSTALL_CMAPLE "Enable installation of CMAPLE. (Projects integrating CMAPLE may want to turn this OFF.)" ON)
 
 ##################################################################
-# check existence of a few basic functions
+# check existence of a few basic functions and headers
 ##################################################################
-include (${CMAKE_ROOT}/Modules/CheckFunctionExists.cmake)
+include (CheckFunctionExists)
 check_function_exists (gettimeofday HAVE_GETTIMEOFDAY)
 check_function_exists (getrusage HAVE_GETRUSAGE)
 check_function_exists (GlobalMemoryStatusEx HAVE_GLOBALMEMORYSTATUSEX)
 check_function_exists (strndup HAVE_STRNDUP)
 check_function_exists (strtok_r HAVE_STRTOK_R)
+## find optional headers
+include (CheckIncludeFile)
+CHECK_INCLUDE_FILE("unistd.h" CMAPLE_HAS_UNISTDH)
+
+
 
 if (NOT CMAKE_BUILD_TYPE)
     set(CMAKE_BUILD_TYPE "Release")
@@ -129,6 +143,8 @@ else()
     message("Target OS     : Unknown and untested yet")
 endif()
 
+# NHANLT: Note: to build a static version, we have to link
+# the static OpenMP library manually here instead of the dynamic one
 ##################################################################
 # configure OpenMP to build a static version
 ##################################################################
@@ -136,13 +152,19 @@ if (NOT CMAPLE_FLAGS MATCHES "single")
     message("OpenMP        : Yes")
 
     if(APPLE)
-        if(OSX_NATIVE_ARCHITECTURE STREQUAL "arm64")
+        if (${CMAKE_SYSTEM_PROCESSOR} MATCHES "arm" OR ${CMAKE_SYSTEM_PROCESSOR} MATCHES "aarch")
             link_directories(${PROJECT_SOURCE_DIR}/libraries/static/libmac_m1)
         else()
             link_directories(${PROJECT_SOURCE_DIR}/libraries/static/libmac)
         endif()
-    elseif (WIN32 OR UNIX)
-        if (CMAKE_SIZEOF_VOID_P EQUAL 4)
+    elseif (UNIX AND NOT ${CMAKE_SYSTEM_NAME} STREQUAL "FreeBSD")
+      if (${CMAKE_SYSTEM_PROCESSOR} MATCHES "arm" OR ${CMAKE_SYSTEM_PROCESSOR} MATCHES "aarch")
+        link_directories(${PROJECT_SOURCE_DIR}/libraries/static/liblinux_arm)
+      else()
+        link_directories(${PROJECT_SOURCE_DIR}/libraries/static/lib)
+      endif()
+    elseif (WIN32)
+        if (BINARY32)
             link_directories(${PROJECT_SOURCE_DIR}/libraries/static/lib32)
         else()
             link_directories(${PROJECT_SOURCE_DIR}/libraries/static/lib)
@@ -169,13 +191,20 @@ endif()
 
 ## enable 'SSE/AVX' on x86-64, 'neon' on arm to achive faster computations (mainly the Matrix::dotProduct())
 if (CMAKE_CXX_COMPILER_ID MATCHES "Clang|GNU")
-  if(${CMAKE_SYSTEM_PROCESSOR} MATCHES "x86") 
+  if(${CMAKE_SYSTEM_PROCESSOR} MATCHES "x86")
     add_compile_options(-msse -msse2 -msse3 -mssse3 -msse4 -msse4.1 -msse4.2 -mavx) # needed for simde instructions
-  elseif (${CMAKE_SYSTEM_PROCESSOR} MATCHES "arm")
-    add_compile_options(-neon)  
-  endif() 
+  elseif (${CMAKE_SYSTEM_PROCESSOR} MATCHES "arm" OR ${CMAKE_SYSTEM_PROCESSOR} MATCHES "aarch")
+    # NHANLT: Because the option "-neon" is not found,
+    # I changed it to "-march=native"
+    #add_compile_options(-neon)
+    if (NOT APPLE AND UNIX)
+        add_compile_options(-march=armv8-a)
+    else()
+        add_compile_options(-march=native)
+    endif()
+  endif()
 elseif (CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
-  if(${CMAKE_SYSTEM_PROCESSOR} MATCHES "x86") 
+  if(${CMAKE_SYSTEM_PROCESSOR} MATCHES "x86")
     add_compile_options(/arch:AVX2) ## not really needed, but may be beneficial in other places when in Release mode (i.e. with optimizations turned on)
   endif()
 endif()
@@ -244,13 +273,13 @@ FetchContent_MakeAvailable(googletest)
 ##################################################################
 LIST(APPEND CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}")
 if (NOT TARGET ncl)
-	add_subdirectory(libraries/ncl)
-endif() 
+    add_subdirectory(libraries/ncl)
+endif()
 if (NOT TARGET nclextra)
-	add_subdirectory(libraries/nclextra)
-endif() 
+    add_subdirectory(libraries/nclextra)
+endif()
 add_subdirectory(utils)
-add_subdirectory(libraries/SIMDe) 
+add_subdirectory(libraries/SIMDe)
 target_include_directories(cmaple_utils PUBLIC ${SIMDE_INCLUDE_DIRECTORY})
 add_subdirectory(model)
 add_subdirectory(alignment)
@@ -267,16 +296,17 @@ add_executable(cmaple-aa main/main.cpp)
 
 if(Backtrace_FOUND)
   include_directories(${Backtrace_INCLUDE_DIR})
-  target_link_libraries(cmaple ${Backtrace_LIBRARY})
-  target_link_libraries(cmaple-aa ${Backtrace_LIBRARY})
+  target_link_libraries(cmaple PRIVATE ${Backtrace_LIBRARY})
+  target_link_libraries(cmaple-aa PRIVATE ${Backtrace_LIBRARY})
 endif(Backtrace_FOUND)
 
 ##################################################################
 # setup linking flags
 ##################################################################
 
-target_link_libraries(cmaple maple cmaple_tree cmaple_alignment cmaple_model ncl nclextra cmaple_utils)
-target_link_libraries(cmaple-aa maple-aa cmaple_tree-aa cmaple_alignment-aa cmaple_model-aa ncl nclextra cmaple_utils)
+target_link_libraries(cmaple PUBLIC maple cmaple_tree cmaple_alignment cmaple_model ncl nclextra cmaple_utils)
+target_link_libraries(cmaple-aa PUBLIC maple-aa cmaple_tree-aa cmaple_alignment-aa cmaple_model-aa ncl nclextra cmaple_utils)
+
 
 ##############################################################
 # add the install targets
@@ -323,7 +353,20 @@ set(CPACK_SOURCE_IGNORE_FILES
 
 set (SYSTEM_NAME "${CMAKE_SYSTEM_NAME}")
 if (${CMAKE_SYSTEM_NAME} STREQUAL "Darwin")
-    set (SYSTEM_NAME "MacOSX")
+    if (IQTREE_FLAGS MATCHES "oldmac")
+        set (SYSTEM_NAME "macOS10.5")
+    elseif (${CMAKE_SYSTEM_PROCESSOR} MATCHES "arm" OR ${CMAKE_SYSTEM_PROCESSOR} MATCHES "aarch")
+        set (SYSTEM_NAME "macOS-arm")
+    else()
+        set (SYSTEM_NAME "macOS-intel")
+    endif()
+endif()
+if (NOT APPLE AND UNIX)
+    if (${CMAKE_SYSTEM_PROCESSOR} MATCHES "arm" OR ${CMAKE_SYSTEM_PROCESSOR} MATCHES "aarch")
+        set (SYSTEM_NAME "Linux-arm")
+    else()
+        set (SYSTEM_NAME "Linux-intel")
+    endif()
 endif()
 
 set(CPACK_PACKAGE_FILE_NAME
diff --git a/alignment/alignment.cpp b/alignment/alignment.cpp
index 738793d..1b98ce1 100644
--- a/alignment/alignment.cpp
+++ b/alignment/alignment.cpp
@@ -875,7 +875,15 @@ void cmaple::Alignment::readMaple(std::istream& aln_stream) {
 
       // extract <Type>
       ssin >> tmp;
-      StateType state = convertChar2State(toupper(tmp[0]));
+      StateType state;
+      try
+      {
+        state = convertChar2State(toupper(tmp[0]));
+      }
+      catch(std::invalid_argument& e)
+      {
+        throw std::invalid_argument("Line " + convertIntToString(line_num + 1) + ": " + e.what());
+      }
 
       // extract <Position>
       ssin >> tmp;
@@ -1037,9 +1045,8 @@ auto cmaple::Alignment::convertChar2State(char state) -> StateType {
             return 1;
         default:
             {
-                string invalid_state_msg = "Invalid state ";
+                string invalid_state_msg = "Unrecognized character ";
                 invalid_state_msg += state;
-                invalid_state_msg += ". Please check and try again!";
                 throw std::invalid_argument(invalid_state_msg);
                 return TYPE_INVALID;
             }
@@ -1081,9 +1088,8 @@ auto cmaple::Alignment::convertChar2State(char state) -> StateType {
         case 'V':
           return 1 + 2 + 4 + 3;  // A or G or C
         default: {
-          string invalid_state_msg = "Invalid state ";
+          string invalid_state_msg = "Unrecognized character ";
           invalid_state_msg += state;
-          invalid_state_msg += ". Please check and try again!";
           throw std::invalid_argument(invalid_state_msg);
           // return TYPE_INVALID;  // unrecognize character
         }
@@ -1113,9 +1119,8 @@ auto cmaple::Alignment::convertChar2State(char state) -> StateType {
       loc = strchr(symbols_protein, state);
 
       if (loc == nullptr) {
-        string invalid_state_msg = "Invalid state ";
+        string invalid_state_msg = "Unrecognized character ";
         invalid_state_msg += state;
-        invalid_state_msg += ". Please check and try again!";
         throw std::invalid_argument(invalid_state_msg);
         // return TYPE_INVALID;  // unrecognize character
       }
@@ -1130,9 +1135,8 @@ auto cmaple::Alignment::convertChar2State(char state) -> StateType {
 
         if (!loc)
         {
-            string invalid_state_msg = "Invalid state ";
+            string invalid_state_msg = "Unrecognized character ";
             invalid_state_msg += state;
-            invalid_state_msg += ". Please check and try again!";
             throw std::invalid_argument(invalid_state_msg);
             return TYPE_INVALID; // unrecognize character
         }
@@ -1141,9 +1145,8 @@ auto cmaple::Alignment::convertChar2State(char state) -> StateType {
     case cmaple::SeqRegion::SEQ_AUTO:
     case cmaple::SeqRegion::SEQ_UNKNOWN:
     default: {
-      string invalid_state_msg = "Invalid state ";
+      string invalid_state_msg = "Unrecognized character ";
       invalid_state_msg += state;
-      invalid_state_msg += ". Please check and try again!";
       throw std::invalid_argument(invalid_state_msg);
       // return TYPE_INVALID;
     }
diff --git a/cmaple.doxy b/cmaple.doxy
index 3beaee7..da2a488 100644
--- a/cmaple.doxy
+++ b/cmaple.doxy
@@ -48,13 +48,13 @@ PROJECT_NAME           = CMAPLE
 # could be handy for archiving the generated documentation or if some version
 # control system is used.
 
-PROJECT_NUMBER         = 1
+PROJECT_NUMBER         = 1.0.0
 
 # Using the PROJECT_BRIEF tag one can provide an optional one line description
 # for a project that appears at the top of each page and should give viewer a
 # quick idea about the purpose of the project. Keep the description short.
 
-PROJECT_BRIEF          = "CMaple phylogenetic software"
+PROJECT_BRIEF          = "C++ MAximum Parsimonious Likelihood Estimation"
 
 # With the PROJECT_LOGO tag one can specify a logo or an icon that is included
 # in the documentation. The maximum height of the logo should not exceed 55
diff --git a/cmaple_config.h.in b/cmaple_config.h.in
index 2729eea..4090d2b 100644
--- a/cmaple_config.h.in
+++ b/cmaple_config.h.in
@@ -15,5 +15,7 @@
 #cmakedefine HAVE_STRNDUP
 #cmakedefine HAVE_STRTOK_R
 
+#cmakedefine CMAPLE_HAS_UNISTDH
+
 /* does the platform provide backtrace functions? */
 #cmakedefine Backtrace_FOUND
diff --git a/libraries/static/liblinux_arm/libomp.a b/libraries/static/liblinux_arm/libomp.a
new file mode 100644
index 0000000..bf95783
Binary files /dev/null and b/libraries/static/liblinux_arm/libomp.a differ
diff --git a/libraries/static/libmac_m1/libomp.a b/libraries/static/libmac_m1/libomp.a
index bdff3e4..0c72cdc 100644
Binary files a/libraries/static/libmac_m1/libomp.a and b/libraries/static/libmac_m1/libomp.a differ
diff --git a/maple/cmaple.cpp b/maple/cmaple.cpp
index c9f898d..9e21c9f 100644
--- a/maple/cmaple.cpp
+++ b/maple/cmaple.cpp
@@ -150,11 +150,6 @@ void cmaple::runCMAPLE(cmaple::Params &params)
         std::ostream null_stream(nullptr);
         std::ostream& out_stream = cmaple::verbose_mode >= cmaple::VB_MED ? std::cout : null_stream;
         tree.infer(tree_search_type, params.shallow_tree_search, out_stream);
-
-        // Write the normal tree file
-        ofstream out = ofstream(output_treefile);
-        out << tree.exportNewick(tree_format);
-        out.close();
         
         // Compute branch supports (if users want to do so)
         if (params.compute_aLRT_SH)
@@ -169,21 +164,19 @@ void cmaple::runCMAPLE(cmaple::Params &params)
             tree.computeBranchSupport(static_cast<int>(params.num_threads), params.aLRT_SH_replicates, params.aLRT_SH_half_epsilon + params.aLRT_SH_half_epsilon, allow_replacing_ML_tree, out_stream);
 
             // write the tree file with branch supports
-            ofstream out_tree_branch_supports = ofstream(prefix + ".aLRT_SH.treefile");
+            /*ofstream out_tree_branch_supports = ofstream(prefix + ".aLRT_SH.treefile");
             out_tree_branch_supports << tree.exportNewick(tree_format, true);
-            out_tree_branch_supports.close();
+            out_tree_branch_supports.close();*/
         }
         
         // If needed, apply some minor changes (collapsing zero-branch leaves into less-info sequences, re-estimating model parameters) to make the processes of outputting then re-inputting a tree result in a consistent tree
         if (params.make_consistent)
-        {
             tree.makeTreeInOutConsistent();
-            
-            // Overwrite the normal tree file
-            ofstream overwrite_out = ofstream(output_treefile);
-            overwrite_out << tree.exportNewick(tree_format);
-            overwrite_out.close();
-        }
+        
+        // Write the normal tree file
+        ofstream out = ofstream(output_treefile);
+        out << tree.exportNewick(tree_format);
+        out.close();
         
         // output log-likelihood of the tree
         if (cmaple::verbose_mode > cmaple::VB_QUIET) {
@@ -205,10 +198,10 @@ void cmaple::runCMAPLE(cmaple::Params &params)
         // Show information about output files
         std::cout << "Analysis results written to:" << std::endl;
         std::cout << "Maximum-likelihood tree:       " << output_treefile << std::endl;
-        if (params.compute_aLRT_SH) {
+        /*if (params.compute_aLRT_SH) {
           std::cout << "Tree with aLRT-SH values:      "
                     << prefix + ".aLRT_SH.treefile" << std::endl;
-        }
+        }*/
         std::cout << "Screen log file:               " << prefix + ".log" << std::endl << std::endl;
         
         // show runtime
diff --git a/model/model_aa.nexus b/model/model_aa.nexus
index e52e032..6da7af0 100644
--- a/model/model_aa.nexus
+++ b/model/model_aa.nexus
@@ -208,7 +208,9 @@ model VT=
 0.5411769916657778 0.8912614404565405 1.0894926581511342 0.7447620891784513 2.1579775140421025 0.9183596801412757 0.5818111331782764 0.3374467649724478 7.7587442309146040 0.8626796044156272 1.2452243224541324 0.7835447533710449 1.0899165770956820 10.3848523331334590 0.4819109019647465 0.9547229305958682 0.8564314184691215 4.5377235790405388
 4.6501894691803214 0.7807017855806767 0.4586061981719967 0.4594535241660911 2.2627456996290891 0.6366932501396869 0.8940572875547330 0.6193321034173915 0.5333220944030346 14.8729334615190609 3.5458093276667237 0.7801080335991272 4.0584577156753401 1.7039730522675411 0.5985498912985666 0.9305232113028208 3.4242218450865543 0.5658969249032649 1.0000000000000000
 0.0770764620135024 0.0500819370772208 0.0462377395993731 0.0537929860758246 0.0144533387583345 0.0408923608974345 0.0633579339160905 0.0655672355884439 0.0218802687005936 0.0591969699027449 0.0976461276528445 0.0592079410822730 0.0220695876653368 0.0413508521834260 0.0476871596856874 0.0707295165111524 0.0567759161524817 0.0127019797647213 0.0323746050281867 0.0669190817443274;
-
+)"
+// Visual studio needs regular breaks in long strings, to avoid C2026 "string too big"
+R"(
 model BLOSUM62=
 0.735790389698
 0.485391055466 1.297446705134
@@ -390,7 +392,9 @@ model HIVW=
 0.0050000 0.0050000 5.0647500 2.2815400 8.3483500 0.0050000 0.0050000 0.0050000 47.4889000 0.1145120 0.0050000 0.0050000 0.5791980 4.1272800 0.0050000 0.9331420 0.4906080 0.0050000
 24.8094000 0.2794250 0.0744808 2.9178600 0.0050000 0.0050000 2.1995200 2.7962200 0.8274790 24.8231000 2.9534400 0.1280650 14.7683000 2.2800000 0.0050000 0.8626370 0.0050000 0.0050000 1.3548200
 0.0377494 0.0573210 0.0891129 0.0342034 0.0240105 0.0437824 0.0618606 0.0838496 0.0156076 0.0983641 0.0577867 0.0641682 0.0158419 0.0422741 0.0458601 0.0550846 0.0813774 0.0195970 0.0205847 0.0515638;
-
+)"
+// Visual studio needs regular breaks in long strings, to avoid C2026 "string too big"
+R"(
 model JTTDCMUT=
 0.531678
 0.557967 0.451095
@@ -503,7 +507,9 @@ model MTINV=
 0.021939769224089 0.182762501894970 1.139165041333800 0.192759935895995 1.342951983818990 0.476209340516188 0.137649645940120 0.072268115092742 2.321701900318870 0.177138315144646 0.161052630578922 0.348477651608884 0.393193176722666 3.234681510126880 0.081395316441860 0.345719568712117 0.174898633040519 0.636664640334042
 2.751362222454670 0.072153227138698 0.065420927831618 0.088077392769029 1.555396905840990 0.065221940911213 0.231186486525368 0.396428077428706 0.008043434782625 8.542589373962890 1.075872855650690 0.056252073499162 1.509852171058890 0.534676724129225 0.162975872809625 0.377288666084473 1.885338569864270 0.128598566560553 0.080346083861554
 0.031742312696925 0.010900704360282 0.061579224631690 0.016149206459683 0.013570105428042 0.014644105857642 0.022311208924484 0.047847519139008 0.011641804656722 0.094322337728935 0.149407059762824 0.044438717775487 0.077262530905012 0.102287040914816 0.026290210516084 0.105939042375617 0.042869117147647 0.020701008280403 0.046556718622687 0.059540023816010;
-
+)"
+// Visual studio needs regular breaks in long strings, to avoid C2026 "string too big"
+R"(
 model Q.PFAM=
 0.531344742
 0.266631781 0.610524242
@@ -635,7 +641,9 @@ model Q.MAMMAL=
 0.091694198 0.139818982 0.655149301 0.420781565 5.685285320 0.126113134 0.070592995 0.083304052 7.287086510 0.172110578 0.176288430 0.080506454 0.165573576 5.877878503 0.112513257 0.458878972 0.102291161 0.645002709
 4.300445029 0.107177686 0.082093349 0.228482448 0.278600785 0.094238794 0.325642029 0.868890049 0.081513165 12.950251994 1.879650916 0.097391390 7.158497660 0.733119107 0.145626117 0.152049202 0.573328824 0.113423271 0.125003102
 0.067997000 0.055503000 0.036288000 0.046867000 0.021435000 0.050281000 0.068935000 0.055323000 0.026410000 0.041953000 0.101191000 0.060037000 0.019662000 0.036237000 0.055146000 0.096864000 0.057136000 0.011785000 0.024730000 0.066223000;
-
+)"
+// Visual studio needs regular breaks in long strings, to avoid C2026 "string too big"
+R"(
 model Q.PLANT=
 0.061995451
 0.071787018 0.324146307
@@ -725,7 +733,9 @@ model NQ.BIRD=
 0.003367 0.003420 0.025103 0.019062 0.118842 0.002325 0.001636 0.002267 0.172299 0.003816 0.011255 0.001973 0.001121 0.149120 0.003758 0.041478 0.002483 0.002546 -0.568642 0.002770
 0.353020 0.003671 0.001550 0.011216 0.004391 0.002838 0.025621 0.063330 0.001568 0.600920 0.192704 0.003462 0.154474 0.028747 0.004789 0.007272 0.022534 0.001180 0.000311 -1.483598
 0.066333 0.053982 0.037723 0.047442 0.022723 0.049236 0.071640 0.058487 0.025459 0.045195 0.100085 0.061369 0.020983 0.038111 0.053610 0.089423 0.053556 0.012287 0.027118 0.065238;
-
+)"
+// Visual studio needs regular breaks in long strings, to avoid C2026 "string too big"
+R"(
 model NQ.INSECT=
 -1.158307 0.010073 0.016374 0.018148 0.024562 0.031278 0.050686 0.115871 0.007708 0.016759 0.030487 0.021161 0.017635 0.007697 0.047195 0.387388 0.180867 0.001003 0.005193 0.168222
 0.016988 -0.864366 0.028327 0.009011 0.016427 0.091271 0.017198 0.023080 0.063484 0.009987 0.026047 0.441579 0.010386 0.003027 0.013118 0.047581 0.024505 0.004420 0.007183 0.010747
@@ -817,7 +827,9 @@ model NQ.YEAST=
 0.008246 0.005644 0.022807 0.004919 0.019212 0.007773 0.004189 0.001883 0.119939 0.010396 0.023220 0.003733 0.004427 0.375273 0.002243 0.021838 0.007934 0.015523 -0.669995 0.010796
 0.198675 0.005913 0.007857 0.004763 0.020689 0.009495 0.019917 0.008777 0.004253 0.727245 0.155452 0.012278 0.043536 0.027573 0.012496 0.016617 0.125934 0.001048 0.008587 -1.411103
 0.062250 0.044391 0.048928 0.052085 0.009471 0.039753 0.068567 0.039996 0.018745 0.069961 0.114036 0.081245 0.018619 0.047434 0.030178 0.090883 0.054691 0.008448 0.033789 0.066530;
-
+)"
+// Visual studio needs regular breaks in long strings, to avoid C2026 "string too big"
+R"(
 model FLAVI=
 0.077462
 0.078037 0.000020
diff --git a/tree/tree.cpp b/tree/tree.cpp
index 5290594..e130697 100644
--- a/tree/tree.cpp
+++ b/tree/tree.cpp
@@ -6991,8 +6991,10 @@ PositionType cmaple::Tree::count_aRLT_SH_branch(
     lh_diff_3 += site_lh_diff_3[j];
     lh_diff_3 += site_lh_root_diff_3[j];
   }
+#ifdef DEBUG
   assert(isinf(lh_diff_2) || fabs(lh_diff_2 - nodelh.getLhDiff2()) < 1e-3);
   assert(isinf(lh_diff_3) || fabs(lh_diff_3 - nodelh.getLhDiff3()) < 1e-3);
+#endif
 
 // iterate a number of replicates
 #pragma omp parallel reduction(+ : sh_count)
@@ -8848,8 +8850,17 @@ void cmaple::Tree::expandTreeByOneLessInfoSeq(PhyloNode& node,
   // add a new node representing the less-info-seq
   // the default min_blength in CMAPLE is not small enough -> I set it at
   // min_blength * 0.1 for a higher accuracy when calculating aLRT-SH
-  const RealNumType new_min_blength =
+  RealNumType new_min_blength =
       (params->fixed_min_blength == -1) ? min_blength * 0.1 : min_blength;
+    
+ // if the two sequences are identical set the new blength at 0
+    if (lower_regions->compareWithSample(*node.getPartialLh(TOP),
+        static_cast<PositionType>(aln->ref_seq.size()), aln) == 1 &&
+        node.getPartialLh(TOP)->compareWithSample(*lower_regions,
+        static_cast<PositionType>(aln->ref_seq.size()), aln) == 1)
+         new_min_blength = 0;
+    
+  // connect the new node to the tree
   connectNewSample2Branch<num_states>(
       lower_regions, seq_name_index, node_index, node, top_distance, 0,
       new_min_blength, best_child_regions, upper_left_right_regions);
diff --git a/utils/CMakeLists.txt b/utils/CMakeLists.txt
index 524f20e..1a400be 100644
--- a/utils/CMakeLists.txt
+++ b/utils/CMakeLists.txt
@@ -7,6 +7,14 @@ matrix.h
 logstream.h logstream.cpp
 )
 
+if(CLANG AND WIN32)
+    if (BINARY32)
+        target_link_libraries(cmaple_utils ${PROJECT_SOURCE_DIR}/libraries/static/lib32/libiomp5md.dll)
+    else()
+        target_link_libraries(cmaple_utils ${PROJECT_SOURCE_DIR}/libraries/static/lib/libiomp5md.dll)
+    endif()
+endif()
+
 #find_package(OpenMP)
 #if(OpenMP_CXX_FOUND)
 #    if(ZLIB_FOUND)
diff --git a/utils/matrix.h b/utils/matrix.h
index cc72203..7b3b2ba 100644
--- a/utils/matrix.h
+++ b/utils/matrix.h
@@ -79,7 +79,7 @@ inline double horiz_sum(simde__m256d v) {
   vlow = simde_mm_add_pd(vlow, vhigh);     // reduce down to 128
 
   simde__m128d high64 = simde_mm_unpackhi_pd(vlow, vlow);
-  return  simde_mm_cvtsd_f64(_mm_add_sd(vlow, high64));  // reduce to scalar
+  return  simde_mm_cvtsd_f64(simde_mm_add_sd(vlow, high64));  // reduce to scalar
 }
 
 
diff --git a/utils/operatingsystem.cpp b/utils/operatingsystem.cpp
index b8715d9..08d9a63 100644
--- a/utils/operatingsystem.cpp
+++ b/utils/operatingsystem.cpp
@@ -8,10 +8,10 @@
 #include "operatingsystem.h"
 #include <sstream>
 #include <string>
-#if defined(WIN32) || defined(WIN64)
-#include <io.h>  //for _isatty
-#else
+#if defined(CMAPLE_HAS_UNISTDH)
 #include <unistd.h>  //for isatty
+#else
+#include <io.h>  //for _isatty
 #endif
 
 auto getOSName() -> std::string {
@@ -32,9 +32,9 @@ auto getOSName() -> std::string {
 }
 
 auto isStandardOutputATerminal() -> bool {
-#if defined(WIN32) || defined(WIN64)
-  return _isatty(fileno(stdout));
-#else
+#if defined(CMAPLE_HAS_UNISTDH)
   return isatty(fileno(stdout));
+#else
+  return _isatty(fileno(stdout));
 #endif
 }
diff --git a/utils/operatingsystem.h b/utils/operatingsystem.h
index 35ac951..37dfe92 100644
--- a/utils/operatingsystem.h
+++ b/utils/operatingsystem.h
@@ -9,6 +9,7 @@
 #define operatingsystem_h
 
 #include <string>
+#include <cmaple_config.h>
 
 std::string getOSName();
 bool isStandardOutputATerminal();
diff --git a/utils/tools.cpp b/utils/tools.cpp
index a8b1c4e..9992a93 100644
--- a/utils/tools.cpp
+++ b/utils/tools.cpp
@@ -881,8 +881,8 @@ void cmaple::parseArg(int argc, char* argv[], Params& params) {
           outError(e.what());
         }
 
-        if (params.fixed_min_blength <= 0) {
-          outError("<NUMBER> following -min-bl must be positive!");
+        if (params.fixed_min_blength <= 1e-12) {
+          outError("<NUMBER> following -min-bl must be at least 1e-12!");
         }
 
         continue;
