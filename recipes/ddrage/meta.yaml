package:
  name: ddrage
  version: "1.1.4"

source:
  fn: ddrage-1.1.4.tar.gz
  url: https://pypi.python.org/packages/46/e2/fb9f89336197106198c0ac659e39b0530eaee13f1ac31ab885262f35f0e2/ddrage-1.1.4.tar.gz
  md5: 73e90e01ccbbb0f046a5dc664f8a50d6
#  patches:
   # List any patch files here
   # - fix.patch

build:
  # noarch_python: True
  # preserve_egg_dir: True
  entry_points:
    # Put any entry points (scripts to be generated automatically) here. The
    # syntax is module:function.  For example
    #
    # - ddrage = ddrage:main
    #
    # Would create an entry point called ddrage that calls ddrage.main()

    - rage = ddrage.__main__:main
    - randomize_fastq = ddrage.tools.randomize_fastq:main
    - learn_qmodel = ddrage.tools.learn_qmodel:main

  # If this is a new build for the same version, increment the build
  # number. If you do not include this key, it defaults to 0.
  # number: 1

requirements:
  build:
    - python
    - setuptools
    - numpy
    - numba
    - matplotlib
    - scipy
    - pyyaml

  run:
    - python
    - numpy
    - numba
    - matplotlib
    - scipy
    - pyyaml

test:
  # Python imports
  imports:
    - ddrage
    - ddrage.barcode_handler
    - ddrage.tools

  commands:
    # You can put test commands to be run here.  Use this to test that the
    # entry points work.

    - rage --help
    - randomize_fastq --help
    - learn_qmodel --help

  # You can also put a file called run_test.py in the recipe that will be run
  # at test time.

  # requires:
    # Put any additional test requirements here.  For example
    # - nose

about:
  home: https://bitbucket.org/genomeinformatics/rage
  license: MIT License
  summary: 'Simulator for ddRADseq (double digest restriction site associdated DNA squencing) datasets. Generates reads (FASTQ format) that can be analyzed and validated using a ground truth file (YAML).'
  license_family: MIT

# See
# http://docs.continuum.io/conda/build.html for
# more information about meta.yaml
