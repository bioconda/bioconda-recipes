{% set name = "jalview" %}
{% set version = "2.11.3.3" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

build:
  number: 0
  noarch: generic
  run_exports:
    - {{ pin_subpackage( name, max_pin="x.x") }}

source:
  url: https://www.jalview.org/source/jalview_{{ version|replace(".", "_") }}.tar.gz
  sha256: "e41bcbb8d8e46eaed125f5bdac9f16ef443a804bb5b6c1310abd9489a862fa79"

requirements:
  build:
    - make
    - gradle >7.4,<8
    # jalview 2.11 series requires Java 11 to build.
    - openjdk 11
    - xorg-libxtst
  run:
    # Jalview 2.11.* can run as 1.8/8 or java 11
    # Version number reference: https://github.com/conda/conda/issues/6948#issuecomment-369360906
    # A bug with OpenJDK 11.0.9.1+1 makes Jalview crash on macOS. Fixed with later versions of OpenJDK.
    - openjdk >=8.0.192,!=9.*,!=10.*,!=11.0.9.*,<12
    - xorg-libxtst
    - psutil

test:
  commands:
    - jalview --help


about:
  home: https://www.jalview.org/
  license: GPL-3.0-only
  license_file: LICENSE
  summary: Jalview is a free program for multiple sequence alignment editing, visualisation, analysis and figure generation.
  description: |
    Jalview is a free program for multiple sequence alignment editing, visualisation, analysis and figure generation.
    Use it to view and edit sequence alignments, analyse them with phylogenetic trees and principal
    components analysis (PCA) plots and explore molecular structures and annotation. It is also able
    to import and annotate DNA and Protein products from VCF files and retrieve data and annotation from
    3D-Beacons, Uniprot, Ensembl, ENA, Rfam, Pfam and the PDBe.

extra:
  notes: |
    This wrapper and installation is primarily for commandline use.
    Set JALVIEW_JRE=j1.8 or JALVIEW_JRE=j11 to specify the java runtime if you need jalview to start up as quickly as possible
    Set JALVIEW_MAXMEM=2g to restrict jalviews maximal memory consumption (here to 2G RAM). Otherwise 90% of physical memory
    (capped at 32G) is allocated.  Memory allocation can also be set in Tools->Preferences->Startup or specified with command-
    line arguments --jvmmempc=90 (percentage of total physical memory, default 90) and --jvmmemmax=2g (set a different cap,
    default 32G if total physical memory can be detected or 8G if total physical memory cannot be detected).
