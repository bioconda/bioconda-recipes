From 6336ca9136597d842a1026cc18c7d4078434782c Mon Sep 17 00:00:00 2001
From: Matthew Workentine <matthew.workentine@ucalgary.ca>
Date: Fri, 20 Oct 2017 09:51:56 -0600
Subject: [PATCH] using boost::regex


diff --git a/configure b/configure
index ce4d663..9832770 100755
--- a/configure
+++ b/configure
@@ -7649,98 +7649,6 @@ _ACEOF
 fi
 done
 
-
-#
-# Test if regular expressions are functional. Early regex implementations have nonfunctional stubs,
-# so the check for C++11 succeeds, but the compiled code will throw an exception.
-#
-ac_ext=cpp
-ac_cpp='$CXXCPP $CPPFLAGS'
-ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'
-ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
-ac_compiler_gnu=$ac_cv_cxx_compiler_gnu
-
-
-
-
-{ $as_echo "$as_me:$LINENO: checking for functional regular expressions" >&5
-$as_echo_n "checking for functional regular expressions... " >&6; }
-if test "${stacks_cv_header_regex_func+set}" = set; then
-  $as_echo_n "(cached) " >&6
-else
-
-stacks_cv_header_regex_func=no
-if test "$cross_compiling" = yes; then
-  { $as_echo "$as_me:$LINENO: WARNING: Requires g++ 4.9.0 or greater." >&5
-$as_echo "$as_me: WARNING: Requires g++ 4.9.0 or greater." >&2;}
-
-else
-  cat >conftest.$ac_ext <<_ACEOF
-/* confdefs.h.  */
-_ACEOF
-cat confdefs.h >>conftest.$ac_ext
-cat >>conftest.$ac_ext <<_ACEOF
-/* end confdefs.h.  */
-
-#include <regex>
-int main() {
-  const std::regex regex(".*");
-  const std::string string = "This should match!";
-  const auto result = std::regex_search(string, regex);
-  return result ? 0 : 1;
-}
-
-_ACEOF
-rm -f conftest$ac_exeext
-if { (ac_try="$ac_link"
-case "(($ac_try" in
-  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
-  *) ac_try_echo=$ac_try;;
-esac
-eval ac_try_echo="\"\$as_me:$LINENO: $ac_try_echo\""
-$as_echo "$ac_try_echo") >&5
-  (eval "$ac_link") 2>&5
-  ac_status=$?
-  $as_echo "$as_me:$LINENO: \$? = $ac_status" >&5
-  (exit $ac_status); } && { ac_try='./conftest$ac_exeext'
-  { (case "(($ac_try" in
-  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
-  *) ac_try_echo=$ac_try;;
-esac
-eval ac_try_echo="\"\$as_me:$LINENO: $ac_try_echo\""
-$as_echo "$ac_try_echo") >&5
-  (eval "$ac_try") 2>&5
-  ac_status=$?
-  $as_echo "$as_me:$LINENO: \$? = $ac_status" >&5
-  (exit $ac_status); }; }; then
-  stacks_cv_header_regex_func=yes
-else
-  $as_echo "$as_me: program exited with status $ac_status" >&5
-$as_echo "$as_me: failed program was:" >&5
-sed 's/^/| /' conftest.$ac_ext >&5
-
-( exit $ac_status )
-{ { $as_echo "$as_me:$LINENO: error: Regular expressions are not functional, you need g++ 4.9.0 or greater." >&5
-$as_echo "$as_me: error: Regular expressions are not functional, you need g++ 4.9.0 or greater." >&2;}
-   { (exit 1); exit 1; }; }
-fi
-rm -rf conftest.dSYM
-rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext conftest.$ac_objext conftest.$ac_ext
-fi
-
-
-fi
-{ $as_echo "$as_me:$LINENO: result: $stacks_cv_header_regex_func" >&5
-$as_echo "$stacks_cv_header_regex_func" >&6; }
-if test "$stacks_cv_header_regex_func" = yes; then
-
-cat >>confdefs.h <<\_ACEOF
-#define REGEX_FUNCTIONAL 1
-_ACEOF
-
-fi
-
-
 # For test harness
 for ac_prog in gawk mawk nawk awk
 do
diff --git a/src/catalog_utils.cc b/src/catalog_utils.cc
index 9908557..58bbd9b 100644
--- a/src/catalog_utils.cc
+++ b/src/catalog_utils.cc
@@ -25,7 +25,7 @@
 // jcatchen@uoregon.edu
 // University of Oregon
 //
-#include <regex>
+#include <boost/regex.hpp>
 
 #include "utils.h"
 
@@ -33,15 +33,15 @@
 
 using namespace std;
 
-const regex catalog_tags_regex ("^batch_([0-9]+).catalog.tags.tsv(.gz)?$");
+const boost::regex catalog_tags_regex ("^batch_([0-9]+).catalog.tags.tsv(.gz)?$");
 
 vector<int> find_catalogs(const string& dir_path) {
     vector<int> ids;
 
     for (DirIterator e (dir_path); e; ++e) {
-        smatch m;
+        boost::smatch m;
         string name (e.name());
-        regex_match(name, m, catalog_tags_regex);
+        boost::regex_match(name, m, catalog_tags_regex);
         if (!m.empty())
             ids.push_back(stoi(m[1].str()));
     }
diff --git a/src/constants.cc b/src/constants.cc
index e89d2df..a2dd8f2 100644
--- a/src/constants.cc
+++ b/src/constants.cc
@@ -1,4 +1,4 @@
-#include <regex>
+#include <boost/regex.hpp>
 #include <cassert>
 #include <map>
 
@@ -44,7 +44,7 @@ string remove_suffix(FileT type, const string& orig) {
     return file;
 }
 
-regex init_file_ext_regex () {
+boost::regex init_file_ext_regex () {
     string s = "(";
 
     auto i = known_extensions.begin();
@@ -61,15 +61,15 @@ regex init_file_ext_regex () {
     }
 
     s += ")$";
-    return regex(s);
+    return boost::regex(s);
 }
 
 FileT guess_file_type (const string& path) {
 
-    static const regex reg = init_file_ext_regex();
+    static const boost::regex reg = init_file_ext_regex();
 
-    smatch m;
-    regex_search(path, m, reg);
+    boost::smatch m;
+    boost::regex_search(path, m, reg);
 
     if (m.empty())
         return FileT::unknown;
diff --git a/src/sstacks.cc b/src/sstacks.cc
index a7e56ad..7644153 100644
--- a/src/sstacks.cc
+++ b/src/sstacks.cc
@@ -22,7 +22,7 @@
 // sstacks -- search for occurances of stacks in a catalog of stacks.
 //
 
-#include <regex>
+#include <boost/regex.hpp>
 
 #include "catalog_utils.h"
 #include "MetaPopInfo.h"
@@ -1432,9 +1432,9 @@ int parse_command_line(int argc, char* argv[]) {
 
     } else if (!catalog_path.empty()) {
         if (batch_id < 0) {
-            regex r ("batch_([0-9]+)");
-            smatch m;
-            regex_search(catalog_path, m, r);
+            boost::regex r ("batch_([0-9]+)");
+            boost::smatch m;
+            boost::regex_search(catalog_path, m, r);
             if (m.size()==2) {
                 // full match plus one submatch
                 batch_id = stoi(m[1].str());
-- 
2.14.2

