--- a/configure	2017-04-13 23:03:09.000000000 +0200
+++ b/configure	2017-04-20 17:18:58.177959732 +0200
@@ -7650,97 +7650,6 @@
 done
 
 
-#
-# Test if regular expressions are functional. Early regex implementations have nonfunctional stubs,
-# so the check for C++11 succeeds, but the compiled code will throw an exception.
-#
-ac_ext=cpp
-ac_cpp='$CXXCPP $CPPFLAGS'
-ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'
-ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
-ac_compiler_gnu=$ac_cv_cxx_compiler_gnu
-
-
-
-
-{ $as_echo "$as_me:$LINENO: checking for functional regular expressions" >&5
-$as_echo_n "checking for functional regular expressions... " >&6; }
-if test "${stacks_cv_header_regex_func+set}" = set; then
-  $as_echo_n "(cached) " >&6
-else
-
-stacks_cv_header_regex_func=no
-if test "$cross_compiling" = yes; then
-  { $as_echo "$as_me:$LINENO: WARNING: Requires g++ 4.9.0 or greater." >&5
-$as_echo "$as_me: WARNING: Requires g++ 4.9.0 or greater." >&2;}
-
-else
-  cat >conftest.$ac_ext <<_ACEOF
-/* confdefs.h.  */
-_ACEOF
-cat confdefs.h >>conftest.$ac_ext
-cat >>conftest.$ac_ext <<_ACEOF
-/* end confdefs.h.  */
-
-#include <regex>
-int main() {
-  const std::regex regex(".*");
-  const std::string string = "This should match!";
-  const auto result = std::regex_search(string, regex);
-  return result ? 0 : 1;
-}
-
-_ACEOF
-rm -f conftest$ac_exeext
-if { (ac_try="$ac_link"
-case "(($ac_try" in
-  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
-  *) ac_try_echo=$ac_try;;
-esac
-eval ac_try_echo="\"\$as_me:$LINENO: $ac_try_echo\""
-$as_echo "$ac_try_echo") >&5
-  (eval "$ac_link") 2>&5
-  ac_status=$?
-  $as_echo "$as_me:$LINENO: \$? = $ac_status" >&5
-  (exit $ac_status); } && { ac_try='./conftest$ac_exeext'
-  { (case "(($ac_try" in
-  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
-  *) ac_try_echo=$ac_try;;
-esac
-eval ac_try_echo="\"\$as_me:$LINENO: $ac_try_echo\""
-$as_echo "$ac_try_echo") >&5
-  (eval "$ac_try") 2>&5
-  ac_status=$?
-  $as_echo "$as_me:$LINENO: \$? = $ac_status" >&5
-  (exit $ac_status); }; }; then
-  stacks_cv_header_regex_func=yes
-else
-  $as_echo "$as_me: program exited with status $ac_status" >&5
-$as_echo "$as_me: failed program was:" >&5
-sed 's/^/| /' conftest.$ac_ext >&5
-
-( exit $ac_status )
-{ { $as_echo "$as_me:$LINENO: error: Regular expressions are not functional, you need g++ 4.9.0 or greater." >&5
-$as_echo "$as_me: error: Regular expressions are not functional, you need g++ 4.9.0 or greater." >&2;}
-   { (exit 1); exit 1; }; }
-fi
-rm -rf conftest.dSYM
-rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext conftest.$ac_objext conftest.$ac_ext
-fi
-
-
-fi
-{ $as_echo "$as_me:$LINENO: result: $stacks_cv_header_regex_func" >&5
-$as_echo "$stacks_cv_header_regex_func" >&6; }
-if test "$stacks_cv_header_regex_func" = yes; then
-
-cat >>confdefs.h <<\_ACEOF
-#define REGEX_FUNCTIONAL 1
-_ACEOF
-
-fi
-
-
 # For test harness
 for ac_prog in gawk mawk nawk awk
 do
--- a/src/sstacks.cc	2017-04-20 19:43:55.274105934 +0200
+++ b/src/sstacks.cc	2017-04-20 19:40:00.930177547 +0200
@@ -22,7 +22,7 @@
 // sstacks -- search for occurances of stacks in a catalog of stacks.
 //
 
+#include <boost/regex.hpp>
-#include <regex>
 
 #include "catalog_utils.h"
 #include "MetaPopInfo.h"
@@ -30,6 +30,7 @@
 #include "sstacks.h"
 
 using namespace std;
+using namespace boost;
 
 // Global variables to hold command-line options.
 queue<string> samples;
--- a/src/constants.cc	2017-04-20 19:43:32.793399833 +0200
+++ b/src/constants.cc	2017-04-20 19:41:33.523959091 +0200
@@ -1,10 +1,11 @@
+#include <boost/regex.hpp>
-#include <regex>
 #include <cassert>
 #include <map>
 
 #include "constants.h"
 
 using namespace std;
+using namespace boost;
 
 const
 map<string, FileT> known_extensions = {
--- a/src/catalog_utils.cc	2017-04-20 19:44:48.203413967 +0200
+++ b/src/catalog_utils.cc	2017-04-20 19:44:21.373764722 +0200
@@ -25,13 +25,14 @@
 // jcatchen@uoregon.edu
 // University of Oregon
 //
+#include <boost/regex.hpp>
-#include <regex>
 
 #include "utils.h"
 
 #include "catalog_utils.h"
 
 using namespace std;
+using namespace boost;
 
 const regex catalog_tags_regex ("^batch_([0-9]+).catalog.tags.tsv(.gz)?$");
 
