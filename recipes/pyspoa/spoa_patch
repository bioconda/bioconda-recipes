diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 883b3bf..1b30e47 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -1,6 +1,6 @@
 cmake_minimum_required(VERSION 3.12)
 
-project(spoa VERSION 4.0.8
+project(spoa VERSION 4.1.0
              LANGUAGES CXX
              DESCRIPTION "Spoa is a c++ library (and tool) for SIMD vectorized partial order alignment.")
 
@@ -125,14 +125,14 @@ if (spoa_use_cereal)
 endif ()
 
 if (spoa_build_exe OR spoa_build_tests)
-  find_package(bioparser 3.0.13 QUIET)
-  find_package(biosoup 0.10.0 QUIET)
+  find_package(bioparser 3.1.0 QUIET)
+  find_package(biosoup 0.11.0 QUIET)
 
   if (NOT bioparser_FOUND)
     FetchContent_Declare(
       bioparser
       GIT_REPOSITORY https://github.com/rvaser/bioparser
-      GIT_TAG 3.0.13)
+      GIT_TAG 3.1.0)
 
     FetchContent_GetProperties(bioparser)
     if (NOT bioparser_POPULATED)
@@ -148,7 +148,7 @@ if (spoa_build_exe OR spoa_build_tests)
     FetchContent_Declare(
       biosoup
       GIT_REPOSITORY https://github.com/rvaser/biosoup
-      GIT_TAG 0.10.0)
+      GIT_TAG 0.11.0)
 
     FetchContent_GetProperties(biosoup)
     if (NOT biosoup_POPULATED)
@@ -181,15 +181,20 @@ if (spoa_build_tests)
   endif ()
 endif ()
 
+set(SPOA_VERSION "${PROJECT_VERSION}")
+configure_file(src/spoa_config.h.in spoa_config.h)
+
 add_library(spoa
   src/alignment_engine.cpp
   src/graph.cpp
   src/simd_alignment_engine_dispatcher.cpp
-  src/sisd_alignment_engine.cpp)
+  src/sisd_alignment_engine.cpp
+  src/version.cpp)
 add_library(spoa::spoa ALIAS spoa)
 
 target_include_directories(spoa PUBLIC
   $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
+  $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>
   $<BUILD_INTERFACE:${simde_SOURCE_DIR}>
   $<INSTALL_INTERFACE:include>)
 
@@ -267,13 +272,15 @@ if (spoa_build_exe)
     bioparser::bioparser
     biosoup::biosoup)
 
-  target_compile_definitions(spoa_exe PRIVATE VERSION="${PROJECT_VERSION}")
   set_property(TARGET spoa_exe PROPERTY OUTPUT_NAME spoa)
 
   install(TARGETS spoa_exe DESTINATION ${CMAKE_INSTALL_BINDIR})
 endif ()
 
 if (spoa_build_tests)
+  set(SPOA_TEST_DATA "${PROJECT_SOURCE_DIR}/test/data/sample.fastq.gz")
+  configure_file(test/spoa_test_config.h.in spoa_test_config.h)
+
   add_executable(spoa_test
     test/spoa_test.cpp)
 
@@ -283,6 +290,6 @@ if (spoa_build_tests)
     biosoup::biosoup
     GTest::Main)
 
-  target_compile_definitions(spoa_test
-    PRIVATE TEST_DATA="${PROJECT_SOURCE_DIR}/test/data/sample.fastq.gz")
+  target_include_directories(spoa_test PUBLIC
+    $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>)
 endif ()
diff --git a/src/include/spoa/graph.hpp b/src/include/spoa/graph.hpp
index b3774b3..63d6d88 100644
--- a/src/include/spoa/graph.hpp
+++ b/src/include/spoa/graph.hpp
@@ -166,6 +166,8 @@ class Graph {
 
   std::string GenerateConsensus();
 
+  std::string GenerateConsensus(std::int32_t min_coverage);
+
   std::string GenerateConsensus(
       std::vector<std::uint32_t>* summary,
       bool verbose = false);
diff --git a/src/include/spoa/spoa.hpp b/src/include/spoa/spoa.hpp
index 8cb485b..23af9de 100644
--- a/src/include/spoa/spoa.hpp
+++ b/src/include/spoa/spoa.hpp
@@ -5,5 +5,6 @@
 
 #include "graph.hpp"
 #include "alignment_engine.hpp"
+#include "version.hpp"
 
 #endif  // SPOA_SPOA_HPP_
diff --git a/src/include/spoa/version.hpp b/src/include/spoa/version.hpp
new file mode 100644
index 0000000..119ebfd
--- /dev/null
+++ b/src/include/spoa/version.hpp
@@ -0,0 +1,14 @@
+// Copyright (c) 2023 Robert Vaser
+
+#ifndef SPOA_VERSION_HPP_
+#define SPOA_VERSION_HPP_
+
+#include <string>
+
+namespace spoa {
+
+std::string Version();
+
+}  // namespace spoa
+
+#endif  // SPOA_VERSION_HPP_
diff --git a/src/meson.build b/src/meson.build
new file mode 100644
index 0000000..fda3038
--- /dev/null
+++ b/src/meson.build
@@ -0,0 +1,109 @@
+project(
+  'spoa',
+  ['cpp'],
+  version : '4.1.0',
+  default_options : [
+    'buildtype=release',
+    'warning_level=3',
+    'cpp_std=c++11',
+    'b_ndebug=if-release'],
+  license : 'MIT',
+  meson_version : '>=0.60.0'
+)
+
+################
+# Dependencies #
+################
+
+spoa_lib_flags = []
+spoa_lib_deps = []
+
+if get_option('cereal')
+  # cereal
+  spoa_cereal_dep = dependency('cereal', version : '>= 1.3.0', fallback : ['cereal', 'cereal_dep'])
+
+  spoa_lib_flags += '-DSPOA_USE_CEREAL'
+  spoa_lib_deps += spoa_cereal_dep
+endif
+
+if (not meson.is_subproject())
+  # biosoup
+  spoa_biosoup_dep = dependency('biosoup', version : '>= 0.11.0', fallback : ['biosoup', 'biosoup_dep'])
+
+  # bioparser
+  spoa_bioparser_dep = dependency('bioparser', version : '>= 3.1.0', fallback : ['bioparser', 'bioparser_dep'])
+endif
+
+if (get_option('simde') or
+    get_option('simde_nonvec') or
+    get_option('simde_openmp') or
+    get_option('dispatch'))
+  # simde
+  spoa_simde_dep = dependency('simde', version : '>= 0.7.0', fallback : ['simde', 'simde_dep'])
+
+  add_project_arguments('-DSIMDE_ENABLE_NATIVE_ALIASES', language : ['c', 'cpp'])
+  spoa_lib_flags += '-DSPOA_USE_SIMDE'
+  spoa_lib_deps += spoa_simde_dep
+
+  if get_option('simde_nonvec')
+    add_project_arguments('-DSIMDE_NO_NATIVE', language : ['c', 'cpp'])
+  endif
+
+  if get_option('simde_openmp')
+    add_project_arguments('-DSIMDE_ENABLE_OPENMP', language : ['c', 'cpp'])
+    spoa_lib_flags += '-fopenmp-simd'
+  endif
+
+  if get_option('dispatch')
+    spoa_lib_flags += '-DSPOA_GENERATE_DISPATCH_CPUIDEX'
+  endif
+else
+  if get_option('sse41')
+    spoa_lib_flags += '-msse4.1'
+  elif get_option('avx2')
+    spoa_lib_flags += '-mavx2'
+  endif
+endif
+
+###########
+# Headers #
+###########
+
+subdir('include')
+
+###########
+# Sources #
+###########
+
+subdir('src')
+
+#########
+# Tests #
+#########
+
+if (not meson.is_subproject()) and get_option('tests')
+  # gtest
+  spoa_gtest_dep = dependency('gtest', version : '>= 1.10.0', main : true, fallback : ['gtest', 'gtest_main_dep'])
+
+  subdir('test')
+endif
+
+###################
+# Dependency info #
+###################
+
+if (not meson.is_subproject())
+  import('pkgconfig').generate(
+    spoa_lib,
+    name : 'spoa',
+    version : meson.project_version(),
+    filebase : 'spoa',
+    description : 'C++ tool/library for SIMD vectorized partial order alignment.')
+endif
+
+spoa_dep = declare_dependency(
+  include_directories : spoa_include_directories,
+  link_with : spoa_lib,
+  dependencies : spoa_lib_deps,
+  version : meson.project_version()
+)
diff --git a/src/meson_options.txt b/src/meson_options.txt
new file mode 100644
index 0000000..9ee8bed
--- /dev/null
+++ b/src/meson_options.txt
@@ -0,0 +1,47 @@
+#################
+# Build options #
+#################
+
+option('cereal',
+  type : 'boolean',
+  value : false,
+  description : 'Enable serialization through cereal')
+
+option('avx2',
+  type : 'boolean',
+  value : false,
+  description : 'Build with -mavx2')
+
+option('sse41',
+  type : 'boolean',
+  value : false,
+  description : 'Build with -msse4.1')
+
+option('simde',
+  type : 'boolean',
+  value : false,
+  description : 'Build with SIMDe')
+
+option('simde_nonvec',
+  type : 'boolean',
+  value : false,
+  description : 'Use SIMDe for nonvectorized code')
+
+option('simde_openmp',
+  type : 'boolean',
+  value : false,
+  description : 'Use SIMDe support for OpenMP SIMD')
+
+option('dispatch',
+  type : 'boolean',
+  value : false,
+  description : 'Use SIMDe to generate x86 dispatch')
+
+#########
+# Tests #
+#########
+
+option('tests',
+  type : 'boolean',
+  value : true,
+  description : 'Enable dependencies required for testing')
diff --git a/src/include/spoa/architectures.hpp b/src/src/architectures.hpp
similarity index 100%
rename from include/spoa/architectures.hpp
rename to src/architectures.hpp
diff --git a/src/src/graph.cpp b/src/src/graph.cpp
index c5aec1c..b0b6534 100644
--- a/src/src/graph.cpp
+++ b/src/src/graph.cpp
@@ -374,6 +374,17 @@ std::string Graph::GenerateConsensus() {
   return dst;
 }
 
+std::string Graph::GenerateConsensus(std::int32_t min_coverage) {
+  TraverseHeaviestBundle();
+  std::string dst{};
+  for (const auto& it : consensus_) {
+    if (static_cast<std::int32_t>(it->Coverage()) >= min_coverage) {
+      dst += decoder_[it->code];
+    }
+  }
+  return dst;
+}
+
 std::string Graph::GenerateConsensus(
     std::vector<std::uint32_t>* summary,
     bool verbose) {
diff --git a/src/src/main.cpp b/src/src/main.cpp
index 6a1a9f5..8aba8fa 100644
--- a/src/src/main.cpp
+++ b/src/src/main.cpp
@@ -227,7 +227,7 @@ int main(int argc, char** argv) {
       case 'r': results.emplace_back(atoi(optarg)); break;
       case 'd': dot_path = optarg; break;
       case 's': is_strand_ambiguous = true; break;
-      case 'v': std::cout << VERSION << std::endl; return 0;
+      case 'v': std::cout << spoa::Version() << std::endl; return 0;
       case 'h': Help(); return 0;
       default: return 1;
     }
diff --git a/src/src/meson.build b/src/src/meson.build
new file mode 100644
index 0000000..137c71b
--- /dev/null
+++ b/src/src/meson.build
@@ -0,0 +1,68 @@
+spoa_config = configuration_data()
+spoa_config.set('SPOA_VERSION', meson.project_version())
+
+###########
+# Library #
+###########
+
+spoa_config_headers = [
+  configure_file(
+    input : 'spoa_config.h.in',
+    output : 'spoa_config.h',
+    configuration : spoa_config)
+]
+
+spoa_sources = files([
+  'alignment_engine.cpp',
+  'graph.cpp',
+  'simd_alignment_engine_dispatcher.cpp',
+  'sisd_alignment_engine.cpp',
+  'version.cpp',
+]) + spoa_config_headers
+
+spoa_simd_lib = []
+
+if get_option('dispatch')
+  simd = import('unstable_simd')
+
+  spoa_simd_sources = files([
+    'simd_alignment_engine_dispatch.cpp',
+  ])
+
+  spoa_simd_lib += simd.check(
+    'spoa',
+    sse2 : spoa_simd_sources,
+    sse41 : spoa_simd_sources,
+    avx2 : spoa_simd_sources,
+    dependencies : spoa_lib_deps,
+    include_directories : spoa_include_directories,
+    cpp_args : spoa_lib_flags,
+    compiler : meson.get_compiler('cpp'))[0]
+endif
+
+spoa_lib_install = (not meson.is_subproject()) or (get_option('default_library') != 'static')
+
+spoa_lib = library(
+  'spoa',
+  spoa_sources,
+  soversion : meson.project_version(),
+  version : meson.project_version(),
+  install : spoa_lib_install,
+  dependencies : spoa_lib_deps,
+  include_directories : spoa_include_directories,
+  link_with : spoa_simd_lib,
+  cpp_args : spoa_lib_flags)
+
+##############
+# Executable #
+##############
+
+if (not meson.is_subproject())
+  spoa_exe = executable(
+    'spoa',
+    files(['main.cpp']),
+    install : true,
+    dependencies : [spoa_lib_deps, spoa_biosoup_dep, spoa_bioparser_dep],
+    include_directories : spoa_include_directories,
+    link_with : spoa_lib)
+endif
diff --git a/src/src/simd_alignment_engine.hpp b/src/src/simd_alignment_engine.hpp
index ce6816d..eb5ea13 100644
--- a/src/src/simd_alignment_engine.hpp
+++ b/src/src/simd_alignment_engine.hpp
@@ -9,7 +9,7 @@
 #include <vector>
 
 #include "spoa/alignment_engine.hpp"
-#include "spoa/architectures.hpp"
+#include "architectures.hpp"
 
 namespace spoa {
 
diff --git a/src/src/simd_alignment_engine_dispatcher.cpp b/src/src/simd_alignment_engine_dispatcher.cpp
index 3835020..93f8030 100644
--- a/src/src/simd_alignment_engine_dispatcher.cpp
+++ b/src/src/simd_alignment_engine_dispatcher.cpp
@@ -2,18 +2,78 @@
 
 #include "simd_alignment_engine_implementation.hpp"
 
-#ifdef SPOA_GENERATE_DISPATCH
+#if defined(SPOA_GENERATE_DISPATCH)
 
 #include "cpuinfo_x86.h"  // NOLINT
 
 static const cpu_features::X86Features features =
     cpu_features::GetX86Info().features;
 
+#elif defined(SPOA_GENERATE_DISPATCH_CPUIDEX)
+
+#  if defined(_MSC_VER)
+
+#include <intrin.h>
+
+#  endif
+
+// adapted from https://github.com/intel/linux-sgx/blob/master/common/inc/internal/linux/cpuid_gnu.h
+void RunCpuidex(int cpu_info[4], int function_id, int subfunction_id) {
+#  if defined(_MSC_VER)
+  __cpuidex(cpu_info, function_id, subfunction_id);
+#  elif defined(__X86_64__)
+  __asm__ volatile ("cpuid")
+                  : "=a" (cpu_info[0]), "=b" (cpu_info[1]), "=c" (cpu_info[2]), "=d" (cpu_info[3])
+                  : "0" (function_id), "2" (subfunction_id));
+#  else
+  __asm__ volatile ("xchgl %%ebx, %1; cpuid; xchgl %%ebx, %1"
+                  : "=a" (cpu_info[0]), "=r" (cpu_info[1]), "=c" (cpu_info[2]), "=d" (cpu_info[3])
+                  : "0" (function_id), "2" (subfunction_id));
+#  endif
+}
+
+constexpr int SPOA_SSE2 = 0x1;
+constexpr int SPOA_SSE4_1 = 0x2;
+constexpr int SPOA_AVX2 = 0x4;
+
+static int GetX86Info() {
+  int cpu_info[4] = {0};
+
+  RunCpuidex(cpu_info, 0, 0);
+
+  const int n = cpu_info[0];
+  if (n == 0) {
+    return 0;
+  }
+
+  RunCpuidex(cpu_info, 1, 0);
+
+  int features = 0;
+  if (cpu_info[3] >> 26) {
+    features |= SPOA_SSE2;
+  }
+  if (cpu_info[2] >> 19) {
+    features |= SPOA_SSE4_1;
+  }
+
+  if (n >= 7) {
+    RunCpuidex(cpu_info, 7, 0);
+
+    if (cpu_info[1] >> 5) {
+      features |= SPOA_AVX2;
+    }
+  }
+
+  return features;
+}
+
+static const int features = GetX86Info();
+
 #endif
 
 namespace spoa {
-
-#ifndef SPOA_GENERATE_DISPATCH
+ 
+#if !defined(SPOA_GENERATE_DISPATCH) && !defined(SPOA_GENERATE_DISPATCH_CPUIDEX)
 
 template class SimdAlignmentEngine<Architecture::kAutomatic>;
 
@@ -28,7 +88,7 @@ std::unique_ptr<AlignmentEngine> CreateSimdAlignmentEngine(
     std::int8_t e,
     std::int8_t q,
     std::int8_t c) {
-#ifdef SPOA_GENERATE_DISPATCH
+#if defined(SPOA_GENERATE_DISPATCH)
   if (features.avx2) {
     return SimdAlignmentEngine<Architecture::kAVX2>::Create(
         type, subtype, m, n, g, e, q, c);
@@ -39,6 +99,17 @@ std::unique_ptr<AlignmentEngine> CreateSimdAlignmentEngine(
     return SimdAlignmentEngine<Architecture::kSSE2>::Create(
         type, subtype, m, n, g, e, q, c);
   }
+#elif defined(SPOA_GENERATE_DISPATCH_CPUIDEX)
+  if (features & SPOA_AVX2) {
+    return SimdAlignmentEngine<Architecture::kAVX2>::Create(
+        type, subtype, m, n, g, e, q, c);
+  } else if (features & SPOA_SSE4_1) {
+    return SimdAlignmentEngine<Architecture::kSSE4_1>::Create(
+        type, subtype, m, n, g, e, q, c);
+  } else {
+    return SimdAlignmentEngine<Architecture::kSSE2>::Create(
+        type, subtype, m, n, g, e, q, c);
+  }
 #else
   return SimdAlignmentEngine<Architecture::kAutomatic>::Create(
       type, subtype, m, n, g, e, q, c);
diff --git a/src/src/spoa_config.h.in b/src/src/spoa_config.h.in
new file mode 100644
index 0000000..0b9a269
--- /dev/null
+++ b/src/src/spoa_config.h.in
@@ -0,0 +1,12 @@
+// Copyright (c) 2023 Robert Vaser
+
+#ifndef SPOA_CONFIG_H_
+#define SPOA_CONFIG_H_
+
+namespace spoa {
+
+constexpr char SPOA_VERSION[] = "@SPOA_VERSION@";
+
+}  // namespace spoa
+
+#endif  // SPOA_CONFIG_H_
diff --git a/src/src/version.cpp b/src/src/version.cpp
new file mode 100644
index 0000000..2ffce91
--- /dev/null
+++ b/src/src/version.cpp
@@ -0,0 +1,13 @@
+// Copyright (c) 2023 Robert Vaser
+
+#include "spoa/version.hpp"
+
+#include "spoa_config.h"
+
+namespace spoa {
+
+std::string Version() {
+    return std::string(SPOA_VERSION);
+}
+
+}  // namespace spoa
diff --git a/src/subprojects/bioparser.wrap b/src/subprojects/bioparser.wrap
new file mode 100644
index 0000000..5c4bb3d
--- /dev/null
+++ b/src/subprojects/bioparser.wrap
@@ -0,0 +1,5 @@
+[wrap-git]
+directory = bioparser
+
+url = https://github.com/rvaser/bioparser
+revision = 3.1.0
diff --git a/src/subprojects/biosoup.wrap b/src/subprojects/biosoup.wrap
new file mode 100644
index 0000000..e2d7e59
--- /dev/null
+++ b/src/subprojects/biosoup.wrap
@@ -0,0 +1,5 @@
+[wrap-git]
+directory = biosoup
+
+url = https://github.com/rvaser/biosoup
+revision = 0.11.0
diff --git a/src/subprojects/cereal.wrap b/src/subprojects/cereal.wrap
new file mode 100644
index 0000000..aca993b
--- /dev/null
+++ b/src/subprojects/cereal.wrap
@@ -0,0 +1,15 @@
+[wrap-file]
+directory = cereal-1.3.0
+
+source_url = https://github.com/USCiLab/cereal/archive/v1.3.0.tar.gz
+source_filename = cereal-1.3.0.tar.gz
+source_hash = 329ea3e3130b026c03a4acc50e168e7daff4e6e661bc6a7dfec0d77b570851d5
+
+patch_url = https://wrapdb.mesonbuild.com/v2/cereal_1.3.0-1/get_patch
+patch_filename = cereal-1.3.0-1-wrap.zip
+patch_hash = 418724e544fb7cf2eab4b0dbd623925f81e79e7b38f098f6dc07bf2c27cb48a6
+
+wrapdb_version = 1.3.0-1
+
+[provide]
+cereal = cereal_dep
diff --git a/src/subprojects/gtest.wrap b/src/subprojects/gtest.wrap
new file mode 100644
index 0000000..6eaacc4
--- /dev/null
+++ b/src/subprojects/gtest.wrap
@@ -0,0 +1,16 @@
+[wrap-file]
+directory = googletest-release-1.10.0
+
+source_url = https://github.com/google/googletest/archive/release-1.10.0.zip
+source_filename = gtest-1.10.0.zip
+source_hash = 94c634d499558a76fa649edb13721dce6e98fb1e7018dfaeba3cd7a083945e91
+
+patch_url = https://wrapdb.mesonbuild.com/v2/gtest_1.10.0-1/get_patch
+patch_filename = gtest-1.10.0-1-wrap.zip
+patch_hash = 04ff14e8880e4e465f6260221e9dfd56fea6bc7cce4c4aff0dc528e4a2c8f514
+
+wrapdb_version = 1.10.0-1
+
+[provide]
+gtest = gtest_dep
+gtest_main = gtest_main_dep
diff --git a/src/subprojects/simde.wrap b/src/subprojects/simde.wrap
new file mode 100644
index 0000000..08609b3
--- /dev/null
+++ b/src/subprojects/simde.wrap
@@ -0,0 +1,9 @@
+[wrap-file]
+directory = simde-0.7.0
+
+source_url = https://github.com/simd-everywhere/simde/archive/refs/tags/v0.7.0.zip
+source_filename = simde-0.7.0.zip
+source_hash = 201e7781853902f668b9073fe58cb56d9f9df8b3a8933a80fe7b3c65711ed1ef
+
+[provide]
+simde = simde_dep
diff --git a/src/test/meson.build b/src/test/meson.build
new file mode 100644
index 0000000..54cc894
--- /dev/null
+++ b/src/test/meson.build
@@ -0,0 +1,31 @@
+spoa_test_config = configuration_data()
+spoa_test_config.set('SPOA_TEST_DATA',  meson.project_source_root() + '/test/data/sample.fastq.gz')
+
+###########
+# Sources #
+###########
+
+spoa_test_config_headers = [
+  configure_file(
+    input : 'spoa_test_config.h.in',
+    output : 'spoa_test_config.h',
+    configuration : spoa_test_config)
+]
+
+spoa_test_sources = files([
+  'spoa_test.cpp',
+]) + spoa_test_config_headers
+
+spoa_test = executable(
+  'spoa_test',
+  spoa_test_sources,
+  dependencies : [spoa_lib_deps, spoa_biosoup_dep, spoa_bioparser_dep, spoa_gtest_dep],
+  include_directories : spoa_include_directories,
+  link_with : spoa_lib,
+  install : false)
+
+#########
+# Tests #
+#########
+
+test('spoa gtest unit tests', spoa_test)
diff --git a/src/test/spoa_test.cpp b/src/test/spoa_test.cpp
index 66c51a3..4bdd91c 100644
--- a/src/test/spoa_test.cpp
+++ b/src/test/spoa_test.cpp
@@ -11,6 +11,8 @@
 
 #include "spoa/spoa.hpp"
 
+#include "spoa_test_config.h"
+
 std::atomic<std::uint32_t> biosoup::Sequence::num_objects{0};
 
 namespace spoa {
@@ -27,7 +29,7 @@ class SpoaTest: public ::testing::Test {
       std::int8_t q,
       std::int8_t c,
       bool quality) {
-    auto p = bioparser::Parser<biosoup::Sequence>::Create<bioparser::FastqParser>(TEST_DATA);  // NOLINT
+    auto p = bioparser::Parser<biosoup::Sequence>::Create<bioparser::FastqParser>(SPOA_TEST_DATA);  // NOLINT
     s = p->Parse(-1);
     EXPECT_EQ(55, s.size());
 
diff --git a/src/test/spoa_test_config.h.in b/src/test/spoa_test_config.h.in
new file mode 100644
index 0000000..b3be559
--- /dev/null
+++ b/src/test/spoa_test_config.h.in
@@ -0,0 +1,14 @@
+// Copyright (c) 2023 Robert Vaser
+
+#ifndef SPOA_TEST_CONFIG_H_
+#define SPOA_TEST_CONFIG_H_
+
+namespace spoa {
+namespace test {
+
+constexpr char SPOA_TEST_DATA[] = "@SPOA_TEST_DATA@";
+
+}  // namespace test
+}  // namespace spoa
+
+#endif  // SPOA_TEST_CONFIG_H_
