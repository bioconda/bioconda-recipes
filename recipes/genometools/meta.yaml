package:
  name: genometools
  version: "1.2.1"

source:
  fn: genometools-1.2.1.tar.gz
  url: https://pypi.python.org/packages/source/g/genometools/genometools-1.2.1.tar.gz
  md5: 8ff7f54c101656ac1cde5ea8009925e1
#  patches:
   # List any patch files here
   # - fix.patch

build:
  skip: True # [not py27]
  # noarch_python: True
  # preserve_egg_dir: True
  entry_points:
    # Put any entry points (scripts to be generated automatically) here. The
    # syntax is module:function.  For example
    #
    # - genometools = genometools:main
    #
    # Would create an entry point called genometools that calls genometools.main()

    - ensembl_filter_fasta.py = genometools.ensembl.filter_fasta:main
    - ensembl_extract_protein_coding_genes.py = genometools.ensembl.extract_protein_coding_genes:main
    - ensembl_extract_protein_coding_gene_ids.py = genometools.ensembl.extract_protein_coding_gene_ids:main
    - ensembl_extract_protein_coding_exon_annotations.py = genometools.ensembl.extract_protein_coding_exon_annotations:main
    - ncbi_extract_entrez2gene.py = genometools.ncbi.extract_entrez2gene:main
    - geo_generate_sample_sheet.py = genometools.geo.generate_sample_sheet:main
    - sra_find_experiment_runs.py = genometools.sra.find_experiment_runs:main
    - seq_trim_fastq.py = genometools.seq.trim_fastq:main
    - rnaseq_stringtie_gene_level_expression.py = genometools.rnaseq.stringtie_gene_level_expression:main
    - exp_convert_entrez2gene.py = genometools.expression.convert_entrez2gene:main

  # If this is a new build for the same version, increment the build
  # number. If you do not include this key, it defaults to 0.
  # number: 1

requirements:
  build:
    - python
    - setuptools
    - unicodecsv
    - xmltodict
    - requests

  run:
    - python
    - unicodecsv
    - xmltodict
    - requests
    - numpy
    - ftputil

test:
  # Python imports
  imports:
    - genometools
    - genometools.basic
    - genometools.ebi
    - genometools.ensembl
    - genometools.expression
    - genometools.geo
    - genometools.misc
    - genometools.ncbi
    - genometools.rnaseq
    - genometools.seq
    - genometools.sra

  commands:
    # You can put test commands to be run here.  Use this to test that the
    # entry points work.

    # - ensembl_filter_fasta.py --help | grep 'usage' > /dev/null
    - ensembl_extract_protein_coding_genes.py --help | grep 'usage' > /dev/null
    - ensembl_extract_protein_coding_gene_ids.py --help | grep 'usage' > /dev/null
    - ensembl_extract_protein_coding_exon_annotations.py --help | grep 'usage' > /dev/null
    - ncbi_extract_entrez2gene.py --help | grep 'usage' > /dev/null
    - geo_generate_sample_sheet.py --help | grep 'usage' > /dev/null
    - sra_find_experiment_runs.py --help | grep 'usage' > /dev/null
    - seq_trim_fastq.py --help | grep 'usage' > /dev/null
    - rnaseq_stringtie_gene_level_expression.py --help | grep 'usage' > /dev/null
    - exp_convert_entrez2gene.py --help | grep 'usage' > /dev/null

  # You can also put a file called run_test.py in the recipe that will be run
  # at test time.

  # requires:
    # Put any additional test requirements here.  For example
    # - nose

about:
  home: https://github.com/flo-compbio/genometools
  license: GNU General Public License v3 (GPLv3)
  summary: 'GenomeTools: Scripts and Classes For Working With Genomic Data.'

# See
# http://docs.continuum.io/conda/build.html for
# more information about meta.yaml
