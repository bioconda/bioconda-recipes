From 9c1a9be69d886a636d7e26165097f2eff2c621f1 Mon Sep 17 00:00:00 2001
From: Ilya Shlyakhter <ilya_shl@alum.mit.edu>
Date: Mon, 25 Oct 2021 17:02:56 -0400
Subject: [PATCH] converted to py3; added pip packaging

---
 isafe                   |  1 +
 isafe_viewer/web_app.py |  4 ++--
 requirements.txt        |  3 +++
 scripts/isafe           |  7 ++++++
 setup.cfg               |  7 ++++++
 setup.py                | 49 +++++++++++++++++++++++++++++++++++++++++
 src/__init__.py         |  4 ++++
 src/__main__.py         |  6 +++++
 src/bcftools.py         |  8 +++----
 src/isafe.py            | 16 ++++++++------
 src/isafeclass.py       |  8 +++----
 src/utils.py            |  2 +-
 tests/__init__.py       |  1 +
 tests/test_isafe.py     | 28 +++++++++++++++++++++++
 14 files changed, 126 insertions(+), 18 deletions(-)
 create mode 120000 isafe
 create mode 100644 requirements.txt
 create mode 100755 scripts/isafe
 create mode 100644 setup.cfg
 create mode 100755 setup.py
 create mode 100644 src/__main__.py
 create mode 100755 tests/__init__.py
 create mode 100755 tests/test_isafe.py

diff --git a/isafe b/isafe
new file mode 120000
index 0000000..e831038
--- /dev/null
+++ b/isafe
@@ -0,0 +1 @@
+src
\ No newline at end of file
diff --git a/isafe_viewer/web_app.py b/isafe_viewer/web_app.py
index 4f02fd1..bd2cb30 100644
--- a/isafe_viewer/web_app.py
+++ b/isafe_viewer/web_app.py
@@ -14,11 +14,11 @@ app.config['RESULT_FOLDER'] = RESULT_FOLDER
 @app.route('/', methods=['GET', 'POST'])
 def main():
     if request.method == 'POST':
-        print(request.form)
+        print((request.form))
         time.sleep(2)
         try:
             populations = []
-            for key, value in request.form.items():
+            for key, value in list(request.form.items()):
                 if key == 'populations[]':
                     populations.append(value)
             if len(populations) == 0:
diff --git a/requirements.txt b/requirements.txt
new file mode 100644
index 0000000..41279fb
--- /dev/null
+++ b/requirements.txt
@@ -0,0 +1,3 @@
+numpy>=1.9.0
+pandas>=0.18.0
+pysam
diff --git a/scripts/isafe b/scripts/isafe
new file mode 100755
index 0000000..50fe2fa
--- /dev/null
+++ b/scripts/isafe
@@ -0,0 +1,7 @@
+#!/usr/bin/env python3
+
+import isafe
+
+if __name__ == '__main__':
+    isafe.run()
+
diff --git a/setup.cfg b/setup.cfg
new file mode 100644
index 0000000..2af7562
--- /dev/null
+++ b/setup.cfg
@@ -0,0 +1,7 @@
+[wheel]
+universal = 1
+
+[options.entry_points]
+console_scripts =
+    hello-world = isafe:run
+
diff --git a/setup.py b/setup.py
new file mode 100755
index 0000000..36df892
--- /dev/null
+++ b/setup.py
@@ -0,0 +1,49 @@
+#!/usr/bin/env python
+# -*- coding: utf-8 -*-
+
+
+try:
+    from setuptools import setup
+except ImportError:
+    from distutils.core import setup
+
+
+readme = """A program for identifying a favored mutation in positive selective sweep. 
+    It enables researchers to accurately pinpoint the favored mutation in a large region (âˆ¼5 Mbp) 
+    by using a statistic derived solely from population genetics signals."""
+
+requirements = [
+    'numpy>=1.9.0',
+    'pandas>=0.18.0',
+    'pysam'
+]
+
+test_requirements = []
+
+setup(
+    name='isafe',
+    version='0.1.7',
+    description="A program for identifying a favored mutation in positive selective sweep.",
+    long_description=readme + '\n\n',
+    author="Ali Akbari et tal",
+    author_email='Ali_Akbari@hms.harvard.edu',
+    url='https://github.com/alek0991/iSAFE',
+    packages=['isafe'],
+    include_package_data=True,
+    install_requires=requirements,
+    entry_points = {
+        'console_scripts': ['isafe=isafe.isafe:run'],
+    },
+    license="BSD-3-Clause",
+    zip_safe=False,
+    keywords='isafe',
+    classifiers=[
+        'Development Status :: 4 - Beta',
+        'Intended Audience :: Science/Research',
+        'License :: OSI Approved :: BSD License',
+        'Natural Language :: English',
+        'Programming Language :: Python :: 3'
+    ],
+    test_suite='tests',
+    tests_require=test_requirements
+)
diff --git a/src/__init__.py b/src/__init__.py
index e69de29..de55ae7 100644
--- a/src/__init__.py
+++ b/src/__init__.py
@@ -0,0 +1,4 @@
+__author__ = 'Ali Akbari et al'
+__email__ = 'Ali_Akbari@hms.harvard.edu'
+__version__ = '0.1.7'
+
diff --git a/src/__main__.py b/src/__main__.py
new file mode 100644
index 0000000..6d6769a
--- /dev/null
+++ b/src/__main__.py
@@ -0,0 +1,6 @@
+from .isafe import run
+
+if __name__ == '__main__':
+    run()
+    
+    
diff --git a/src/bcftools.py b/src/bcftools.py
index e167065..4e69e56 100644
--- a/src/bcftools.py
+++ b/src/bcftools.py
@@ -1,7 +1,7 @@
 import numpy as np
 import pandas as pd
 import os
-from StringIO import StringIO
+from io import StringIO
 import warnings
 bcf_tools = "bcftools"
 
@@ -160,7 +160,7 @@ def get_snp_matrix(chrom, region_start, region_end, case_vcf, AA_file, cont_vcf=
 
     total_window_size=region_end-region_start
     if status:
-        print 'Loading %0.3fMbp, %s:%i-%i, please wait ...'%(total_window_size/1e6, chrom, region_start, region_end)
+        print('Loading %0.3fMbp, %s:%i-%i, please wait ...'%(total_window_size/1e6, chrom, region_start, region_end))
     df = get_combined_vcf(chrom, region_start, region_end, case_vcf, cont_vcf=cont_vcf, case_IDs=case_IDs, cont_IDs=cont_IDs)
     if AA_file is not None:
         dfI = get_AA_df(AA_file, df)
@@ -178,11 +178,11 @@ def get_snp_matrix(chrom, region_start, region_end, case_vcf, AA_file, cont_vcf=
         case_num = sum(df.columns.get_level_values("group")=='case')
         NumberRandomSample = int(np.round(RandomSampleRate/(1-RandomSampleRate)*case_num))
         if status:
-            print "Adding %i random haplotypes (%i%%)." % (NumberRandomSample, RandomSampleRate * 100)
+            print("Adding %i random haplotypes (%i%%)." % (NumberRandomSample, RandomSampleRate * 100))
         I1 = list(np.random.choice(np.where(I==False)[0], NumberRandomSample))
 
         I[I1] = True
     elif cont_vcf is not None:
         if status:
-            print "MDDAF: Random samples are not required."
+            print("MDDAF: Random samples are not required.")
     return df.loc[:,I], dfreq, dfI,Need_Random_Sample
diff --git a/src/isafe.py b/src/isafe.py
index 6dc9fed..402a2de 100644
--- a/src/isafe.py
+++ b/src/isafe.py
@@ -1,10 +1,12 @@
+#!/usr/bin/env python
+
 import argparse
 import warnings
 import pandas as pd
-from isafeclass import iSafeClass
-from safeclass import SafeClass
-from utils import *
-from bcftools import get_snp_matrix
+from .isafeclass import iSafeClass
+from .safeclass import SafeClass
+from .utils import *
+from .bcftools import get_snp_matrix
 import time
 import sys
 import os
@@ -200,7 +202,7 @@ def run():
     snp_matrix = snp_matrix.loc[((1 - f) * f) > 0]
     NumSNPs = snp_matrix.shape[0]
     if status:
-        print "%i SNPs and %i Haplotypes" % (snp_matrix.shape[0], snp_matrix.shape[1])
+        print("%i SNPs and %i Haplotypes" % (snp_matrix.shape[0], snp_matrix.shape[1]))
     if NumSNPs<=1:
         raise ImportError("There is only %i variant in the target region!"%NumSNPs)
     if NumSNPs<=100:
@@ -214,7 +216,7 @@ def run():
         df_final['POS'] = snp_matrix.index
         df_final[["POS", "SAFE", "DAF", "phi", "kappa"]].to_csv("%s.SAFE.out"%args.output, index=None,sep='\t')
         if status:
-            print "SAFE completed successfully."
+            print("SAFE completed successfully.")
     else:
         if (NumSNPs < args.MinRegionSize_ps) | (total_window_size < args.MinRegionSize_bp):
             raise ValueError((
@@ -234,4 +236,4 @@ def run():
             sys.stdout.write(time.ctime()+'\n')
             sys.stdout.write('-' * 60+'\n')
 if __name__ == '__main__':
-    run()
\ No newline at end of file
+    run()
diff --git a/src/isafeclass.py b/src/isafeclass.py
index cdca117..cb0af0a 100644
--- a/src/isafeclass.py
+++ b/src/isafeclass.py
@@ -1,7 +1,7 @@
 import numpy as np
 import pandas as pd
 import sys
-from safeclass import SafeClass
+from .safeclass import SafeClass
 
 def create_rolling_indices(total_variant_count, w_size, w_step):
     if total_variant_count<w_size:
@@ -14,7 +14,7 @@ def create_rolling_indices(total_variant_count, w_size, w_step):
         w_end = min(w_start + w_size, total_variant_count)
         if w_end >= total_variant_count:
             break
-        rolling_indices += [range(int(w_start), int(w_end))]
+        rolling_indices += [list(range(int(w_start), int(w_end)))]
         w_start += w_step
     return rolling_indices
 
@@ -50,7 +50,7 @@ def creat_snps_information_df(WS):
     :return:
     """
     temp_list = []
-    for key in WS.keys():
+    for key in list(WS.keys()):
         dfi = WS[key]["safe"].loc[:, ["ordinal_pos", "pos", "safe", "rank", "freq"]]
         dfi["window"] = key
         temp_list += [dfi]
@@ -85,7 +85,7 @@ def creat_matrix_Psi_k(M, Dw, Ifp, step_counter='XX', status=True):
                 sys.stdout.write("\r\tStep %s: %.2i%%" % (step_counter, progress))
                 sys.stdout.flush()
             progress0 = progress
-        for j in Dw.keys():
+        for j in list(Dw.keys()):
             output = isafe_kernel(Dw[j]["haf"], M[:, Ifp[i]])
             P[i, j] = output
     return step_function(P)
diff --git a/src/utils.py b/src/utils.py
index 5dc72f9..3d96bb9 100644
--- a/src/utils.py
+++ b/src/utils.py
@@ -10,7 +10,7 @@ def drop_duplicates(snp_matrix, DropDuplicates):
         df_drop = df.loc[df["CopyCount"]>1]
 
         if DropDuplicates:
-            print "Dropping %i duplicated ID's (%i distinct ID's)" % (df_drop['CopyCount'].sum(), df_drop.shape[0])
+            print("Dropping %i duplicated ID's (%i distinct ID's)" % (df_drop['CopyCount'].sum(), df_drop.shape[0]))
             snp_matrix.drop_duplicates(0, keep=False, inplace=True)
         else:
             warning_text = "%i duplicated ID's (%i distinct ID's) found. You can drop duplicates by setting the flag --DropDuplicates." % (
diff --git a/tests/__init__.py b/tests/__init__.py
new file mode 100755
index 0000000..40a96af
--- /dev/null
+++ b/tests/__init__.py
@@ -0,0 +1 @@
+# -*- coding: utf-8 -*-
diff --git a/tests/test_isafe.py b/tests/test_isafe.py
new file mode 100755
index 0000000..1a527ee
--- /dev/null
+++ b/tests/test_isafe.py
@@ -0,0 +1,28 @@
+#!/usr/bin/env python
+# -*- coding: utf-8 -*-
+
+"""
+test_isafe
+----------------------------------
+
+Tests for `isafe` module.
+"""
+
+import unittest
+
+from isafe import isafe
+
+
+class Testisafe(unittest.TestCase):
+
+    def setUp(self):
+        pass
+
+    def test_something(self):
+        pass
+
+    def tearDown(self):
+        pass
+
+if __name__ == '__main__':
+    unittest.main()
-- 
2.32.0

