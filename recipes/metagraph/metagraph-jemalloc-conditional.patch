diff --git a/metagraph/CMakeLists.txt b/metagraph/CMakeLists.txt
index e651d2176..2371386b7 100644
--- a/metagraph/CMakeLists.txt
+++ b/metagraph/CMakeLists.txt
@@ -331,16 +331,17 @@ find_package(Boost REQUIRED COMPONENTS iostreams)

 findFolly()
 if(FOLLY_FOUND)
-  add_definitions(-D_USE_FOLLY -DUSE_JEMALLOC)
+  add_definitions(-D_USE_FOLLY)
+  if(Jemalloc_FOUND)
+    add_definitions(-DUSE_JEMALLOC)
+  else()
+    message(WARNING "Jemalloc not found, some optimizations will be disabled.")
+  endif()
   include_directories(SYSTEM
     external-libraries/folly
     ${CMAKE_BINARY_DIR}/external-libraries/folly/include
   )
   set(METALIBS ${METALIBS} fbvector)
-else()
-  message(WARNING "Prerequisites for Folly (Facebook Open Source Library) not found."
-  " Install jemalloc to compile with folly and enable various"
-  " optimizations as well as reduce memory taken up by the Row-Compressed annotator.")
 endif()

 # makes ASIO not depend on boost
diff --git a/metagraph/CMakeListsHelpers.txt b/metagraph/CMakeListsHelpers.txt
index d7777c644..a344774e6 100644
--- a/metagraph/CMakeListsHelpers.txt
+++ b/metagraph/CMakeListsHelpers.txt
@@ -7,7 +7,7 @@ function (findOpenMP)
 # and happily cached, thus messing up the compilation flags forever
 unset(OpenMP_C_FLAGS CACHE)
 unset(OpenMP_CXX_FLAGS CACHE)
-if(APPLE AND NOT CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
+if(CMAKE_CXX_COMPILER_ID STREQUAL "AppleClang")
   execute_process(
       COMMAND brew --prefix libomp
       OUTPUT_VARIABLE BREW_OMP_PREFIX
@@ -81,36 +81,47 @@ endfunction()
 function (findFolly)
 unset(FOLLY_FOUND PARENT_SCOPE)
 set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_SOURCE_DIR})
-find_package(Jemalloc)
-
+find_package(Jemalloc REQUIRED)
 if(Jemalloc_FOUND)
+  set(Jemalloc_FOUND ${Jemalloc_FOUND} PARENT_SCOPE)
+  set(JEMALLOC_LIBRARIES ${JEMALLOC_LIBRARIES} PARENT_SCOPE)
+  set(JEMALLOC_INCLUDE_DIRS ${JEMALLOC_INCLUDE_DIRS} PARENT_SCOPE)
+  set(JEMALLOC_VERSION ${JEMALLOC_VERSION} PARENT_SCOPE)
+  message(STATUS "Jemalloc_FOUND: ${Jemalloc_FOUND}")
+  message(STATUS "JEMALLOC_VERSION: ${JEMALLOC_VERSION}")
+  message(STATUS "JEMALLOC_LIBRARIES: ${JEMALLOC_LIBRARIES}")
+  message(STATUS "JEMALLOC_INCLUDE_DIRS: ${JEMALLOC_INCLUDE_DIRS}")
+
   if(${JEMALLOC_VERSION} VERSION_LESS 4.0)
     message(WARNING "jemalloc version less than 4.0")
-    unset(Jemalloc_FOUND)
+    unset(Jemalloc_FOUND PARENT_SCOPE)
+  else()
+    message(STATUS "jemalloc version ${JEMALLOC_VERSION} is >= 4.0 - OK")
   endif()
+else()
+    message(STATUS "Jemalloc_FOUND: ${Jemalloc_FOUND}")
+    message(STATUS "Jemalloc not found")
 endif()

-if(Jemalloc_FOUND)
-  message(STATUS "Configuring Folly")
-  include(external-libraries/folly/CMake/FollyConfigChecks.cmake)
-  configure_file(
-    external-libraries/folly/CMake/folly-config.h.cmake
-    ${CMAKE_BINARY_DIR}/external-libraries/folly/include/folly/folly-config.h
-  )
-  add_library(fbvector STATIC
-    external-libraries/folly/folly/ScopeGuard.cpp
-    external-libraries/folly/folly/memory/detail/MallocImpl.cpp
-  )
-  target_include_directories(fbvector SYSTEM PRIVATE
-    ${JEMALLOC_INCLUDE_DIRS}
-    ${Boost_INCLUDE_DIRS}
-    external-libraries/folly
-    ${CMAKE_BINARY_DIR}/external-libraries/folly/include
-    ${PROJECT_SOURCE_DIR}/src/common
-  )
-  target_link_libraries(fbvector PRIVATE ${JEMALLOC_LIBRARIES} ${Boost_LIBRARIES})
-  set(FOLLY_FOUND TRUE PARENT_SCOPE)
-endif()
+message(STATUS "Configuring Folly")
+include(external-libraries/folly/CMake/FollyConfigChecks.cmake)
+configure_file(
+  external-libraries/folly/CMake/folly-config.h.cmake
+  ${CMAKE_BINARY_DIR}/external-libraries/folly/include/folly/folly-config.h
+)
+add_library(fbvector STATIC
+  external-libraries/folly/folly/ScopeGuard.cpp
+  external-libraries/folly/folly/memory/detail/MallocImpl.cpp
+)
+target_include_directories(fbvector SYSTEM PRIVATE
+  ${JEMALLOC_INCLUDE_DIRS}
+  ${Boost_INCLUDE_DIRS}
+  external-libraries/folly
+  ${CMAKE_BINARY_DIR}/external-libraries/folly/include
+  ${PROJECT_SOURCE_DIR}/src/common
+)
+target_link_libraries(fbvector PRIVATE ${JEMALLOC_LIBRARIES} ${Boost_LIBRARIES})
+set(FOLLY_FOUND TRUE PARENT_SCOPE)
 endfunction()


diff --git a/metagraph/FindJemalloc.cmake b/metagraph/FindJemalloc.cmake
index 2b8145654..b3e261935 100644
--- a/metagraph/FindJemalloc.cmake
+++ b/metagraph/FindJemalloc.cmake
@@ -11,6 +11,9 @@
 find_package(PkgConfig)
 pkg_check_modules(PC_JEMALLOC QUIET libjemalloc)

+# Try to use jemalloc-config if available
+find_program(JEMALLOC_CONFIG jemalloc-config)
+
 unset(JEMALLOC_INCLUDE_DIR CACHE)
 find_path(JEMALLOC_INCLUDE_DIR jemalloc/jemalloc.h
   HINTS
@@ -20,6 +23,8 @@ find_path(JEMALLOC_INCLUDE_DIR jemalloc/jemalloc.h
     ${PC_JEMALLOC_INCLUDEDIR}
     ${PC_JEMALLOC_INCLUDE_DIRS}
     ~/.linuxbrew/
+    /opt/homebrew
+    /usr/local
   PATH_SUFFIXES include)

 unset(JEMALLOC_LIBRARY CACHE)
@@ -31,8 +36,30 @@ find_library(JEMALLOC_LIBRARY NAMES jemalloc libjemalloc
     ${PC_JEMALLOC_LIBDIR}
     ${PC_JEMALLOC_LIBRARY_DIRS}
     ~/.linuxbrew/
+    /opt/homebrew
+    /usr/local
   PATH_SUFFIXES lib lib64)

+# If jemalloc-config is available, use it as additional hint
+if(JEMALLOC_CONFIG)
+  execute_process(COMMAND ${JEMALLOC_CONFIG} --prefix
+    OUTPUT_VARIABLE JEMALLOC_PREFIX
+    OUTPUT_STRIP_TRAILING_WHITESPACE)
+
+  # Add jemalloc-config prefix to search paths if not already found
+  if(NOT JEMALLOC_INCLUDE_DIR)
+    find_path(JEMALLOC_INCLUDE_DIR jemalloc/jemalloc.h
+      HINTS ${JEMALLOC_PREFIX}
+      PATH_SUFFIXES include)
+  endif()
+
+  if(NOT JEMALLOC_LIBRARY)
+    find_library(JEMALLOC_LIBRARY NAMES jemalloc libjemalloc
+      HINTS ${JEMALLOC_PREFIX}
+      PATH_SUFFIXES lib lib64)
+  endif()
+endif()
+
 if(JEMALLOC_INCLUDE_DIR)
   set(_version_regex "^#define[ \t]+JEMALLOC_VERSION[ \t]+\"([^\"]+)\".*")
   file(STRINGS "${JEMALLOC_INCLUDE_DIR}/jemalloc/jemalloc.h"
