{% set name = "pyscenic" %}
{% set version = "0.8.6" %}
{% set file_ext = "tar.gz" %}
{% set hash_type = "sha256" %}
{% set hash_value = "a3c6d18d6912a9133c0ee279d287346371d26efc85e542363937584858b1e8ea" %}

package:
  name: '{{ name|lower }}'
  version: '{{ version }}'

source:
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.{{ file_ext }}
  '{{ hash_type }}': '{{ hash_value }}'

build:
  no-arch: python
  skip: True # [py27 and py34] 
  number: 0
  entry_points:
    - pyscenic = pyscenic.cli.pyscenic:main
    - db2feather = pyscenic.cli.db2feather:main
    - invertdb = pyscenic.cli.invertdb:main
    - gmt2regions = pyscenic.cli.gmt2regions:main
  script: python setup.py install --single-version-externally-managed --record=record.txt

requirements:
  build:
    - python
    - cytoolz
    - multiprocessing_on_dill
    - llvmlite ==0.22.0
    - numba ==0.37.0
    - attrs
    - frozendict
    - numpy
    - pandas >=0.20.1
    - cloudpickle
    - dask >=0.17.2
    - distributed >=1.21.6
    - pyarrow ==0.8.0
    - feather-format
    - arboreto
    - boltons
    - setuptools
    - pyyaml
    - tqdm
    - interlap
    - umap-learn
    - loompy ==2.0.2
    - networkx
    - matplotlib

  run:
    - python
    - cytoolz
    - multiprocessing_on_dill
    - llvmlite ==0.22.0
    - numba ==0.37.0
    - attrs
    - frozendict
    - numpy
    - pandas >=0.20.1
    - cloudpickle
    - dask >=0.17.2
    - distributed >=1.21.6
    - pyarrow ==0.8.0
    - feather-format
    - arboreto
    - boltons
    - setuptools
    - pyyaml
    - tqdm
    - interlap
    - umap-learn
    - loompy ==2.0.2
    - networkx
    - matplotlib

test:
  imports:
    - pyscenic
    - pyscenic.cli
    - resources
    - resources.delineations
    - resources.tests
  commands:
    - pyscenic --help
    - db2feather --help
    - invertdb --help
    - gmt2regions --help

about:
  home: https://github.com/aertslab/pySCENIC
  license: GNU General Public License v3 or later (GPLv3+)
  license_family: GPL3
  license_file: ''
  summary: Python implementation of the SCENIC pipeline for transcription factor inference from single-cell transcriptomics experiments.
  description: "pySCENIC is a lightning-fast python implementation of the SCENIC_ pipeline (Single-Cell rEgulatory Network Inference and\n\
    Clustering) which enables biologists to infer transcription factors, gene regulatory networks and cell types from\nsingle-cell RNA-seq data.\n\nThe pioneering work was done in R and results were published\
    \ in Nature Methods [1]_.\n\npySCENIC can be run on a single desktop machine but easily scales to multi-core clusters to analyze thousands of cells\nin no time. The latter is achieved via the dask_\
    \ framework for distributed computing [2]_.\n\nThe pipeline has three steps:\n\n1. First transcription factors (TFs) and their target genes, together defining a regulon, are derived using gene inference\
    \ methods which solely rely on correlations between expression of genes across cells. The arboreto_ package is used for this step.\n2. These regulons are refined by pruning targets that do not have\
    \ an enrichment for a corresponding motif of the TF effectively separating direct from indirect targets based on the presence of cis-regulatory footprints.\n3. Finally, the original cells are differentiated\
    \ and clustered on the activity of these discovered regulons.\n\n\n.. note::\n    The most impactfull speed improvement is introduced by the arboreto_ package in step 1. This package provides an alternative\
    \ to GENIE3 [3]_ called GRNBoost2. This package can be controlled from within pySCENIC.\n\n\n"
  doc_url: 'https://github.com/aertslab/pySCENIC/blob/master/docs/index.rst'
  dev_url: 'https://github.com/aertslab/pySCENIC/'

extra:
  recipe-maintainers: 
  - vibbits
