--- ./scripts/maf-convert	2014-10-07 21:04:22.000000000 -0400
+++ ./bin/maf-convert	2016-02-27 16:23:56.000000000 -0500
@@ -1,4 +1,5 @@
 #! /usr/bin/env python
+from __future__ import print_function
 # Copyright 2010, 2011, 2013, 2014 Martin C. Frith
 # Read MAF-format alignments: write them in other formats.
 # Seems to work with Python 2.x, x>=4
@@ -10,12 +11,12 @@
 import sys, os, fileinput, math, operator, optparse, signal, string
 
 def maxlen(s):
-    return max(map(len, s))
+    return max(list(map(len, s)))
 
 def joined(things, delimiter):
     return delimiter.join(map(str, things))
 
-identityTranslation = string.maketrans("", "")
+identityTranslation = None
 def deleted(myString, deleteChars):
     return myString.translate(identityTranslation, deleteChars)
 
@@ -28,12 +29,12 @@
         self.namesAndValues = dict(i.split("=") for i in aLine[1:])
 
         if not sLines: raise Exception("empty alignment")
-        cols = zip(*sLines)
+        cols = list(zip(*sLines))
         self.seqNames = cols[1]
-        self.alnStarts = map(int, cols[2])
-        self.alnSizes = map(int, cols[3])
+        self.alnStarts = list(map(int, cols[2]))
+        self.alnSizes = list(map(int, cols[3]))
         self.strands = cols[4]
-        self.seqSizes = map(int, cols[5])
+        self.seqSizes = list(map(int, cols[5]))
         self.alnStrings = cols[6]
 
         self.qLines = qLines
@@ -56,7 +57,7 @@
     else: return 1
 
 def mafLetterSizes(maf):
-    return map(coordinatesPerLetter, maf.alnStrings, maf.alnSizes)
+    return list(map(coordinatesPerLetter, maf.alnStrings, maf.alnSizes))
 
 def alnLetterSizes(sLines):
     return [coordinatesPerLetter(i[6], int(i[3])) for i in sLines]
@@ -96,9 +97,9 @@
             sizeOfGaplessBlock = len(list(v))
             yield str(sizeOfGaplessBlock)
         else:
-            blockRows = izip(*v)
-            blockRows = imap(''.join, blockRows)
-            insertSizes = imap(insertionSize, blockRows, letterSizes)
+            blockRows = zip(*v)
+            blockRows = map(''.join, blockRows)
+            insertSizes = map(insertionSize, blockRows, letterSizes)
             yield joined(insertSizes, ":")
 
 ##### Routines for converting to AXT format: #####
@@ -110,21 +111,21 @@
         raise Exception("for AXT, the 1st strand in each alignment must be +")
 
     # Convert to AXT's 1-based coordinates:
-    alnStarts = imap(operator.add, maf.alnStarts, repeat(1))
-    alnEnds = imap(operator.add, maf.alnStarts, maf.alnSizes)
+    alnStarts = map(operator.add, maf.alnStarts, repeat(1))
+    alnEnds = map(operator.add, maf.alnStarts, maf.alnSizes)
 
-    rows = zip(maf.seqNames, alnStarts, alnEnds, maf.strands)
+    rows = list(zip(maf.seqNames, alnStarts, alnEnds, maf.strands))
     head, tail = rows[0], rows[1:]
 
     outWords = []
-    outWords.append(axtCounter.next())
+    outWords.append(next(axtCounter))
     outWords.extend(head[:3])
     outWords.extend(chain(*tail))
     outWords.append(maf.namesAndValues["score"])
 
-    print joined(outWords, " ")
-    for i in maf.alnStrings: print i
-    print  # print a blank line at the end
+    print(joined(outWords, " "))
+    for i in maf.alnStrings: print(i)
+    print()  # print a blank line at the end
 
 ##### Routines for converting to tabular format: #####
 
@@ -145,7 +146,7 @@
     for i in sLines: outWords.extend(i[1:6])
 
     alnStrings = [i[6] for i in sLines]
-    alignmentColumns = zip(*alnStrings)
+    alignmentColumns = list(zip(*alnStrings))
     letterSizes = alnLetterSizes(sLines)
     gapStrings = matchAndInsertSizes(alignmentColumns, letterSizes)
     gapWord = ",".join(gapStrings)
@@ -154,7 +155,7 @@
     if expect: outWords.append(expect)
     if mismap: outWords.append(mismap)
 
-    print "\t".join(outWords)
+    print("\t".join(outWords))
 
 ##### Routines for converting to PSL format: #####
 
@@ -188,7 +189,7 @@
 
 def gapRunCount(letters):
     """Get the number of runs of gap characters."""
-    uniqLetters = map(operator.itemgetter(0), groupby(letters))
+    uniqLetters = list(map(operator.itemgetter(0), groupby(letters)))
     return uniqLetters.count("-")
 
 def pslEndpoints(alnStart, alnSize, strand, seqSize):
@@ -213,8 +214,8 @@
 def writePsl(maf, isProtein):
     dieUnlessPairwise(maf)
 
-    alnStrings = map(str.upper, maf.alnStrings)
-    alignmentColumns = zip(*alnStrings)
+    alnStrings = list(map(str.upper, maf.alnStrings))
+    alignmentColumns = list(zip(*alnStrings))
     letterSizes = mafLetterSizes(maf)
 
     matchCounts = caseSensitivePairwiseMatchCounts(alignmentColumns, isProtein)
@@ -236,19 +237,19 @@
     tName, qName = maf.seqNames
     tSeqSize, qSeqSize = maf.seqSizes
 
-    rows = zip(maf.alnStarts, maf.alnSizes, maf.strands, maf.seqSizes)
+    rows = list(zip(maf.alnStarts, maf.alnSizes, maf.strands, maf.seqSizes))
     tStart, tEnd = pslEndpoints(*rows[0])
     qStart, qEnd = pslEndpoints(*rows[1])
 
     blocks = list(pslBlocks(alignmentColumns, maf.alnStarts, letterSizes))
     blockCount = len(blocks)
-    blockSizes, tStarts, qStarts = map(pslCommaString, zip(*blocks))
+    blockSizes, tStarts, qStarts = list(map(pslCommaString, list(zip(*blocks))))
 
     outWords = (matches, mismatches, repMatches, nCount,
                 qNumInsert, qBaseInsert, tNumInsert, tBaseInsert, strand,
                 qName, qSeqSize, qStart, qEnd, tName, tSeqSize, tStart, tEnd,
                 blockCount, blockSizes, qStarts, tStarts)
-    print joined(outWords, "\t")
+    print(joined(outWords, "\t"))
 
 ##### Routines for converting to SAM format: #####
 
@@ -283,15 +284,15 @@
     return naturalSortKey(s)
 
 def writeSamHeader(sequenceLengths, dictFile, readGroupItems):
-    print "@HD\tVN:1.3\tSO:unsorted"
+    print("@HD\tVN:1.3\tSO:unsorted")
     for k in sorted(sequenceLengths, key=karyotypicSortKey):
-        print "@SQ\tSN:%s\tLN:%s" % (k, sequenceLengths[k])
+        print("@SQ\tSN:%s\tLN:%s" % (k, sequenceLengths[k]))
     if dictFile:
         for i in fileinput.input(dictFile):
-            if i.startswith("@SQ"): print i,
+            if i.startswith("@SQ"): print(i, end=' ')
             elif not i.startswith("@"): break
     if readGroupItems:
-        print "@RG\t" + "\t".join(readGroupItems)
+        print("@RG\t" + "\t".join(readGroupItems))
 
 mapqMissing = "255"
 mapqMaximum = "254"
@@ -362,7 +363,7 @@
     pos = str(int(rStart) + 1)  # convert to 1-based coordinate
 
     for s, qName, qStart, qAlnSize, qStrand, qSeqSize, qAlnString in tail:
-        alignmentColumns = zip(rAlnString.upper(), qAlnString.upper())
+        alignmentColumns = list(zip(rAlnString.upper(), qAlnString.upper()))
 
         qStart = int(qStart)
         qRevStart = int(qSeqSize) - qStart - int(qAlnSize)
@@ -376,7 +377,7 @@
             # don't try to handle multiple alignments for now (YAGNI):
             if len(qLines) > 1 or len(tail) > 1 or qualityName != qName:
                 raise Exception("can't interpret the quality data")
-            qual = ''.join(j for i, j in izip(qAlnString, qualityString)
+            qual = ''.join(j for i, j in zip(qAlnString, qualityString)
                            if i != "-")
 
         # It's hard to get all the pair info, so this is very
@@ -403,7 +404,7 @@
         if score: outWords.append(score)
         if evalue: outWords.append(evalue)
         if rg: outWords.append(rg)
-        print "\t".join(outWords)
+        print("\t".join(outWords))
 
 ##### Routines for converting to BLAST-like format: #####
 
@@ -428,33 +429,33 @@
     letterSizes = mafLetterSizes(maf)
     coords = maf.alnStarts
     for chunkCols in chunker(alignmentColumns, lineSize):
-        chunkRows = zip(*chunkCols)
-        chunkRows = map(''.join, chunkRows)
+        chunkRows = list(zip(*chunkCols))
+        chunkRows = list(map(''.join, chunkRows))
         starts = [i + 1 for i in coords]  # change to 1-based coordinates
-        starts = map(blastCoordinate, starts, maf.strands, maf.seqSizes)
-        increments = map(insertionSize, chunkRows, letterSizes)
-        coords = map(operator.add, coords, increments)
-        ends = map(blastCoordinate, coords, maf.strands, maf.seqSizes)
+        starts = list(map(blastCoordinate, starts, maf.strands, maf.seqSizes))
+        increments = list(map(insertionSize, chunkRows, letterSizes))
+        coords = list(map(operator.add, coords, increments))
+        ends = list(map(blastCoordinate, coords, maf.strands, maf.seqSizes))
         yield chunkCols, chunkRows, starts, ends
 
 def writeBlast(maf, lineSize, oldQueryName):
     dieUnlessPairwise(maf)
 
     if maf.seqNames[1] != oldQueryName:
-        print "Query= %s" % maf.seqNames[1]
-        print "         (%s letters)" % maf.seqSizes[1]
-        print
-
-    print ">%s" % maf.seqNames[0]
-    print "          Length = %s" % maf.seqSizes[0]
-    print
+        print("Query= %s" % maf.seqNames[1])
+        print("         (%s letters)" % maf.seqSizes[1])
+        print()
+
+    print(">%s" % maf.seqNames[0])
+    print("          Length = %s" % maf.seqSizes[0])
+    print()
 
     scoreLine = " Score = %s" % maf.namesAndValues["score"]
     try: scoreLine += ", Expect = %s" % maf.namesAndValues["expect"]
     except KeyError: pass
-    print scoreLine
+    print(scoreLine)
 
-    alignmentColumns = zip(*maf.alnStrings)
+    alignmentColumns = list(zip(*maf.alnStrings))
 
     alnSize = len(alignmentColumns)
     matches = quantify(alignmentColumns, isMatch)
@@ -463,26 +464,26 @@
     gaps = alnSize - quantify(alignmentColumns, isGapless)
     gapPercent = 100 * gaps // alnSize  # round down, like BLAST
     if gaps: identLine += ", Gaps = %s/%s (%s%%)" % (gaps, alnSize, gapPercent)
-    print identLine
+    print(identLine)
 
-    strands = map(strandText, maf.strands)
-    print " Strand = %s / %s" % (strands[1], strands[0])
-    print
+    strands = list(map(strandText, maf.strands))
+    print(" Strand = %s / %s" % (strands[1], strands[0]))
+    print()
 
     for chunk in blastChunker(maf, lineSize, alignmentColumns):
         cols, rows, starts, ends = chunk
         startWidth = maxlen(starts)
-        matchSymbols = map(pairwiseMatchSymbol, cols)
+        matchSymbols = list(map(pairwiseMatchSymbol, cols))
         matchSymbols = ''.join(matchSymbols)
-        print "Query: %-*s %s %s" % (startWidth, starts[1], rows[1], ends[1])
-        print "       %-*s %s"    % (startWidth, " ", matchSymbols)
-        print "Sbjct: %-*s %s %s" % (startWidth, starts[0], rows[0], ends[0])
-        print
+        print("Query: %-*s %s %s" % (startWidth, starts[1], rows[1], ends[1]))
+        print("       %-*s %s"    % (startWidth, " ", matchSymbols))
+        print("Sbjct: %-*s %s %s" % (startWidth, starts[0], rows[0], ends[0]))
+        print()
 
 ##### Routines for converting to HTML format: #####
 
 def writeHtmlHeader():
-    print '''
+    print('''
 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
  "http://www.w3.org/TR/html4/strict.dtd">
 <html lang="en"><head>
@@ -509,7 +510,7 @@
 <pre class="key"><span class="e">  </span> prob &gt; 0.5  </pre>
 <pre class="key"><span class="f">  </span> prob &le; 0.5  </pre>
 </div>
-'''
+''')
 
 def probabilityClass(probabilityColumn):
     p = ord(min(probabilityColumn)) - 33
@@ -544,24 +545,24 @@
         scoreLine += " score=%s" % maf.namesAndValues["score"]
         scoreLine += ", expect=%s" % maf.namesAndValues["expect"]
     except KeyError: pass
-    print "<h3>%s:</h3>" % scoreLine
+    print("<h3>%s:</h3>" % scoreLine)
 
     if maf.pLines:
         probRows = [i[1] for i in maf.pLines]
-        probCols = izip(*probRows)
-        classes = imap(probabilityClass, probCols)
+        probCols = zip(*probRows)
+        classes = map(probabilityClass, probCols)
     else:
         classes = repeat(None)
 
     nameWidth = maxlen(maf.seqNames)
-    alignmentColumns = zip(*maf.alnStrings)
+    alignmentColumns = list(zip(*maf.alnStrings))
 
-    print '<pre>'
+    print('<pre>')
     for chunk in blastChunker(maf, lineSize, alignmentColumns):
         cols, rows, starts, ends = chunk
         startWidth = maxlen(starts)
         endWidth = maxlen(ends)
-        matchSymbols = map(multipleMatchSymbol, cols)
+        matchSymbols = list(map(multipleMatchSymbol, cols))
         matchSymbols = ''.join(matchSymbols)
         classChunk = islice(classes, lineSize)
         classRuns = list(identicalRuns(classChunk))
@@ -569,10 +570,10 @@
             spans = [htmlSpan(r, i) for i in classRuns]
             spans = ''.join(spans)
             formatParams = nameWidth, n, startWidth, s, spans, endWidth, e
-            print '%-*s %*s %s %*s' % formatParams
-        print ' ' * nameWidth, ' ' * startWidth, matchSymbols
-        print
-    print '</pre>'
+            print('%-*s %*s %s %*s' % formatParams)
+        print(' ' * nameWidth, ' ' * startWidth, matchSymbols)
+        print()
+    print('</pre>')
 
 ##### Routines for reading MAF format: #####
 
@@ -598,7 +599,7 @@
         elif w[0] == "p":
             p.append(w)
         elif i[0] == "#" and isKeepComments:
-            print i,
+            print(i, end=' ')
     if a: yield a, s, q, p
 
 def isFormat(myString, myFormat):
@@ -631,7 +632,7 @@
         elif isFormat(format, "sam"): writeSam(maf, rg)
         elif isFormat(format, "tabular"): writeTab(maf)
         else: raise Exception("unknown format: " + format)
-    if isFormat(format, "html") and not opts.noheader: print "</body></html>"
+    if isFormat(format, "html") and not opts.noheader: print("</body></html>")
 
 if __name__ == "__main__":
     signal.signal(signal.SIGPIPE, signal.SIG_DFL)  # avoid silly error message
@@ -669,6 +670,6 @@
 
     try: mafConvert(opts, args)
     except KeyboardInterrupt: pass  # avoid silly error message
-    except Exception, e:
+    except Exception as e:
         prog = os.path.basename(sys.argv[0])
         sys.exit(prog + ": error: " + str(e))
