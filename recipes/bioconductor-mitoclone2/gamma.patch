diff --git a/inst/SCITEpkg/findBestTrees.cpp b/inst/SCITEpkg/findBestTrees.cpp
index 19c699c..18e1e9d 100644
--- a/inst/SCITEpkg/findBestTrees.cpp
+++ b/inst/SCITEpkg/findBestTrees.cpp
@@ -53,7 +53,7 @@ int m;                // number of samples
 char scoreType = 'm';
 int rep;            // number of repetitions of the MCMC
 int loops;          // number of loops within a MCMC
-double gamma = 1;
+double gammaB = 1;
 double fd;          // rate of false discoveries (false positives 0->1)
 double ad1;          // rate of allelic dropout (false negatives 1->0)
 double ad2 = 0.0;         // rate of allelic dropout (2->1)
@@ -97,7 +97,7 @@ int main(int argc, char* argv[])
 	if(trueTreeComp==true){ trueParentVec = getParentVectorFromGVfile(trueTreeFileName, n); }
 
 	/**  Find best scoring trees by MCMC  **/
-	sampleOutput = runMCMCbeta(optimalTrees, errorRates, rep, loops, gamma, moveProbs, n, m, dataMatrix, scoreType, trueParentVec, sampleStep, sample, chi, priorSd, useTreeList, treeType);
+	sampleOutput = runMCMCbeta(optimalTrees, errorRates, rep, loops, gammaB, moveProbs, n, m, dataMatrix, scoreType, trueParentVec, sampleStep, sample, chi, priorSd, useTreeList, treeType);
 
 
 	/***  output results  ***/
@@ -262,7 +262,7 @@ int readParameters(int argc, char* argv[]){
 		} else if(strcmp(argv[i], "-l")==0) {
 			if (i + 1 < argc) { loops = atoi(argv[++i]);}
 		} else if(strcmp(argv[i], "-g")==0) {
-			if (i + 1 < argc) { gamma = atof(argv[++i]);}
+			if (i + 1 < argc) { gammaB = atof(argv[++i]);}
 		} else if(strcmp(argv[i], "-fd")==0) {
 			if (i + 1 < argc) { fd = atof(argv[++i]);}
 		} else if(strcmp(argv[i],"-ad")==0) {
diff --git a/inst/SCITEpkg/mcmc.cpp b/inst/SCITEpkg/mcmc.cpp
index faf59a1..dea1d13 100644
--- a/inst/SCITEpkg/mcmc.cpp
+++ b/inst/SCITEpkg/mcmc.cpp
@@ -41,7 +41,7 @@ double burnInPhase = 0.25;    // first quarter of steps are burn in phase
 
 
 /* This runs the MCMC for learning the tree and beta, or only the tree with a fixed beta, it samples from the posterior and/or records the optimal trees/beta */
-std::string runMCMCbeta(vector<struct treeBeta>& bestTrees, double* errorRates, int noOfReps, int noOfLoops, double gamma, vector<double> moveProbs, int n, int m, int** dataMatrix, char scoreType, int* trueParentVec, int step, bool sample, double chi, double priorSd, bool useTreeList, char treeType){
+std::string runMCMCbeta(vector<struct treeBeta>& bestTrees, double* errorRates, int noOfReps, int noOfLoops, double gammaB, vector<double> moveProbs, int n, int m, int** dataMatrix, char scoreType, int* trueParentVec, int step, bool sample, double chi, double priorSd, bool useTreeList, char treeType){
 
 
 	unsigned int optStatesAfterBurnIn = 0;
@@ -96,7 +96,7 @@ std::string runMCMCbeta(vector<struct treeBeta>& bestTrees, double* errorRates,
         		if(treeType=='m'){ propTreeLogScore = scoreTree( n, m, propLogScores, dataMatrix, scoreType, currTreeParentVec, bestTreeLogScore);}   // compute the new tree score for new beta
         		else{              propTreeLogScore = getBinTreeScore(dataMatrix, n, m, propLogScores, currTreeParentVec);}
 
-        		if (sample_0_1() < exp((propTreeLogScore+propBetaLogScore-currTreeLogScore-currBetaLogScore)*gamma)){               // the proposed move is accepted
+        		if (sample_0_1() < exp((propTreeLogScore+propBetaLogScore-currTreeLogScore-currBetaLogScore)*gammaB)){               // the proposed move is accepted
         			moveAccepted = true;
         			free_doubleMatrix(currLogScores);
         		    currTreeLogScore  = propTreeLogScore;                                       // update score of current tree
@@ -119,7 +119,7 @@ std::string runMCMCbeta(vector<struct treeBeta>& bestTrees, double* errorRates,
         		else{              propTreeParVec = proposeNextBinTree(moveProbs, m, currTreeParentVec, currTreeAncMatrix);
         		                   propTreeLogScore = getBinTreeScore(dataMatrix, n, m, currLogScores, propTreeParVec);}
 
-        		if (sample_0_1() < nbhcorrection*exp((propTreeLogScore-currTreeLogScore)*gamma)){                    // the proposed tree is accepted
+        		if (sample_0_1() < nbhcorrection*exp((propTreeLogScore-currTreeLogScore)*gammaB)){                    // the proposed tree is accepted
         			moveAccepted = true;
         			free_boolMatrix(currTreeAncMatrix);                                            // discard outdated tree
         			delete[] currTreeParentVec;
diff --git a/inst/SCITEpkg/mcmc.h b/inst/SCITEpkg/mcmc.h
index fb86902..2d6c949 100644
--- a/inst/SCITEpkg/mcmc.h
+++ b/inst/SCITEpkg/mcmc.h
@@ -8,7 +8,7 @@
 #ifndef MCMC_H
 #define MCMC_H
 
-string runMCMCbeta(vector<struct treeBeta>& bestTrees, double* errorRates, int noOfReps, int noOfLoops, double gamma, vector<double> moveProbs, int n, int m, int** dataMatrix, char scoreType, int* trueParentVec, int step, bool sample, double chi, double priorSd, bool useTreeList, char treeType);
+string runMCMCbeta(vector<struct treeBeta>& bestTrees, double* errorRates, int noOfReps, int noOfLoops, double gammaB, vector<double> moveProbs, int n, int m, int** dataMatrix, char scoreType, int* trueParentVec, int step, bool sample, double chi, double priorSd, bool useTreeList, char treeType);
 double logBetaPDF(double x, double bpriora, double bpriorb);
 double proposeNewBeta(double currBeta, double jumpSd);
 double sampleNormal(double mean, double sd);
