diff --git a/examples/random16.lower_distance_matrix b/examples/random16.lower_distance_matrix
index 356f35a..b936341 100644
--- a/examples/random16.lower_distance_matrix
+++ b/examples/random16.lower_distance_matrix
@@ -12,4 +12,4 @@
  12, 90, 24, 68, 86, 64,  8, 59, 49, 69,114,  3,
  95, 35, 61, 15, 71, 31, 74, 41,  5,  4, 16, 84, 50,
  27,102, 87, 39,118,109, 21, 11,  9, 83, 88, 80, 60, 66,
- 18, 54, 67, 79, 26, 96,  6, 20, 63,  1, 33,110,113,106,119
\ No newline at end of file
+ 18, 54, 67, 79, 26, 96,  6, 20, 63,  1, 33,110,113,106,119
diff --git a/ripser.cpp b/ripser.cpp
index cfa01a8..92b0e49 100644
--- a/ripser.cpp
+++ b/ripser.cpp
@@ -82,7 +82,7 @@ static const std::string clear_line("\r\033[K");
 static const size_t num_coefficient_bits = 8;
 
 static const index_t max_simplex_index =
-    (1l << (8 * sizeof(index_t) - 1 - num_coefficient_bits)) - 1;
+    (index_t(1) << (8 * sizeof(index_t) - 1 - num_coefficient_bits)) - 1;
 
 void check_overflow(index_t i) {
 	if
@@ -98,22 +98,22 @@ void check_overflow(index_t i) {
 
 class binomial_coeff_table {
 	std::vector<std::vector<index_t>> B;
+	
 
 public:
-	binomial_coeff_table(index_t n, index_t k) : B(n + 1) {
+	binomial_coeff_table(index_t n, index_t k) : B(k + 1, std::vector<index_t>(n + 1, 0)) {
 		for (index_t i = 0; i <= n; ++i) {
-			B[i].resize(k + 1, 0);
-			B[i][0] = 1;
+			B[0][i] = 1;
 			for (index_t j = 1; j < std::min(i, k + 1); ++j)
-				B[i][j] = B[i - 1][j - 1] + B[i - 1][j];
+				B[j][i] = B[j - 1][i - 1] + B[j][i - 1];
 			if (i <= k) B[i][i] = 1;
-			check_overflow(B[i][std::min(i >> 1, k)]);
+			check_overflow(B[std::min(i >> 1, k)][i]);
 		}
 	}
 
 	index_t operator()(index_t n, index_t k) const {
-		assert(n < B.size() && k < B[n].size() && n >= k - 1);
-		return B[n][k];
+		assert(k < B.size() && n < B[k].size() && n >= k - 1);
+		return B[k][n];
 	}
 };
 
@@ -136,7 +136,7 @@ std::vector<coefficient_t> multiplicative_inverse_vector(const coefficient_t m)
 
 #ifdef USE_COEFFICIENTS
 
-struct __attribute__((packed)) entry_t {
+struct entry_t {
 	index_t index : 8 * sizeof(index_t) - num_coefficient_bits;
 	coefficient_t coefficient : num_coefficient_bits;
 	entry_t(index_t _index, coefficient_t _coefficient)
@@ -437,11 +437,12 @@ public:
 	OutputIterator get_simplex_vertices(index_t idx, const index_t dim, index_t n,
 	                                    OutputIterator out) const {
 		--n;
-		for (index_t k = dim + 1; k > 0; --k) {
+		for (index_t k = dim + 1; k > 1; --k) {
 			n = get_max_vertex(idx, k, n);
 			*out++ = n;
 			idx -= binomial_coeff(n, k);
 		}
+		*out = idx;
 		return out;
 	}
 
@@ -578,7 +579,7 @@ public:
 #endif
 				auto cofacet = cofacets.next();
 				if (get_diameter(cofacet) <= threshold) {
-					next_simplices.push_back({get_diameter(cofacet), get_index(cofacet)});
+					if (dim < dim_max) next_simplices.push_back({get_diameter(cofacet), get_index(cofacet)});
 					if (!is_in_zero_apparent_pair(cofacet, dim) &&
 					    (pivot_column_index.find(get_entry(cofacet)) == pivot_column_index.end()))
 						columns_to_reduce.push_back({get_diameter(cofacet), get_index(cofacet)});
@@ -586,7 +587,7 @@ public:
 			}
 		}
 
-		simplices.swap(next_simplices);
+		if (dim < dim_max) simplices.swap(next_simplices);
 
 #ifdef INDICATE_PROGRESS
 		std::cerr << clear_line << "sorting " << columns_to_reduce.size() << " columns"
@@ -622,10 +623,10 @@ public:
 					std::cout << " [0," << get_diameter(e) << ")" << std::endl;
 #endif
 				dset.link(u, v);
-			} else if (get_index(get_zero_apparent_cofacet(e, 1)) == -1)
+			} else if ((dim_max > 0) && (get_index(get_zero_apparent_cofacet(e, 1)) == -1))
 				columns_to_reduce.push_back(e);
 		}
-		std::reverse(columns_to_reduce.begin(), columns_to_reduce.end());
+		if (dim_max > 0) std::reverse(columns_to_reduce.begin(), columns_to_reduce.end());
 
 #ifdef PRINT_PERSISTENCE_PAIRS
 		for (index_t i = 0; i < n; ++i)
@@ -1030,8 +1031,11 @@ sparse_distance_matrix read_sparse_distance_matrix(std::istream& input_stream) {
 		size_t i, j;
 		value_t value;
 		s >> i;
+		s.ignore();
 		s >> j;
+		s.ignore();
 		s >> value;
+		s.ignore();
 		if (i != j) {
 			neighbors.resize(std::max({neighbors.size(), i + 1, j + 1}));
 			neighbors[i].push_back({j, value});
@@ -1143,10 +1147,10 @@ void print_usage_and_exit(int exit_code) {
 	    << "  --help           print this screen" << std::endl
 	    << "  --format         use the specified file format for the input. Options are:"
 	    << std::endl
-	    << "                     lower-distance (lower triangular distance matrix; default)"
+	    << "                     lower-distance (lower triangular distance matrix)"
 	    << std::endl
 	    << "                     upper-distance (upper triangular distance matrix)" << std::endl
-	    << "                     distance       (full distance matrix)" << std::endl
+	    << "         (default:)  distance       (distance matrix; only lower triangular part is read)" << std::endl
 	    << "                     point-cloud    (point cloud in Euclidean space)" << std::endl
 	    << "                     dipha          (distance matrix in DIPHA file format)" << std::endl
 	    << "                     sparse         (sparse distance matrix in sparse triplet format)"
@@ -1277,7 +1281,7 @@ int main(int argc, char** argv) {
 			    .compute_barcodes();
 		} else {
 			std::cout << "sparse distance matrix with " << dist.size() << " points and "
-			          << num_edges << "/" << (dist.size() * dist.size() - 1) / 2 << " entries"
+			          << num_edges << "/" << (dist.size() * (dist.size() - 1)) / 2 << " entries"
 			          << std::endl;
 
 			ripser<sparse_distance_matrix>(sparse_distance_matrix(std::move(dist), threshold),
