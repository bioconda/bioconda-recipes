diff --git a/src/Stage_3_PeakFinderSubFunctions.cpp b/src/Stage_3_PeakFinderSubFunctions.cpp
index 7f4f41d..76288ff 100644
--- a/src/Stage_3_PeakFinderSubFunctions.cpp
+++ b/src/Stage_3_PeakFinderSubFunctions.cpp
@@ -1143,14 +1143,14 @@ void Mstep2D_Rcpp(Rcpp::NumericVector &sdx_g,Rcpp::NumericVector &lambdax_g,
             //----
             // k_g update:
             //----
-            double Ak_g=1.0/std::max(1.0-B_my_g[g-1]/C_my_g[g-1],std::sqrt(DOUBLE_EPS));
+            double Ak_g=1.0/std::max(1.0-B_my_g[g-1]/C_my_g[g-1],std::sqrt(DBL_EPSILON));
             double Bk_g=A_my_g[g-1]/C_my_g[g-1];
             double Ck_g=RespFiXi_k_g[g-1]/RespFi_k_g[g-1];
-            double k_g=std::max(std::sqrt(DOUBLE_EPS),Ak_g*(Bk_g-Ck_g));
+            double k_g=std::max(std::sqrt(DBL_EPSILON),Ak_g*(Bk_g-Ck_g));
             //----
             // my_g:
             //----
-            my_g[g-1]=Bk_g+std::min(B_my_g[g-1]/C_my_g[g-1],1.0-std::sqrt(DOUBLE_EPS))*k_g;
+            my_g[g-1]=Bk_g+std::min(B_my_g[g-1]/C_my_g[g-1],1.0-std::sqrt(DBL_EPSILON))*k_g;
             // update mx_g:
             mx_g[g-1]=my_g[g-1]-k_g;
             // ----
@@ -1214,8 +1214,8 @@ void NR_lambdax_g_Rcpp(double &lambdax,double const &Pos_lambdax_g, double const
         double fder=fder1-fder2+std::pow(sdx,2.0)*(fder3+fder4)/2.0;
         // update:
         lambdax=lambdax_old-f/fder;
-        if(lambdax>=0.0) lambdax=-std::sqrt(DOUBLE_EPS);
-        if(lambdax<=-1.0) lambdax=-1.0+std::sqrt(DOUBLE_EPS);
+        if(lambdax>=0.0) lambdax=-std::sqrt(DBL_EPSILON);
+        if(lambdax<=-1.0) lambdax=-1.0+std::sqrt(DBL_EPSILON);
         // criterio:
         Ncrit=std::abs(lambdax-lambdax_old);
         // replace lambdax_old:
@@ -1254,8 +1254,8 @@ void NR_lambday_g_Rcpp(double &lambday,double const &Pos_lambday_g, double const
         double fder=fder1-fder2+std::pow(sdy,2.0)*(fder3+fder4)/2.0;
         // update:
         lambday=lambday_old-f/fder;
-        if(lambday>=1.0) lambday=1.0-std::sqrt(DOUBLE_EPS);
-        if(lambday<=0.0) lambday=std::sqrt(DOUBLE_EPS);
+        if(lambday>=1.0) lambday=1.0-std::sqrt(DBL_EPSILON);
+        if(lambday<=0.0) lambday=std::sqrt(DBL_EPSILON);
         // criterio:
         Ncrit=std::abs(lambday-lambday_old);
         // replace lambday_old:
