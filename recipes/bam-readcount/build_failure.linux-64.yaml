recipe_sha: 7912943d91e9bbca70cf5329534ead53618ac3d3c42509ec94f6ec5160db4c94  # The hash of the recipe's meta.yaml at which this recipe failed to build.
skiplist: true # Set to true to skiplist this recipe so that it will be ignored as long as its latest commit is the one given above.
log: |-
  -- extracting...
       src='$SRC_DIR/vendor/boost-1.55-bamrc.tar.gz'
       dst='$SRC_DIR/build/vendor/boost-src'
  -- extracting... [tar xfz]
  -- extracting... [analysis]
  -- extracting... [rename]
  -- extracting... [clean up]
  -- extracting... done
  [ 14%] No update step for 'boost-1.55'
  [ 16%] No patch step for 'boost-1.55'
  [ 17%] Performing configure step for 'boost-1.55'

  Could not find a suitable toolset.

  You can specify the toolset as the argument, i.e.:
      ./build.sh [options] gcc

  Toolsets supported by this script are:
      acc, clang, como, gcc, intel-darwin, intel-linux, kcc, kylix, mipspro,
      pathscale, pgi, qcc, sun, sunpro, tru64cxx, vacpp

  For any toolset you can override the path to the compiler with the '--cxx'
  option. You can also use additional flags for the compiler with the
  '--cxxflags' option.

  A special toolset; cxx, is available which is used as a fallback when a more
  specific toolset is not found and the cxx command is detected. The 'cxx'
  toolset will use the '--cxx' and '--cxxflags' options, if present.

  Options:
      --help                  Show this help message.
      --verbose               Show messages about what this script is doing.
      --debug                 Build b2 with debug information, and no
                              optimizations.
      --guess-toolset         Print the toolset we can detect for building.
      --cxx=CXX               The compiler exec to use instead of the detected
                              compiler exec.
      --cxxflags=CXXFLAGS     The compiler flags to use in addition to the
                              flags for the detected compiler.


  Building B2 engine..

  Could not find a suitable toolset.

  You can specify the toolset as the argument, i.e.:
      ./build.sh [options] gcc

  Toolsets supported by this script are:
      acc, clang, como, gcc, intel-darwin, intel-linux, kcc, kylix, mipspro,
      pathscale, pgi, qcc, sun, sunpro, tru64cxx, vacpp

  For any toolset you can override the path to the compiler with the '--cxx'
  option. You can also use additional flags for the compiler with the
  '--cxxflags' option.

  A special toolset; cxx, is available which is used as a fallback when a more
  specific toolset is not found and the cxx command is detected. The 'cxx'
  toolset will use the '--cxx' and '--cxxflags' options, if present.

  Options:
      --help                  Show this help message.
      --verbose               Show messages about what this script is doing.
      --debug                 Build b2 with debug information, and no
                              optimizations.
      --guess-toolset         Print the toolset we can detect for building.
      --cxx=CXX               The compiler exec to use instead of the detected
                              compiler exec.
      --cxxflags=CXXFLAGS     The compiler flags to use in addition to the
                              flags for the detected compiler.



  Failed to build B2 build engine
  make[2]: *** [CMakeFiles/boost-1.55.dir/build.make:92: vendor/src/boost-1.55-stamp/boost-1.55-configure] Error 1
  make[1]: *** [CMakeFiles/Makefile2:264: CMakeFiles/boost-1.55.dir/all] Error 2
  make: *** [Makefile:166: all] Error 2
  Traceback (most recent call last):
    File "/opt/conda/lib/python3.10/site-packages/conda_build/build.py", line 2558, in build
      utils.check_call_env(
    File "/opt/conda/lib/python3.10/site-packages/conda_build/utils.py", line 404, in check_call_env
      return _func_defaulting_env_to_os_environ("call", *popenargs, **kwargs)
    File "/opt/conda/lib/python3.10/site-packages/conda_build/utils.py", line 380, in _func_defaulting_env_to_os_environ
      raise subprocess.CalledProcessError(proc.returncode, _args)
  subprocess.CalledProcessError: Command '['/bin/bash', '-o', 'errexit', '/opt/conda/conda-bld/bam-readcount_1734293648433/work/conda_build.sh']' returned non-zero exit status 2.

  The above exception was the direct cause of the following exception:

  Traceback (most recent call last):
    File "/opt/conda/bin/conda-build", line 11, in <module>
      sys.exit(execute())
    File "/opt/conda/lib/python3.10/site-packages/conda_build/cli/main_build.py", line 589, in execute
      api.build(
    File "/opt/conda/lib/python3.10/site-packages/conda_build/api.py", line 209, in build
      return build_tree(
    File "/opt/conda/lib/python3.10/site-packages/conda_build/build.py", line 3712, in build_tree
      packages_from_this = build(
    File "/opt/conda/lib/python3.10/site-packages/conda_build/build.py", line 2566, in build
      raise BuildScriptException(str(exc), caused_by=exc) from exc
  conda_build.exceptions.BuildScriptException: Command '['/bin/bash', '-o', 'errexit', '/opt/conda/conda-bld/bam-readcount_1734293648433/work/conda_build.sh']' returned non-zero exit status 2.
# Last 100 lines of the build log.
category: |-
  compiler error
