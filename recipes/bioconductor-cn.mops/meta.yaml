{% set version = "1.30.0" %}
{% set name = "cn.mops" %}
{% set bioc = "3.9" %}

package:
  name: 'bioconductor-{{ name|lower }}'
  version: '{{ version }}'
source:
  url:
    - 'https://bioconductor.org/packages/{{ bioc }}/bioc/src/contrib/{{ name }}_{{ version }}.tar.gz'
    - 'https://bioarchive.galaxyproject.org/{{ name }}_{{ version }}.tar.gz'
    - 'https://depot.galaxyproject.org/software/bioconductor-{{ name }}/bioconductor-{{ name }}_{{ version }}_src_all.tar.gz'
  md5: 503588f63a7ee549f7bb6f001b147cb5
build:
  number: 0
  rpaths:
    - lib/R/lib/
    - lib/
# Suggests: DNAcopy
requirements:
  host:
    - 'bioconductor-biobase >=2.44.0,<2.45.0'
    - 'bioconductor-biocgenerics >=0.30.0,<0.31.0'
    - 'bioconductor-exomecopy >=1.30.0,<1.31.0'
    - 'bioconductor-genomeinfodb >=1.20.0,<1.21.0'
    - 'bioconductor-genomicranges >=1.36.0,<1.37.0'
    - 'bioconductor-iranges >=2.18.0,<2.19.0'
    - 'bioconductor-rsamtools >=2.0.0,<2.1.0'
    - 'bioconductor-s4vectors >=0.22.0,<0.23.0'
    - r-base
  run:
    - 'bioconductor-biobase >=2.44.0,<2.45.0'
    - 'bioconductor-biocgenerics >=0.30.0,<0.31.0'
    - 'bioconductor-exomecopy >=1.30.0,<1.31.0'
    - 'bioconductor-genomeinfodb >=1.20.0,<1.21.0'
    - 'bioconductor-genomicranges >=1.36.0,<1.37.0'
    - 'bioconductor-iranges >=2.18.0,<2.19.0'
    - 'bioconductor-rsamtools >=2.0.0,<2.1.0'
    - 'bioconductor-s4vectors >=0.22.0,<0.23.0'
    - r-base
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - make
test:
  commands:
    - '$R -e "library(''{{ name }}'')"'
about:
  home: 'https://bioconductor.org/packages/{{ bioc }}/bioc/html/{{ name }}.html'
  license: 'LGPL (>= 2.0)'
  summary: 'cn.mops (Copy Number estimation by a Mixture Of PoissonS) is a data processing pipeline for copy number variations and aberrations (CNVs and CNAs) from next generation sequencing (NGS) data. The package supplies functions to convert BAM files into read count matrices or genomic ranges objects, which are the input objects for cn.mops. cn.mops models the depths of coverage across samples at each genomic position. Therefore, it does not suffer from read count biases along chromosomes. Using a Bayesian approach, cn.mops decomposes read variations across samples into integer copy numbers and noise by its mixture components and Poisson distributions, respectively. cn.mops guarantees a low FDR because wrong detections are indicated by high noise and filtered out. cn.mops is very fast and written in C++.'
extra:
  identifiers:
    - biotools:cn.mops
  parent_recipe:
    name: bioconductor-cn.mops
    path: recipes/bioconductor-cn.mops
    version: 1.26.0

