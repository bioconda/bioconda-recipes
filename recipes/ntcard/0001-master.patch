diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..6e55263
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,19 @@
+*.o
+Makefile
+Makefile.in
+aclocal.m4
+autom4te.cache
+compile
+config.guess
+config.h
+config.h.in
+config.sub
+config.log
+config.status
+configure
+depcomp
+install-sh
+missing
+stamp-h1
+.deps
+.dirstamp
diff --git a/ntcard.cpp b/ntcard.cpp
index 68351ee..328abea 100644
--- a/ntcard.cpp
+++ b/ntcard.cpp
@@ -256,10 +256,10 @@ compEst(const uint16_t* t_Counter, double& F0Mean, double fMean[])
 	}
 
 	F0Mean = (ssize_t)(
-	    (opt::rBits * log(2) - log(pMean[0])) * 1.0 * ((size_t)1 << (opt::sBits + opt::rBits)));
+	    (opt::rBits * log(2) - log(pMean[0])) * 1.0 * ((uint64_t)1 << (opt::sBits + opt::rBits)));
 	for (size_t i = 0; i < 65536; i++)
 		fMean[i] = 0;
-	if (pMean[0] == 0) {
+	if (pMean[0] * (log(pMean[0]) - opt::rBits * log(2)) == 0) {
 		return;
 	}
 	fMean[1] = -1.0 * pMean[1] / (pMean[0] * (log(pMean[0]) - opt::rBits * log(2)));
@@ -289,9 +289,9 @@ outDefault(const std::vector<unsigned>& kList, const size_t totalKmers[], const
 		double fMean[65536];
 		compEst(t_Counter + k * opt::nSamp * opt::rBuck, F0Mean, fMean);
 		histFiles[k] << "F1\t" << totalKmers[k] << "\n";
-		histFiles[k] << "F0\t" << (size_t)F0Mean << "\n";
+		histFiles[k] << "F0\t" << (uint64_t)F0Mean << "\n";
 		for (size_t i = 1; i <= opt::covMax; i++)
-			histFiles[k] << i << "\t" << (size_t)fMean[i] << "\n";
+			histFiles[k] << i << "\t" << (uint64_t)fMean[i] << "\n";
 	}
 	for (unsigned k = 0; k < opt::nK; k++)
 		histFiles[k].close();
@@ -307,9 +307,9 @@ outCompact(const std::vector<unsigned>& kList, const size_t totalKmers[], const
 		double fMean[65536];
 		compEst(t_Counter + k * opt::nSamp * opt::rBuck, F0Mean, fMean);
 		std::cerr << "k=" << kList[k] << "\tF1\t" << totalKmers[k] << "\n";
-		std::cerr << "k=" << kList[k] << "\tF0\t" << (size_t)F0Mean << "\n";
+		std::cerr << "k=" << kList[k] << "\tF0\t" << (uint64_t)F0Mean << "\n";
 		for (size_t i = 1; i <= opt::covMax; i++)
-			histFile << kList[k] << "\t" << i << "\t" << (size_t)fMean[i] << "\n";
+			histFile << kList[k] << "\t" << i << "\t" << (uint64_t)fMean[i] << "\n";
 	}
 	histFile.close();
 }
@@ -424,7 +424,7 @@ main(int argc, char** argv)
 			inFiles.push_back(file);
 	}
 
-	size_t totalSize = 0;
+	uint64_t totalSize = 0;
 	for (unsigned file_i = 0; file_i < inFiles.size(); ++file_i)
 		totalSize += getInf(inFiles[file_i].c_str());
 	if (totalSize < 50000000000)
