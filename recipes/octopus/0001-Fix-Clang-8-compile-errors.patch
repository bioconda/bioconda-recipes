From 889c31648d7b3bc1d8322806eca487ad8684c970 Mon Sep 17 00:00:00 2001
From: Daniel Cooke <dcooke@well.ox.ac.uk>
Date: Fri, 29 Mar 2019 16:18:51 +0000
Subject: [PATCH] Fix Clang 8 compile errors

---
 src/core/calling_components.hpp               |  2 +-
 .../conditional_random_forest_filter.hpp      |  4 +-
 .../filters/conditional_threshold_filter.hpp  |  4 +-
 .../filters/denovo_random_forest_filter.hpp   |  4 +-
 .../csr/filters/denovo_threshold_filter.hpp   |  4 +-
 .../double_pass_variant_call_filter.hpp       |  4 +-
 src/core/csr/filters/passing_filter.hpp       |  6 +--
 src/core/csr/filters/random_forest_filter.hpp |  4 +-
 .../single_pass_variant_call_filter.hpp       |  4 +-
 .../filters/somatic_random_forest_filter.hpp  |  4 +-
 .../csr/filters/somatic_threshold_filter.hpp  |  4 +-
 src/core/csr/filters/threshold_filter.hpp     |  4 +-
 .../unsupervised_clustering_filter.hpp        |  4 +-
 src/core/csr/filters/variant_call_filter.hpp  |  4 +-
 .../coalescent_population_prior_model.hpp     |  8 ++--
 ...tant_mixture_genotype_likelihood_model.hpp |  4 +-
 .../uniform_population_prior_model.hpp        |  8 ++--
 ...able_mixture_genotype_likelihood_model.hpp |  4 +-
 src/core/tools/bam_realigner.hpp              |  8 ++--
 src/core/tools/hapgen/haplotype_tree.cpp      | 42 +++++++++++++++----
 src/core/tools/indel_profiler.hpp             |  8 ++--
 src/core/tools/vargen/variant_generator.hpp   |  1 -
 src/core/tools/vcf_record_factory.hpp         |  4 +-
 src/core/types/haplotype.hpp                  |  2 +-
 src/core/types/phylogeny.hpp                  |  3 +-
 src/io/read/read_manager.cpp                  | 17 ++++++++
 src/io/read/read_manager.hpp                  |  2 +-
 src/io/reference/reference_genome.hpp         |  3 +-
 src/io/variant/vcf_parser.hpp                 |  4 +-
 src/readpipe/transformers/read_transform.hpp  | 18 ++++----
 30 files changed, 116 insertions(+), 76 deletions(-)

diff --git a/src/core/calling_components.hpp b/src/core/calling_components.hpp
index b78debf4..3bc64d1e 100644
--- a/src/core/calling_components.hpp
+++ b/src/core/calling_components.hpp
@@ -141,7 +141,7 @@ struct ContigCallingComponents
 {
     std::reference_wrapper<const ReferenceGenome> reference;
     std::reference_wrapper<const ReadManager> read_manager;
-    const InputRegionMap::mapped_type regions;
+    InputRegionMap::mapped_type regions;
     std::reference_wrapper<const std::vector<SampleName>> samples;
     std::unique_ptr<const Caller> caller;
     std::size_t read_buffer_size;
diff --git a/src/core/csr/filters/conditional_random_forest_filter.hpp b/src/core/csr/filters/conditional_random_forest_filter.hpp
index a8e5e2e1..d2729f93 100644
--- a/src/core/csr/filters/conditional_random_forest_filter.hpp
+++ b/src/core/csr/filters/conditional_random_forest_filter.hpp
@@ -39,8 +39,8 @@ class ConditionalRandomForestFilter : public DoublePassVariantCallFilter
     
     ConditionalRandomForestFilter(const ConditionalRandomForestFilter&)            = delete;
     ConditionalRandomForestFilter& operator=(const ConditionalRandomForestFilter&) = delete;
-    ConditionalRandomForestFilter(ConditionalRandomForestFilter&&)                 = default;
-    ConditionalRandomForestFilter& operator=(ConditionalRandomForestFilter&&)      = default;
+    ConditionalRandomForestFilter(ConditionalRandomForestFilter&&)                 = delete;
+    ConditionalRandomForestFilter& operator=(ConditionalRandomForestFilter&&)      = delete;
     
     virtual ~ConditionalRandomForestFilter() override = default;
 
diff --git a/src/core/csr/filters/conditional_threshold_filter.hpp b/src/core/csr/filters/conditional_threshold_filter.hpp
index 2adac833..0bc24050 100644
--- a/src/core/csr/filters/conditional_threshold_filter.hpp
+++ b/src/core/csr/filters/conditional_threshold_filter.hpp
@@ -33,8 +33,8 @@ class ConditionalThresholdVariantCallFilter : public ThresholdVariantCallFilter
     
     ConditionalThresholdVariantCallFilter(const ConditionalThresholdVariantCallFilter&)            = delete;
     ConditionalThresholdVariantCallFilter& operator=(const ConditionalThresholdVariantCallFilter&) = delete;
-    ConditionalThresholdVariantCallFilter(ConditionalThresholdVariantCallFilter&&)                 = default;
-    ConditionalThresholdVariantCallFilter& operator=(ConditionalThresholdVariantCallFilter&&)      = default;
+    ConditionalThresholdVariantCallFilter(ConditionalThresholdVariantCallFilter&&)                 = delete;
+    ConditionalThresholdVariantCallFilter& operator=(ConditionalThresholdVariantCallFilter&&)      = delete;
     
     virtual ~ConditionalThresholdVariantCallFilter() override = default;
 
diff --git a/src/core/csr/filters/denovo_random_forest_filter.hpp b/src/core/csr/filters/denovo_random_forest_filter.hpp
index ae0ad22a..a10cbcfe 100644
--- a/src/core/csr/filters/denovo_random_forest_filter.hpp
+++ b/src/core/csr/filters/denovo_random_forest_filter.hpp
@@ -41,8 +41,8 @@ class DeNovoRandomForestVariantCallFilter : public ConditionalRandomForestFilter
     
     DeNovoRandomForestVariantCallFilter(const DeNovoRandomForestVariantCallFilter&)            = delete;
     DeNovoRandomForestVariantCallFilter& operator=(const DeNovoRandomForestVariantCallFilter&) = delete;
-    DeNovoRandomForestVariantCallFilter(DeNovoRandomForestVariantCallFilter&&)                 = default;
-    DeNovoRandomForestVariantCallFilter& operator=(DeNovoRandomForestVariantCallFilter&&)      = default;
+    DeNovoRandomForestVariantCallFilter(DeNovoRandomForestVariantCallFilter&&)                 = delete;
+    DeNovoRandomForestVariantCallFilter& operator=(DeNovoRandomForestVariantCallFilter&&)      = delete;
     
     virtual ~DeNovoRandomForestVariantCallFilter() override = default;
 
diff --git a/src/core/csr/filters/denovo_threshold_filter.hpp b/src/core/csr/filters/denovo_threshold_filter.hpp
index b8efe03e..a51f49b0 100644
--- a/src/core/csr/filters/denovo_threshold_filter.hpp
+++ b/src/core/csr/filters/denovo_threshold_filter.hpp
@@ -40,8 +40,8 @@ class DeNovoThresholdVariantCallFilter : public ConditionalThresholdVariantCallF
     
     DeNovoThresholdVariantCallFilter(const DeNovoThresholdVariantCallFilter&)            = delete;
     DeNovoThresholdVariantCallFilter& operator=(const DeNovoThresholdVariantCallFilter&) = delete;
-    DeNovoThresholdVariantCallFilter(DeNovoThresholdVariantCallFilter&&)                 = default;
-    DeNovoThresholdVariantCallFilter& operator=(DeNovoThresholdVariantCallFilter&&)      = default;
+    DeNovoThresholdVariantCallFilter(DeNovoThresholdVariantCallFilter&&)                 = delete;
+    DeNovoThresholdVariantCallFilter& operator=(DeNovoThresholdVariantCallFilter&&)      = delete;
     
     virtual ~DeNovoThresholdVariantCallFilter() override = default;
 
diff --git a/src/core/csr/filters/double_pass_variant_call_filter.hpp b/src/core/csr/filters/double_pass_variant_call_filter.hpp
index 9aec406c..a5c698ca 100644
--- a/src/core/csr/filters/double_pass_variant_call_filter.hpp
+++ b/src/core/csr/filters/double_pass_variant_call_filter.hpp
@@ -32,8 +32,8 @@ class DoublePassVariantCallFilter : public VariantCallFilter
     
     DoublePassVariantCallFilter(const DoublePassVariantCallFilter&)            = delete;
     DoublePassVariantCallFilter& operator=(const DoublePassVariantCallFilter&) = delete;
-    DoublePassVariantCallFilter(DoublePassVariantCallFilter&&)                 = default;
-    DoublePassVariantCallFilter& operator=(DoublePassVariantCallFilter&&)      = default;
+    DoublePassVariantCallFilter(DoublePassVariantCallFilter&&)                 = delete;
+    DoublePassVariantCallFilter& operator=(DoublePassVariantCallFilter&&)      = delete;
     
     virtual ~DoublePassVariantCallFilter() override = default;
 
diff --git a/src/core/csr/filters/passing_filter.hpp b/src/core/csr/filters/passing_filter.hpp
index f802c8f2..e59c9ac0 100644
--- a/src/core/csr/filters/passing_filter.hpp
+++ b/src/core/csr/filters/passing_filter.hpp
@@ -26,10 +26,10 @@ class PassingVariantCallFilter : public SinglePassVariantCallFilter
                              ConcurrencyPolicy threading,
                              boost::optional<ProgressMeter&> progress = boost::none);
     
-    PassingVariantCallFilter(const PassingVariantCallFilter&)           = delete;
+    PassingVariantCallFilter(const PassingVariantCallFilter&)            = delete;
     PassingVariantCallFilter& operator=(const PassingVariantCallFilter&) = delete;
-    PassingVariantCallFilter(PassingVariantCallFilter&&)                 = default;
-    PassingVariantCallFilter& operator=(PassingVariantCallFilter&&)      = default;
+    PassingVariantCallFilter(PassingVariantCallFilter&&)                 = delete;
+    PassingVariantCallFilter& operator=(PassingVariantCallFilter&&)      = delete;
     
     virtual ~PassingVariantCallFilter() override = default;
 
diff --git a/src/core/csr/filters/random_forest_filter.hpp b/src/core/csr/filters/random_forest_filter.hpp
index e4fb95a4..97f00715 100644
--- a/src/core/csr/filters/random_forest_filter.hpp
+++ b/src/core/csr/filters/random_forest_filter.hpp
@@ -35,8 +35,8 @@ class RandomForestFilter : public DoublePassVariantCallFilter
     
     RandomForestFilter(const RandomForestFilter&)            = delete;
     RandomForestFilter& operator=(const RandomForestFilter&) = delete;
-    RandomForestFilter(RandomForestFilter&&)                 = default;
-    RandomForestFilter& operator=(RandomForestFilter&&)      = default;
+    RandomForestFilter(RandomForestFilter&&)                 = delete;
+    RandomForestFilter& operator=(RandomForestFilter&&)      = delete;
     
     virtual ~RandomForestFilter() override = default;
 
diff --git a/src/core/csr/filters/single_pass_variant_call_filter.hpp b/src/core/csr/filters/single_pass_variant_call_filter.hpp
index 28c73470..43afc58a 100644
--- a/src/core/csr/filters/single_pass_variant_call_filter.hpp
+++ b/src/core/csr/filters/single_pass_variant_call_filter.hpp
@@ -27,8 +27,8 @@ class SinglePassVariantCallFilter : public VariantCallFilter
     
     SinglePassVariantCallFilter(const SinglePassVariantCallFilter&)            = delete;
     SinglePassVariantCallFilter& operator=(const SinglePassVariantCallFilter&) = delete;
-    SinglePassVariantCallFilter(SinglePassVariantCallFilter&&)                 = default;
-    SinglePassVariantCallFilter& operator=(SinglePassVariantCallFilter&&)      = default;
+    SinglePassVariantCallFilter(SinglePassVariantCallFilter&&)                 = delete;
+    SinglePassVariantCallFilter& operator=(SinglePassVariantCallFilter&&)      = delete;
     
     virtual ~SinglePassVariantCallFilter() override = default;
     
diff --git a/src/core/csr/filters/somatic_random_forest_filter.hpp b/src/core/csr/filters/somatic_random_forest_filter.hpp
index 65fed18b..d57c5596 100644
--- a/src/core/csr/filters/somatic_random_forest_filter.hpp
+++ b/src/core/csr/filters/somatic_random_forest_filter.hpp
@@ -41,8 +41,8 @@ class SomaticRandomForestVariantCallFilter : public ConditionalRandomForestFilte
     
     SomaticRandomForestVariantCallFilter(const SomaticRandomForestVariantCallFilter&)            = delete;
     SomaticRandomForestVariantCallFilter& operator=(const SomaticRandomForestVariantCallFilter&) = delete;
-    SomaticRandomForestVariantCallFilter(SomaticRandomForestVariantCallFilter&&)                 = default;
-    SomaticRandomForestVariantCallFilter& operator=(SomaticRandomForestVariantCallFilter&&)      = default;
+    SomaticRandomForestVariantCallFilter(SomaticRandomForestVariantCallFilter&&)                 = delete;
+    SomaticRandomForestVariantCallFilter& operator=(SomaticRandomForestVariantCallFilter&&)      = delete;
     
     virtual ~SomaticRandomForestVariantCallFilter() override = default;
 
diff --git a/src/core/csr/filters/somatic_threshold_filter.hpp b/src/core/csr/filters/somatic_threshold_filter.hpp
index 6bf4926c..0ad3fd73 100644
--- a/src/core/csr/filters/somatic_threshold_filter.hpp
+++ b/src/core/csr/filters/somatic_threshold_filter.hpp
@@ -39,8 +39,8 @@ class SomaticThresholdVariantCallFilter : public ConditionalThresholdVariantCall
     
     SomaticThresholdVariantCallFilter(const SomaticThresholdVariantCallFilter&)            = delete;
     SomaticThresholdVariantCallFilter& operator=(const SomaticThresholdVariantCallFilter&) = delete;
-    SomaticThresholdVariantCallFilter(SomaticThresholdVariantCallFilter&&)                 = default;
-    SomaticThresholdVariantCallFilter& operator=(SomaticThresholdVariantCallFilter&&)      = default;
+    SomaticThresholdVariantCallFilter(SomaticThresholdVariantCallFilter&&)                 = delete;
+    SomaticThresholdVariantCallFilter& operator=(SomaticThresholdVariantCallFilter&&)      = delete;
     
     virtual ~SomaticThresholdVariantCallFilter() override = default;
 
diff --git a/src/core/csr/filters/threshold_filter.hpp b/src/core/csr/filters/threshold_filter.hpp
index e04e42a8..2045238a 100644
--- a/src/core/csr/filters/threshold_filter.hpp
+++ b/src/core/csr/filters/threshold_filter.hpp
@@ -68,8 +68,8 @@ class ThresholdVariantCallFilter : public SinglePassVariantCallFilter
     
     ThresholdVariantCallFilter(const ThresholdVariantCallFilter&)            = delete;
     ThresholdVariantCallFilter& operator=(const ThresholdVariantCallFilter&) = delete;
-    ThresholdVariantCallFilter(ThresholdVariantCallFilter&&)                 = default;
-    ThresholdVariantCallFilter& operator=(ThresholdVariantCallFilter&&)      = default;
+    ThresholdVariantCallFilter(ThresholdVariantCallFilter&&)                 = delete;
+    ThresholdVariantCallFilter& operator=(ThresholdVariantCallFilter&&)      = delete;
     
     virtual ~ThresholdVariantCallFilter() override = default;
 
diff --git a/src/core/csr/filters/unsupervised_clustering_filter.hpp b/src/core/csr/filters/unsupervised_clustering_filter.hpp
index 609065cb..7704a9b1 100644
--- a/src/core/csr/filters/unsupervised_clustering_filter.hpp
+++ b/src/core/csr/filters/unsupervised_clustering_filter.hpp
@@ -27,8 +27,8 @@ class UnsupervisedClusteringFilter : public DoublePassVariantCallFilter
     
     UnsupervisedClusteringFilter(const UnsupervisedClusteringFilter&)            = delete;
     UnsupervisedClusteringFilter& operator=(const UnsupervisedClusteringFilter&) = delete;
-    UnsupervisedClusteringFilter(UnsupervisedClusteringFilter&&)                 = default;
-    UnsupervisedClusteringFilter& operator=(UnsupervisedClusteringFilter&&)      = default;
+    UnsupervisedClusteringFilter(UnsupervisedClusteringFilter&&)                 = delete;
+    UnsupervisedClusteringFilter& operator=(UnsupervisedClusteringFilter&&)      = delete;
     
     virtual ~UnsupervisedClusteringFilter() override = default;
     
diff --git a/src/core/csr/filters/variant_call_filter.hpp b/src/core/csr/filters/variant_call_filter.hpp
index c377d30f..1dd636b4 100644
--- a/src/core/csr/filters/variant_call_filter.hpp
+++ b/src/core/csr/filters/variant_call_filter.hpp
@@ -60,8 +60,8 @@ class VariantCallFilter
     
     VariantCallFilter(const VariantCallFilter&)            = delete;
     VariantCallFilter& operator=(const VariantCallFilter&) = delete;
-    VariantCallFilter(VariantCallFilter&&)                 = default;
-    VariantCallFilter& operator=(VariantCallFilter&&)      = default;
+    VariantCallFilter(VariantCallFilter&&)                 = delete;
+    VariantCallFilter& operator=(VariantCallFilter&&)      = delete;
     
     virtual ~VariantCallFilter() = default;
     
diff --git a/src/core/models/genotype/coalescent_population_prior_model.hpp b/src/core/models/genotype/coalescent_population_prior_model.hpp
index 98e616de..c852f3a6 100644
--- a/src/core/models/genotype/coalescent_population_prior_model.hpp
+++ b/src/core/models/genotype/coalescent_population_prior_model.hpp
@@ -29,10 +29,10 @@ class CoalescentPopulationPriorModel : public PopulationPriorModel
     CoalescentPopulationPriorModel(CoalescentModel segregation_model);
     CoalescentPopulationPriorModel(CoalescentModel segregation_model, HardyWeinbergModel genotype_model);
     
-    CoalescentPopulationPriorModel(const CoalescentPopulationPriorModel&)            = default;
-    CoalescentPopulationPriorModel& operator=(const CoalescentPopulationPriorModel&) = default;
-    CoalescentPopulationPriorModel(CoalescentPopulationPriorModel&&)                 = default;
-    CoalescentPopulationPriorModel& operator=(CoalescentPopulationPriorModel&&)      = default;
+    CoalescentPopulationPriorModel(const CoalescentPopulationPriorModel&)            = delete;
+    CoalescentPopulationPriorModel& operator=(const CoalescentPopulationPriorModel&) = delete;
+    CoalescentPopulationPriorModel(CoalescentPopulationPriorModel&&)                 = delete;
+    CoalescentPopulationPriorModel& operator=(CoalescentPopulationPriorModel&&)      = delete;
     
     virtual ~CoalescentPopulationPriorModel() = default;
 
diff --git a/src/core/models/genotype/constant_mixture_genotype_likelihood_model.hpp b/src/core/models/genotype/constant_mixture_genotype_likelihood_model.hpp
index fd6bbe00..f7ba9775 100644
--- a/src/core/models/genotype/constant_mixture_genotype_likelihood_model.hpp
+++ b/src/core/models/genotype/constant_mixture_genotype_likelihood_model.hpp
@@ -24,9 +24,9 @@ class ConstantMixtureGenotypeLikelihoodModel
                                            const std::vector<Haplotype>& haplotypes);
     
     ConstantMixtureGenotypeLikelihoodModel(const ConstantMixtureGenotypeLikelihoodModel&)            = default;
-    ConstantMixtureGenotypeLikelihoodModel& operator=(const ConstantMixtureGenotypeLikelihoodModel&) = default;
+    ConstantMixtureGenotypeLikelihoodModel& operator=(const ConstantMixtureGenotypeLikelihoodModel&) = delete;
     ConstantMixtureGenotypeLikelihoodModel(ConstantMixtureGenotypeLikelihoodModel&&)                 = default;
-    ConstantMixtureGenotypeLikelihoodModel& operator=(ConstantMixtureGenotypeLikelihoodModel&&)      = default;
+    ConstantMixtureGenotypeLikelihoodModel& operator=(ConstantMixtureGenotypeLikelihoodModel&&)      = delete;
     
     ~ConstantMixtureGenotypeLikelihoodModel() = default;
     
diff --git a/src/core/models/genotype/uniform_population_prior_model.hpp b/src/core/models/genotype/uniform_population_prior_model.hpp
index 3024123c..87a2190d 100644
--- a/src/core/models/genotype/uniform_population_prior_model.hpp
+++ b/src/core/models/genotype/uniform_population_prior_model.hpp
@@ -21,10 +21,10 @@ class UniformPopulationPriorModel : public PopulationPriorModel
     
     UniformPopulationPriorModel() = default;
     
-    UniformPopulationPriorModel(const UniformPopulationPriorModel&)            = default;
-    UniformPopulationPriorModel& operator=(const UniformPopulationPriorModel&) = default;
-    UniformPopulationPriorModel(UniformPopulationPriorModel&&)                 = default;
-    UniformPopulationPriorModel& operator=(UniformPopulationPriorModel&&)      = default;
+    UniformPopulationPriorModel(const UniformPopulationPriorModel&)            = delete;
+    UniformPopulationPriorModel& operator=(const UniformPopulationPriorModel&) = delete;
+    UniformPopulationPriorModel(UniformPopulationPriorModel&&)                 = delete;
+    UniformPopulationPriorModel& operator=(UniformPopulationPriorModel&&)      = delete;
     
     virtual ~UniformPopulationPriorModel() = default;
 
diff --git a/src/core/models/genotype/variable_mixture_genotype_likelihood_model.hpp b/src/core/models/genotype/variable_mixture_genotype_likelihood_model.hpp
index d9f8167d..324eeed0 100644
--- a/src/core/models/genotype/variable_mixture_genotype_likelihood_model.hpp
+++ b/src/core/models/genotype/variable_mixture_genotype_likelihood_model.hpp
@@ -29,9 +29,9 @@ class VariableMixtureGenotypeLikelihoodModel
                                            const std::vector<Haplotype>& haplotypes);
     
     VariableMixtureGenotypeLikelihoodModel(const VariableMixtureGenotypeLikelihoodModel&)            = default;
-    VariableMixtureGenotypeLikelihoodModel& operator=(const VariableMixtureGenotypeLikelihoodModel&) = default;
+    VariableMixtureGenotypeLikelihoodModel& operator=(const VariableMixtureGenotypeLikelihoodModel&) = delete;
     VariableMixtureGenotypeLikelihoodModel(VariableMixtureGenotypeLikelihoodModel&&)                 = default;
-    VariableMixtureGenotypeLikelihoodModel& operator=(VariableMixtureGenotypeLikelihoodModel&&)      = default;
+    VariableMixtureGenotypeLikelihoodModel& operator=(VariableMixtureGenotypeLikelihoodModel&&)      = delete;
     
     ~VariableMixtureGenotypeLikelihoodModel() = default;
     
diff --git a/src/core/tools/bam_realigner.hpp b/src/core/tools/bam_realigner.hpp
index 44b16959..ed44ea71 100644
--- a/src/core/tools/bam_realigner.hpp
+++ b/src/core/tools/bam_realigner.hpp
@@ -48,10 +48,10 @@ class BAMRealigner
     BAMRealigner() = default;
     BAMRealigner(Config config);
     
-    BAMRealigner(const BAMRealigner&)            = default;
-    BAMRealigner& operator=(const BAMRealigner&) = default;
-    BAMRealigner(BAMRealigner&&)                 = default;
-    BAMRealigner& operator=(BAMRealigner&&)      = default;
+    BAMRealigner(const BAMRealigner&)            = delete;
+    BAMRealigner& operator=(const BAMRealigner&) = delete;
+    BAMRealigner(BAMRealigner&&)                 = delete;
+    BAMRealigner& operator=(BAMRealigner&&)      = delete;
     
     ~BAMRealigner() = default;
     
diff --git a/src/core/tools/hapgen/haplotype_tree.cpp b/src/core/tools/hapgen/haplotype_tree.cpp
index 24ca8a57..af9ef52c 100644
--- a/src/core/tools/hapgen/haplotype_tree.cpp
+++ b/src/core/tools/hapgen/haplotype_tree.cpp
@@ -280,6 +280,36 @@ void HaplotypeTree::splice(const Allele& allele)
     return splice(demote(allele));
 }
 
+namespace {
+
+template <typename InputIterator, typename Compare>
+decltype(auto) min_value(InputIterator first, InputIterator last, Compare comp)
+{
+    auto result = *first;
+    ++first;
+    for (; first != last; ++first) {
+        if (comp(*first, result)) {
+            result = *first;
+        }
+    }
+    return result;
+}
+
+template <typename InputIterator, typename Compare>
+decltype(auto) max_value(InputIterator first, InputIterator last, Compare comp)
+{
+    auto result = *first;
+    ++first;
+    for (; first != last; ++first) {
+        if (comp(result, *first)) {
+            result = *first;
+        }
+    }
+    return result;
+}
+
+} // namespace
+
 GenomicRegion HaplotypeTree::encompassing_region() const
 {
     if (tree_region_) return *tree_region_;
@@ -287,14 +317,10 @@ GenomicRegion HaplotypeTree::encompassing_region() const
         throw std::runtime_error {"HaplotypeTree::encompassing_region called on empty tree"};
     }
     const auto p = boost::adjacent_vertices(root_, tree_);
-    const auto leftmost = *std::min_element(p.first, p.second,
-                                            [this] (const auto& lhs, const auto& rhs) {
-                                                return begins_before(tree_[lhs], tree_[rhs]);
-                                            });
-    const auto rightmost = *std::max_element(std::cbegin(haplotype_leafs_), std::cend(haplotype_leafs_),
-                                             [this] (const auto& lhs, const auto& rhs) {
-                                                 return ends_before(tree_[lhs], tree_[rhs]);
-                                             });
+    const auto leftmost = min_value(p.first, p.second, [this] (const auto& lhs, const auto& rhs) {
+                                    return begins_before(tree_[lhs], tree_[rhs]); });
+    const auto rightmost = max_value(std::cbegin(haplotype_leafs_), std::cend(haplotype_leafs_),
+                                    [this] (const auto& lhs, const auto& rhs) { return ends_before(tree_[lhs], tree_[rhs]); });
     tree_region_ = GenomicRegion {contig_, octopus::encompassing_region(tree_[leftmost], tree_[rightmost])};
     return *tree_region_;
 }
diff --git a/src/core/tools/indel_profiler.hpp b/src/core/tools/indel_profiler.hpp
index cbd3814b..f7768948 100644
--- a/src/core/tools/indel_profiler.hpp
+++ b/src/core/tools/indel_profiler.hpp
@@ -54,10 +54,10 @@ class IndelProfiler
     IndelProfiler(ProfileConfig config);
     IndelProfiler(ProfileConfig config, PerformanceConfig performance_config);
     
-    IndelProfiler(const IndelProfiler&)            = default;
-    IndelProfiler& operator=(const IndelProfiler&) = default;
-    IndelProfiler(IndelProfiler&&)                 = default;
-    IndelProfiler& operator=(IndelProfiler&&)      = default;
+    IndelProfiler(const IndelProfiler&)            = delete;
+    IndelProfiler& operator=(const IndelProfiler&) = delete;
+    IndelProfiler(IndelProfiler&&)                 = delete;
+    IndelProfiler& operator=(IndelProfiler&&)      = delete;
     
     ~IndelProfiler() = default;
     
diff --git a/src/core/tools/vargen/variant_generator.hpp b/src/core/tools/vargen/variant_generator.hpp
index 8e410513..a45719e0 100644
--- a/src/core/tools/vargen/variant_generator.hpp
+++ b/src/core/tools/vargen/variant_generator.hpp
@@ -33,7 +33,6 @@ class VariantGenerator
     VariantGenerator(const VariantGenerator&);
     VariantGenerator& operator=(VariantGenerator);
     VariantGenerator(VariantGenerator&&)            = default;
-    VariantGenerator& operator=(VariantGenerator&&) = default;
     
     virtual ~VariantGenerator() = default;
     
diff --git a/src/core/tools/vcf_record_factory.hpp b/src/core/tools/vcf_record_factory.hpp
index d5dd8b16..bdc23496 100644
--- a/src/core/tools/vcf_record_factory.hpp
+++ b/src/core/tools/vcf_record_factory.hpp
@@ -24,9 +24,9 @@ class VcfRecordFactory
                      std::vector<SampleName> samples, bool sites_only);
     
     VcfRecordFactory(const VcfRecordFactory&)            = default;
-    VcfRecordFactory& operator=(const VcfRecordFactory&) = default;
+    VcfRecordFactory& operator=(const VcfRecordFactory&) = delete;
     VcfRecordFactory(VcfRecordFactory&&)                 = default;
-    VcfRecordFactory& operator=(VcfRecordFactory&&)      = default;
+    VcfRecordFactory& operator=(VcfRecordFactory&&)      = delete;
     
     ~VcfRecordFactory() = default;
     
diff --git a/src/core/types/haplotype.hpp b/src/core/types/haplotype.hpp
index a5741472..91b962e0 100644
--- a/src/core/types/haplotype.hpp
+++ b/src/core/types/haplotype.hpp
@@ -196,7 +196,7 @@ Haplotype::Haplotype(R&& region, ForwardIt first_allele, ForwardIt last_allele,
 class Haplotype::Builder
 {
 public:
-    Builder() = default;
+    Builder() = delete;
     
     explicit Builder(const GenomicRegion& region, const ReferenceGenome& reference);
     
diff --git a/src/core/types/phylogeny.hpp b/src/core/types/phylogeny.hpp
index 96b7ec83..5f81b019 100644
--- a/src/core/types/phylogeny.hpp
+++ b/src/core/types/phylogeny.hpp
@@ -29,8 +29,7 @@ class Phylogeny
     
     Phylogeny(const Phylogeny&);
     Phylogeny& operator=(Phylogeny);
-    Phylogeny(Phylogeny&&)                 = default;
-    Phylogeny& operator=(Phylogeny&&)      = default;
+    Phylogeny(Phylogeny&&) = default;
     
     ~Phylogeny() = default;
     
diff --git a/src/io/read/read_manager.cpp b/src/io/read/read_manager.cpp
index 97f9b5b7..1f728011 100644
--- a/src/io/read/read_manager.cpp
+++ b/src/io/read/read_manager.cpp
@@ -56,6 +56,23 @@ ReadManager::ReadManager(ReadManager&& other)
     samples_                        = move(other.samples_);
 }
 
+ReadManager& ReadManager::operator=(ReadManager&& other)
+{
+    if (this != &other) {
+        std::unique_lock<std::mutex> lock_lhs {mutex_, std::defer_lock}, lock_rhs {other.mutex_, std::defer_lock};
+        std::lock(lock_lhs, lock_rhs);
+        using std::move;
+        max_open_files_                 = move(other.max_open_files_);
+        num_files_                      = move(other.num_files_);
+        closed_readers_                 = move(other.closed_readers_);
+        open_readers_                   = move(other.open_readers_);
+        reader_paths_containing_sample_ = move(other.reader_paths_containing_sample_);
+        possible_regions_in_readers_    = move(other.possible_regions_in_readers_);
+        samples_                        = move(other.samples_);
+    }
+    return *this;
+}
+
 void swap(ReadManager& lhs, ReadManager& rhs) noexcept
 {
     if (&lhs == &rhs) return;
diff --git a/src/io/read/read_manager.hpp b/src/io/read/read_manager.hpp
index afcd99c6..b101abd7 100644
--- a/src/io/read/read_manager.hpp
+++ b/src/io/read/read_manager.hpp
@@ -44,7 +44,7 @@ class ReadManager
     ReadManager(const ReadManager&)            = delete;
     ReadManager& operator=(const ReadManager&) = delete;
     ReadManager(ReadManager &&);
-    ReadManager& operator=(ReadManager &&)     = default;
+    ReadManager& operator=(ReadManager &&);
     
     ~ReadManager() = default;
     
diff --git a/src/io/reference/reference_genome.hpp b/src/io/reference/reference_genome.hpp
index 299e7404..02c06707 100644
--- a/src/io/reference/reference_genome.hpp
+++ b/src/io/reference/reference_genome.hpp
@@ -30,8 +30,7 @@ class ReferenceGenome
     
     ReferenceGenome(const ReferenceGenome&);
     ReferenceGenome& operator=(ReferenceGenome);
-    ReferenceGenome(ReferenceGenome&&)            = default;
-    ReferenceGenome& operator=(ReferenceGenome&&) = default;
+    ReferenceGenome(ReferenceGenome&&) = default;
     
     ~ReferenceGenome() = default;
     
diff --git a/src/io/variant/vcf_parser.hpp b/src/io/variant/vcf_parser.hpp
index c6687c46..1e5694d0 100644
--- a/src/io/variant/vcf_parser.hpp
+++ b/src/io/variant/vcf_parser.hpp
@@ -70,8 +70,8 @@ class VcfParser : public IVcfReaderImpl
     
     VcfHeader header_;
     
-    const std::vector<std::string> samples_;
-    const std::streampos first_record_pos_; // must go after header_!
+    std::vector<std::string> samples_;
+    std::streampos first_record_pos_; // must go after header_!
     
     void reset_vcf() const; // logically const
 };
diff --git a/src/readpipe/transformers/read_transform.hpp b/src/readpipe/transformers/read_transform.hpp
index 2a8b387d..cf605646 100644
--- a/src/readpipe/transformers/read_transform.hpp
+++ b/src/readpipe/transformers/read_transform.hpp
@@ -28,7 +28,7 @@ struct CapBaseQualities
     void operator()(AlignedRead& read) const noexcept;
     
 private:
-    const BaseQuality max_;
+    BaseQuality max_;
 };
 
 struct MaskOverlappedSegment
@@ -52,7 +52,7 @@ struct MaskTail
     void operator()(AlignedRead& read) const noexcept;
     
 private:
-    const Length num_bases_;
+    Length num_bases_;
 };
 
 struct MaskLowQualityTails
@@ -66,7 +66,7 @@ struct MaskLowQualityTails
     void operator()(AlignedRead& read) const noexcept;
 
 private:
-    const BaseQuality threshold_;
+    BaseQuality threshold_;
 };
 
 struct MaskSoftClipped
@@ -85,7 +85,7 @@ struct MaskSoftClippedBoundraryBases
     void operator()(AlignedRead& read) const noexcept;
     
 private:
-    const Length num_bases_;
+    Length num_bases_;
 };
 
 struct MaskLowQualitySoftClippedBases
@@ -99,7 +99,7 @@ struct MaskLowQualitySoftClippedBases
     void operator()(AlignedRead& read) const noexcept;
 
 private:
-    const BaseQuality max_;
+    BaseQuality max_;
 };
 
 struct MaskLowQualitySoftClippedBoundaryBases
@@ -114,8 +114,8 @@ struct MaskLowQualitySoftClippedBoundaryBases
     void operator()(AlignedRead& read) const noexcept;
 
 private:
-    const Length num_bases_;
-    const BaseQuality max_;
+    Length num_bases_;
+    BaseQuality max_;
 };
 
 struct MaskLowAverageQualitySoftClippedTails
@@ -130,8 +130,8 @@ struct MaskLowAverageQualitySoftClippedTails
     void operator()(AlignedRead& read) const noexcept;
 
 private:
-    const BaseQuality threshold_;
-    const Length min_tail_length_;
+    BaseQuality threshold_;
+    Length min_tail_length_;
 };
 
 struct MaskInvertedSoftClippedReadEnds
