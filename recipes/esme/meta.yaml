{% set esme_version = "1.0.2" %}
{% set pnetcdf_version = "1.14.1" %}
{% set hdf5_version = "1.14.6" %}
{% set netcdf_c_version = "4.9.3" %}
{% set netcdf_fortran_version = "4.6.2" %}
{% set pio_version = "2.6.6" %}
{% set pio_pkg_version = pio_version.replace('.', '_') %}
{% set esmf_version = "8.9.0" %}
{% set omb_version = "7.5.1" %}
{% set build = 0 %}

# BUILD TRIGGER - manually change this for each MPI variant to force bioconda rebuild
{% set build_trigger = "psmpi" %}  # Change to: openmpi, mpich, psmpi or mvapich_ucx/mvapich_ofi

# Simple type-safe parsing
{% if mpi and mpi is string %}
  {% set mpi_parts = mpi.split('=') %}
  {% set mpi_name = mpi_parts[0] %}
  {% set mpi_version = mpi_parts[1] if mpi_parts|length > 1 else '' %}
{% else %}
  {% set mpi_name = 'mvapich' %}
  {% set mpi_version = '' %}
{% endif %}

{% set mpi_version_name = mpi_version.replace('.', '_') if mpi_version else '' %}

# MVApich variants
{% if mpi_name == "mvapich" %}
  {% if "ucx" in build_trigger %}
    {% set mpi_build_variant = "ucx" %}
  {% elif "ofi" in build_trigger %}
    {% set mpi_build_variant = "ofi" %}
  {% else %}
    {% set mpi_build_variant = "ucx" %}
  {% endif %}
  {% set mpi_pkg_suffix = mpi_name + '_' + mpi_version_name + '_' + mpi_build_variant %}
  {% set mpi_spec = mpi_name + '=' + mpi_version + '=' + mpi_build_variant + '*' %}
{% else %}
  {% set mpi_build_variant = '' %}
  {% set mpi_pkg_suffix = mpi_name + '_' + mpi_version_name %}
  {% set mpi_spec = mpi_name + ('=' + mpi_version if mpi_version else '') %}
{% endif %}

package:
  name: esme_{{ mpi_pkg_suffix }}
  version: {{ esme_version }}

build:
  number: {{ build }}
  string: {{ mpi_name }}_{{ mpi_build_variant }}_h{{ PKG_HASH }}_{{ build }}
  skip: true  # [not ((linux and (build_trigger != 'psmpi') and (x86_64 or aarch64)) or (linux and (build_trigger == 'psmpi') and (x86_64)))]
  ignore_run_exports:
    - libacl
    - libstdcxx
    - zlib
  run_exports:
    - {{ pin_compatible('esme_' + mpi_name, max_pin='x.x.x') }}

source:
  - url: https://parallel-netcdf.github.io/Release/pnetcdf-{{ pnetcdf_version }}.tar.gz
    sha256: 6f0f7221006c211fce9ddd2c008796b8c69dd717b2ad1be0b4027fc328fd3220  # 1.14.1
    folder: esme_pnetcdf
  - url: https://github.com/HDFGroup/hdf5/releases/download/hdf5_{{ hdf5_version }}/hdf5-{{ hdf5_version }}.tar.gz
    sha256: e4defbac30f50d64e1556374aa49e574417c9e72c6b1de7a4ff88c4b1bea6e9b  # 1.14.6
    folder: esme_hdf5
  - url: https://github.com/Unidata/netcdf-c/archive/refs/tags/v{{ netcdf_c_version }}.tar.gz
    sha256: 990f46d49525d6ab5dc4249f8684c6deeaf54de6fec63a187e9fb382cc0ffdff  # 4.9.3
    folder: esme_netcdf-c
  - url: https://github.com/Unidata/netcdf-fortran/archive/refs/tags/v{{ netcdf_fortran_version }}.tar.gz
    sha256: 44cc7b5626b0b054a8503b8fe7c1b0ac4e0a79a69dad792c212454906a9224ca  # 4.6.2
    folder: esme_netcdf-fortran
  - url: https://github.com/NCAR/ParallelIO/archive/refs/tags/pio{{ pio_pkg_version }}.tar.gz
    sha256: e32e018a521d38c9424940c7cfa7e9b1931b605f3511ee7ab3a718b69faeeb04  # 2.6.6
    folder: esme_pio
  - url: https://github.com/esmf-org/esmf/archive/refs/tags/v{{ esmf_version }}.tar.gz
    sha256: 586e0101d76ff9842d9ad43567fae50317ee794d80293430d9f1847dec0eefa5  # 8.9.0
    folder: esme_esmf
  - url: https://mvapich.cse.ohio-state.edu/download/mvapich/osu-micro-benchmarks-{{ omb_version }}.tar.gz
    sha256: 160d0d5e3c3cb022520ecb247e9875bb0973b1d3cadccd6c17624f8407c52e22  # 7.5.1
    folder: esme_omb

requirements:
  run:
    - cmake
    - esme_esmf_{{ mpi_pkg_suffix }}
    - make
    {% if mpi_name != "mvapich" %}
    - esme_omb_{{ mpi_pkg_suffix }}
    {% endif %}
    - perl-xml-libxml
    - python=3.8

test:
  commands:
    - echo "Skipping ESME tests, since individual packages were already tested"

outputs:

  - name: esme_pnetcdf_{{ mpi_pkg_suffix }}
    version: {{ pnetcdf_version }}
    script: build_pnetcdf.sh
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ compiler('fortran') }}
        - make
        - m4
      host:
        - {{ mpi_spec }}
    test:
      commands:
        - export PATH=$PATH:${PREFIX}/bin
        - pnetcdf-config --all
    build:
      string: h{{ PKG_HASH }}_{{ build }}
    about:
      home: https://parallel-netcdf.github.io/
      license: PnetCDF License
      license_family: OTHER
      license_file: LICENSE_PNETCDF
      summary: PnetCDF - Parallel netCDF
      description: |
        PnetCDF is a high-performance parallel I/O library for accessing files in netCDF formats.

  - name: esme_hdf5_{{ mpi_pkg_suffix }}
    version: {{ hdf5_version }}
    script: build_hdf5.sh
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ compiler('fortran') }}
        - make
      host:
        - libaec
        - libacl
        - {{ mpi_spec }}
        - zlib
      run:
        - libaec
        - zlib
    test:
      commands:
        - export PATH=$PATH:${PREFIX}/bin
        - h5pfc -showconfig
    build:
      string: h{{ PKG_HASH }}_{{ build }}
    about:
      home: https://www.hdfgroup.org/
      license: BSD-3-Clause
      license_family: BSD
      license_file: LICENSE_HDF5
      summary: HDF5 - Hierarchical Data Format 5
      description: |
        HDF5 (Hierarchical Data Format 5) is a file format and set of tools designed for managing, storing, and organizing large and complex data.

  - name: esme_netcdf-c_{{ mpi_pkg_suffix }}
    version: {{ netcdf_c_version }}
    script: build_netcdf-c.sh
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - make
        - m4
      host:
        - esme_hdf5_{{ mpi_pkg_suffix }}
        - libcurl
        - libxml2
        - {{ mpi_spec }}
        - esme_pnetcdf_{{ mpi_pkg_suffix }}
        - zlib
    test:
      commands:
        - export PATH=$PATH:${PREFIX}/bin
        - nc-config --all
    build:
      string: h{{ PKG_HASH }}_{{ build }}
    about:
      home: http://www.unidata.ucar.edu/software/netcdf/
      license: MIT
      license_family: MIT
      license_file: COPYRIGHT_NETCDF-C
      summary: NetCDF-C - netCDF interface for C
      description: |
        NetCDF-C is the C implementation of the Unidata's network Common Data Form (netCDF), providing an interface for storing, accessing, and sharing array-oriented scientific data in a platform-independent format.

  - name: esme_netcdf-fortran_{{ mpi_pkg_suffix }}
    version: {{ netcdf_fortran_version }}
    script: build_netcdf-fortran.sh
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ compiler('fortran') }}
        - make
        - m4
      host:
        - esme_hdf5_{{ mpi_pkg_suffix }}
        - {{ mpi_spec }}
        - esme_netcdf-c_{{ mpi_pkg_suffix }}
        - esme_pnetcdf_{{ mpi_pkg_suffix }}
    test:
      commands:
        - export PATH=$PATH:${PREFIX}/bin
        - nf-config --all
    build:
      string: h{{ PKG_HASH }}_{{ build }}
    about:
      home: http://www.unidata.ucar.edu/software/netcdf/
      license: MIT
      license_family: MIT
      license_file: COPYRIGHT_NETCDF-FORTRAN
      summary: NetCDF-Fortran - netCDF interface for Fortran
      description: |
        NetCDF-Fortran provides Fortran language bindings for the NetCDF library, allowing Fortran programs to read and write scientific data in netCDF format.

  - name: esme_pio_{{ mpi_pkg_suffix }}
    version: {{ pio_version }}
    script: build_pio.sh
    requirements:
      build:
        - autoconf
        - automake
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ compiler('fortran') }}
        - libtool
        - make
        - m4
        - pkg-config
      host:
        - esme_hdf5_{{ mpi_pkg_suffix }}
        - {{ mpi_spec }}
        - esme_netcdf-c_{{ mpi_pkg_suffix }}
        - esme_netcdf-fortran_{{ mpi_pkg_suffix }}
        - esme_pnetcdf_{{ mpi_pkg_suffix }}
    test:
      commands:
        - test -f ${PREFIX}/include/pio.h
    build:
      string: h{{ PKG_HASH }}_{{ build }}
    about:
      home: https://github.com/NCAR/ParallelIO
      license: Apache-2.0
      license_family: Apache
      license_file: LICENSE_PIO
      summary: ParallelIO - High-level parallel I/O library
      description: |
        A high-level Parallel I/O Library for structured grid applications.

  - name: esme_esmf_{{ mpi_pkg_suffix }}
    version: {{ esmf_version }}
    script: build_esmf.sh
    requirements:
      build:
        - cmake
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ compiler('fortran') }}
        - make
      host:
        - esme_hdf5_{{ mpi_pkg_suffix }}
        - {{ mpi_spec }}
        - esme_netcdf-c_{{ mpi_pkg_suffix }}
        - esme_netcdf-fortran_{{ mpi_pkg_suffix }}
        - openblas
        - esme_pio_{{ mpi_pkg_suffix }}
        - esme_pnetcdf_{{ mpi_pkg_suffix }}
      run:
        - esme_hdf5_{{ mpi_pkg_suffix }}
        - {{ mpi_spec }}
        - esme_netcdf-c_{{ mpi_pkg_suffix }}
        - esme_netcdf-fortran_{{ mpi_pkg_suffix }}
        - openblas
        - esme_pio_{{ mpi_pkg_suffix }}
        - esme_pnetcdf_{{ mpi_pkg_suffix }}
    test:
      commands:
        - if test -f ${ESMFMKFILE}; then echo "ESMF makefile found"; else echo "ESMF makefile not found"; exit 1; fi
    build:
      string: h{{ PKG_HASH }}_{{ build }}
    about:
      home: http://earthsystemmodeling.org/
      license: ESMF License
      license_family: OTHER
      license_file: LICENSE_ESMF
      summary: ESMF - Earth System Modeling Framework
      description: |
        The Earth System Modeling Framework (ESMF) is a suite of software tools for developing high-performance, multi-component Earth science modeling applications.

  {% if mpi_name != "mvapich" %}
  - name: esme_omb_{{ mpi_pkg_suffix }}
    version: {{ omb_version }}
    script: build_omb.sh
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - make
      host:
        - {{ mpi_spec }}
      run:
        - {{ mpi_spec }}
        - openssh  # [mpi_name == 'openmpi']
    test:
      commands:
        {% if mpi_name == "psmpi" %}
          - echo "PSMPI does not have mpiexec, skipping test."
        {% elif mpi_name == "mvapich" %}
          - echo "MVAPIch has built-in OSU benchmarks, no separate package needed."
        {% elif mpi_name == "openmpi" %}
          - echo "Setting plm_rsh_agent and allowing root execution for OpenMPI"
          - export OMPI_MCA_plm_rsh_agent=$(command -v ssh)
          - echo "Allow root execution for OpenMPI"
          - mpiexec --allow-run-as-root -n 2 $PREFIX/libexec/osu-micro-benchmarks/mpi/pt2pt/osu_latency -m 1024:1024
        {% else %}
          - mpiexec -n 2 $PREFIX/libexec/osu-micro-benchmarks/mpi/pt2pt/osu_latency -m 1024:1024
        {% endif %}
    build:
      string: h{{ PKG_HASH }}_{{ build }}
    about:
      home: https://mvapich.cse.ohio-state.edu/
      license: BSD-3-Clause
      license_family: BSD
      license_file: LICENSE_OMB
      summary: OSU Micro Benchmarks
      description: |
        The OSU Micro Benchmarks (OMB) is a suite of performance measurement tools developed by The Ohio State University.
  {% endif %}

about:
  home: https://github.com/j34ni/bioconda-recipes
  license: BSD-3-Clause
  license_family: BSD
  license_file: LICENSE_ESME
  summary: Earth System Modelling Environment (ESME) - A bundle for scientific computing packages for climate modelling with MPI support.
  description: |
    ESME (Earth System Modelling Environment) is a package designed to facilitate the installation and management of various scientific computing libraries with support for multiple MPI implementations (namely MPIch, OpenMPI, MVApich and ParaStationMPI). This bundle currently includes:
    - PnetCDF: Version {{ pnetcdf_version }}
    - HDF5: Version {{ hdf5_version }}
    - netCDF_C: Version {{ netcdf_c_version }}
    - netCDF_Fortran: Version {{ netcdf_fortran_version }}
    - ParallelIO: Version {{ pio_version }} 
    - ESMF: Version {{ esmf_version }}
    - OSU_Micro_Benchmarks: Version {{ omb_version }}

extra:
  recipe-maintainers:
    - j34ni
  skip-lints:
    - version_constraints_missing_whitespace
    - compilers_must_be_in_build
    - folder_and_package_name_must_match
# additional-platforms:
#   - linux-aarch64
