diff --git a/docs/batchSystem.rst b/docs/batchSystem.rst
index 007a57e..ca297c9 100644
--- docs/batchSystem.rst
+++ docs/batchSystem.rst
@@ -4,9 +4,22 @@ The batch system interface
 ==========================
 
 The batch system interface is used by Toil to abstract over different ways of running
-batches of jobs, for example GridEngine, Mesos, Parasol and a single node. The 
+batches of jobs, for example Slurm, GridEngine, Mesos, Parasol and a single node. The 
 :class:`toil.batchSystems.abstractBatchSystem.AbstractBatchSystem` API is implemented to
 run jobs using a given job management system, e.g. Mesos.
 
+Environmental variables allow passing of scheduler specific parameters. 
+
+For SLURM::
+
+    export TOIL_SLURM_ARGS="-t 1:00:00 -q fatq"
+
+For GridEngine (SGE, UGE), there is an additional environmental variable to define the
+`parallel environment <https://blogs.oracle.com/templedf/entry/configuring_a_new_parallel_environment>`_
+for running multicore jobs::
+
+    export TOIL_GRIDENGINE_PE='smp'
+    export TOIL_GRIDENGINE_ARGS='-q batch.q'
+
 .. autoclass:: toil.batchSystems.abstractBatchSystem::AbstractBatchSystem
-   :members:  
\ No newline at end of file
+   :members:  
diff --git a/src/toil/batchSystems/gridengine.py b/src/toil/batchSystems/gridengine.py
index 02c2f39..8501438 100644
--- src/toil/batchSystems/gridengine.py
+++ src/toil/batchSystems/gridengine.py
@@ -159,8 +159,8 @@ def run(self):
                 time.sleep(sleepSeconds)
 
     def prepareQsub(self, cpu, mem, jobID):
-        qsubline = ['qsub', '-b', 'y', '-terse', '-j', 'y', '-cwd', '-o', '/dev/null',
-                    '-e', '/dev/null', '-N', 'toil_job_' + str(jobID)]
+        qsubline = ['qsub', '-V', '-b', 'y', '-terse', '-j', 'y', '-cwd',
+                    '-N', 'toil_job_' + str(jobID)]
 
         if self.boss.environment:
             qsubline.append('-v')
@@ -173,13 +173,20 @@ def prepareQsub(self, cpu, mem, jobID):
             reqline += ['vf=' + memStr, 'h_vmem=' + memStr]
         if len(reqline) > 0:
             qsubline.extend(['-hard', '-l', ','.join(reqline)])
+        sgeArgs = os.getenv('TOIL_GRIDENGINE_ARGS')
+        if sgeArgs:
+            sgeArgs = sgeArgs.split()
+            for arg in sgeArgs:
+                if arg.startswith(("vf=", "hvmem=", "-pe")):
+                    raise ValueError("Unexpected CPU, memory or pe specifications in TOIL_GRIDGENGINE_ARGs: %s" % arg)
+            qsubline.extend(sgeArgs)
         if cpu is not None and math.ceil(cpu) > 1:
             peConfig = os.getenv('TOIL_GRIDENGINE_PE') or 'shm'
             qsubline.extend(['-pe', peConfig, str(int(math.ceil(cpu)))])
         return qsubline
 
     def qsub(self, qsubline):
-        logger.debug("Running %r", qsubline)
+        logger.debug("Running %r", " ".join(qsubline))
         process = subprocess.Popen(qsubline, stdout=subprocess.PIPE)
         result = int(process.stdout.readline().strip().split('.')[0])
         return result
diff --git a/src/toil/test/batchSystems/batchSystemTest.py b/src/toil/test/batchSystems/batchSystemTest.py
index f7a6f55..437f3e2 100644
--- src/toil/test/batchSystems/batchSystemTest.py
+++ src/toil/test/batchSystems/batchSystemTest.py
@@ -544,6 +544,12 @@ def createBatchSystem(self):
         return GridengineBatchSystem(config=self.config, maxCores=numCores, maxMemory=1000e9,
                                      maxDisk=1e9)
 
+    def tearDown(self):
+        super(SlurmBatchSystemTest, self).tearDown()
+        # Cleanup Gridengine output log file from qsub
+        from glob import glob
+        for f in glob('toil_job*.o*'):
+            os.unlink(f)
 
 @needs_slurm
 class SlurmBatchSystemTest(hidden.AbstractBatchSystemTest):
