{% set name = "mikado" %}
{% set version = "1.0.2" %}
{% set file_ext = "tar.gz" %}
{% set hash_type = "sha256" %}
{% set hash_value = "2e668e098d465ef1bff837e152732b49bbb61f74cc5fbb938be9d72281bd710a" %}

package:
  name: '{{ name|lower }}'
  version: '{{ version }}'

source:
  fn: '{{ version }}.{{ file_ext }}'
  url: https://github.com/lucventurini/mikado/archive/{{version}}.tar.gz
  '{{ hash_type }}': '{{ hash_value }}'

build:
  number: 0
  entry_points:
    - mikado = Mikado:main
    - daijin = Mikado.daijin:main
  skip: True # [py27 or osx or py33 or py36]
  script: python setup.py install --single-version-externally-managed --record=record.txt

requirements:
  build:
    - python
    - setuptools
    - wheel >=0.28.0
    - pyyaml
    - jsonschema
    - cython >=0.25
    - numpy
    - networkx >=1.10
    - sqlalchemy >=1
    - sqlalchemy-utils
    - biopython >=1.66
    - intervaltree
    - nose
    - pyfaidx
    - scikit-learn >=0.17.0
    - scipy >=0.15.0
    - frozendict
    - libmagic >=5.32
    - python-magic >=0.4.15
    - drmaa
    - snakemake
    - docutils !=0.13.1
    - tabulate
    - ujson
  run:
    - python
    - wheel >=0.28.0
    - pyyaml
    - jsonschema
    - cython >=0.25
    - numpy
    - networkx >=1.10
    - sqlalchemy >=1
    - sqlalchemy-utils
    - biopython >=1.66
    - intervaltree
    - nose
    - pyfaidx
    - scikit-learn >=0.17.0
    - scipy >=0.15.0
    - frozendict
    - libmagic >=5.32
    - python-magic >=0.4.15
    - drmaa
    - snakemake
    - docutils !=0.13.1
    - tabulate
    - portcullis
    - ujson

test:
  imports:
    - Mikado
    - Mikado.configuration
    - Mikado.daijin
    - Mikado.loci
    - Mikado.parsers
    - Mikado.picking
    - Mikado.preparation
    - Mikado.scales
    - Mikado.serializers
    - Mikado.serializers.blast_serializer
    - Mikado.subprograms
    - Mikado.subprograms.util
    - Mikado.tests
    - Mikado.transcripts
    - Mikado.transcripts.transcript_methods
    - Mikado.utilities
    - nose
  commands:
    - mikado --help 
    - daijin --help 
    - python -c "import Mikado; Mikado.test()" 

about:
  home: https://github.com/lucventurini/mikado
  license: GNU Lesser General Public License v3 or later (LGPLv3+)
  license_family: LGPL
  license_file: ''
  summary: A Python3 annotation program to select the best gene model in each locus
  description: "Mikado is a lightweight Python3 pipeline whose purpose is to facilitate the identification\nof expressed loci from RNA-Seq data * and to select the best models in each locus.\n\nThe logic\
    \ of the pipeline is as follows:\n\n1. In a first step, the annotation (provided in GTF/GFF3 format) is parsed to locate *superloci* of overlapping features on the **same strand**.\n2. The superloci\
    \ are divided into different *subloci*, each of which is defined as follows:\n\n    * For multiexonic transcripts, to belong to the same sublocus they must share at least a splicing junction (i.e. an\
    \ intron)\n    * For monoexonic transcripts, they must overlap for at least one base pair\n    * All subloci must contain either only multiexonic or only monoexonic transcripts\n3. In each sublocus,\
    \ the pipeline selects the best transcript according to a user-defined prioritization scheme.\n4. The resulting *monosubloci* are merged together, if applicable, into *monosubloci_holders*\n5. The best\
    \ non-overlapping transcripts are selected, in order to define the *loci* contained inside the superlocus.\n\n    * At this stage, monoexonic and multiexonic transcript are checked for overlaps\n  \
    \  * Moreover, two multiexonic transcripts are considered to belong to the same locus if they share a splice *site* (not junction)\n    \n6. Once the loci have been defined, the program backtracks and\
    \ looks for transcripts which can be assigned unambiguously to a single locus and constitute valid alternative splicing isoforms of the main transcripts. \n\nThe criteria used to select the \"*best*\"\
    \ transcript are left to the user's discretion, using specific configuration files."
  doc_url: 'http://mikado.readthedocs.io/en/latest/'
  dev_url: 'https://github.com/lucventurini/mikado'

extra:
  recipe-maintainers: 'Luca Venturini'
