--- eKLIPse-3606cb2edac983d2623ddc667b49206c3d01373c/eKLIPse.py	2022-02-03 14:22:07.000000000 +0000
+++ eKLIPse-3606cb2edac983d2623ddc667b49206c3d01373c/eKLIPse.py	2025-06-25 13:07:49.868607094 +0100
@@ -17,7 +17,7 @@ if "--nocolor" in sys.argv: boolColor =
 if "--qtgui" in sys.argv: boolQT = True ; boolColor = False
 if boolQT==False:
     os.system('cls' if os.name == 'nt' else 'clear')
-    printcolor("\n   ___              __   __   ___ \n  |__  |__/ |    | |__) /__` |__  \n  |___ |  \ |___ | |    .__/ |___ ","bold yellow",boolColor)
+    printcolor("\n   ___              __   __   ___ \n  |__  |__/ |    | |__) /__` |__  \n  |___ |  \\ |___ | |    .__/ |___ ","bold yellow",boolColor)
     printcolor("[v1-8]\n","yellow",boolColor)
 
 
@@ -113,4 +113,4 @@ printcolor(time.strftime('%d/%m/%y %H:%M
 (t_min, t_sec) = divmod(time.time()-dicoInit['startTime'],60)
 (t_hour,t_min) = divmod(t_min,60) 
 printcolor("    Run time           : ","bold green",boolColor)
-printcolor("{}h:{}m:{}s".format(int(t_hour),int(t_min),int(t_sec))+"\n\n","green",boolColor)
\ No newline at end of file
+printcolor("{}h:{}m:{}s".format(int(t_hour),int(t_min),int(t_sec))+"\n\n","green",boolColor)
--- eKLIPse-3606cb2edac983d2623ddc667b49206c3d01373c/tabulate.py	2025-06-25 13:09:23.173575389 +0100
+++ eKLIPse-3606cb2edac983d2623ddc667b49206c3d01373c/tabulate.py	2025-06-25 13:45:13.498941097 +0100
@@ -175,7 +175,7 @@ def _latex_line_begin_tabular(colwidths,
     alignment = { "left": "l", "right": "r", "center": "c", "decimal": "r" }
     tabular_columns_fmt = "".join([alignment.get(a, "l") for a in colaligns])
     return "\n".join(["\\begin{tabular}{" + tabular_columns_fmt + "}",
-                      "\\toprule" if booktabs else "\hline"])
+                      "\\toprule" if booktabs else "\\hline"])
 
 LATEX_ESCAPE_RULES = {r"&": r"\&", r"%": r"\%", r"$": r"\$", r"#": r"\#",
                       r"_": r"\_", r"^": r"\^{}", r"{": r"\{", r"}": r"\}",
@@ -193,7 +193,7 @@ def _latex_row(cell_values, colwidths, c
 
 def _rst_escape_first_column(rows, headers):
     def escape_empty(val):
-        if isinstance(val, (_text_type, _binary_type)) and val.strip() is "":
+        if isinstance(val, (_text_type, _binary_type)) and val.strip() == "":
             return ".."
         else:
             return val
@@ -340,7 +340,7 @@ tabulate_formats = list(sorted(_table_fo
 
 
 _invisible_codes = re.compile(r"\x1b\[\d+[;\d]*m|\x1b\[\d*\;\d*\;\d*m")  # ANSI color codes
-_invisible_codes_bytes = re.compile(b"\x1b\[\d+[;\d]*m|\x1b\[\d*\;\d*\;\d*m")  # ANSI color codes
+_invisible_codes_bytes = re.compile(r"\x1b\[\d+[;\d]*m|\x1b\[\d*\;\d*\;\d*m")  # ANSI color codes
 
 
 def simple_separated_format(separator):
@@ -1087,7 +1087,7 @@ def tabulate(tabular_data, headers=(), t
      spam &  41.9999 \\\\
      eggs & 451      \\\\
     \\bottomrule
-    \end{tabular}
+    \\end{tabular}
 
     Number parsing
     --------------
Only in ../eKLIPse-3606cb2edac983d2623ddc667b49206c3d01373c: tabulate.py~
