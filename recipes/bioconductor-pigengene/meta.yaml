{% set version = "1.8.0" %}
{% set name = "Pigengene" %}
{% set bioc = "3.8" %}

package:
  name: 'bioconductor-{{ name|lower }}'
  version: '{{ version }}'
source:
  url:
    - 'http://bioconductor.org/packages/{{ bioc }}/bioc/src/contrib/{{ name }}_{{ version }}.tar.gz'
    - 'https://bioarchive.galaxyproject.org/{{ name }}_{{ version }}.tar.gz'
    - 'https://depot.galaxyproject.org/software/bioconductor-{{ name|lower }}/bioconductor-{{ name|lower }}_{{ version }}_src_all.tar.gz'
  sha256: 065a4c7dc19bc1c056496338be2192c7e7758da4cce147b7f137d5e56ccf49f6
build:
  number: 0
  rpaths:
    - lib/R/lib/
    - lib/
requirements:
  host:
    - 'bioconductor-go.db >=3.7.0,<3.9.0'
    - 'bioconductor-graph >=1.60.0,<1.62.0'
    - 'bioconductor-impute >=1.56.0,<1.58.0'
    - 'bioconductor-preprocesscore >=1.44.0,<1.46.0'
    - 'bioconductor-rgraphviz >=2.26.0,<2.28.0'
    - r-base
    - r-bnlearn
    - 'r-c50 >=0.1.2'
    - r-mass
    - r-matrixstats
    - r-partykit
    - 'r-pheatmap >=1.0.8'
    - r-wgcna
  run:
    - 'bioconductor-go.db >=3.7.0,<3.9.0'
    - 'bioconductor-graph >=1.60.0,<1.62.0'
    - 'bioconductor-impute >=1.56.0,<1.58.0'
    - 'bioconductor-preprocesscore >=1.44.0,<1.46.0'
    - 'bioconductor-rgraphviz >=2.26.0,<2.28.0'
    - r-base
    - r-bnlearn
    - 'r-c50 >=0.1.2'
    - r-mass
    - r-matrixstats
    - r-partykit
    - 'r-pheatmap >=1.0.8'
    - r-wgcna
test:
  commands:
    - '$R -e "library(''{{ name }}'')"'
about:
  home: 'https://bioconductor.org/packages/{{ bioc }}/bioc/html/{{ name }}.html'
  license: 'GPL (>=2)'
  summary: 'Pigengene package provides an efficient way to infer biological signatures from gene expression profiles. The signatures are independent from the underlying platform, e.g., the input can be microarray or RNA Seq data. It can even infer the signatures using data from one platform, and evaluate them on the other. Pigengene identifies the modules (clusters) of highly coexpressed genes using coexpression network analysis, summarizes the biological information of each module in an eigengene, learns a Bayesian network that models the probabilistic dependencies between modules, and builds a decision tree based on the expression of eigengenes.'
