diff --git a/src/utils.h b/src/utils.h
index 835bee7..18a5463 100644
--- a/src/utils.h
+++ b/src/utils.h
@@ -1,7 +1,7 @@
 #ifndef UTILS_H
 #define UTILS_H
 
-#include <tr1/unordered_map>
+#include <unordered_map>
 #include <list>
 #include <string>
 #include <iomanip>
@@ -38,7 +38,7 @@ struct FragmentLengthContainer {
 
     uint transcript_length; 
     uint map_count;
-    tr1::unordered_map<uint,uint> fragment_lengths;
+    unordered_map<uint,uint> fragment_lengths;
 };
 
 struct FragmentAlignment {
@@ -101,7 +101,7 @@ struct CollapsedMap {
 
     Eigen::MatrixXd probability_matrix;
     vector<int> counts;
-    tr1::unordered_map<int,pair<int,double> > new_idx_to_old_idx_effective_length;
+    unordered_map<int,pair<int,double> > new_idx_to_old_idx_effective_length;
     int return_code;
    
 };
diff --git a/src/assembler.h b/src/assembler.h
index f8da1fa..6bbdc48 100644
--- a/src/assembler.h
+++ b/src/assembler.h
@@ -11,7 +11,7 @@
 #include <api/BamAux.h>
 #include <api/BamWriter.h>
 #include <map>
-#include <tr1/unordered_set>
+#include <unordered_set>
 
 
 #include <boost/functional/hash.hpp>
@@ -88,10 +88,10 @@ class Assembler {
         };
 
         typedef pair<BamTools::BamAlignment*, BamTools::BamAlignment*> ReadPair;
-        typedef tr1::unordered_map <ReadId, BamTools::BamAlignment*, ReadIdHasher> ReadIDs;
+        typedef unordered_map <ReadId, BamTools::BamAlignment*, ReadIdHasher> ReadIDs;
 
-        typedef map <uint, tr1::unordered_map <ReadId, BamTools::BamAlignment*, ReadIdHasher> > FirstReads;
-        typedef tr1::unordered_map <PairInfo, ReadPair, PairInfoHasher > ReadPairs;     
+        typedef map <uint, unordered_map <ReadId, BamTools::BamAlignment*, ReadIdHasher> > FirstReads;
+        typedef unordered_map <PairInfo, ReadPair, PairInfoHasher > ReadPairs;     
 
         typedef multimap <uint, BamTools::BamAlignment*> UniqueReads;
 
