diff --git a/docs/modules/goleft_indexcov.md b/docs/modules/goleft_indexcov.md
new file mode 100644
index 0000000..5bd0c9d
--- /dev/null
+++ b/docs/modules/goleft_indexcov.md
@@ -0,0 +1,13 @@
+---
+Name: goleft indexcov
+URL: https://github.com/brentp/goleft/tree/master/indexcov
+Description: >
+    Quickly estimate coverage from a whole-genome bam index, providing 16KB resolution.
+    This is useful as a quick QC to get coverage values across the genome.
+---
+
+The goleft indexcov module parses results generated by 
+[goleft indexcov](https://github.com/brentp/goleft/tree/master/indexcov),
+creating plots of coverage and regions covered by scaled depth. It requires
+post-processing goleft indexcov output to rename the generated `*-indexcov.bed.gz`
+files to `*-indexcov.tsv` for correct uptake by MultiQC.
diff --git a/multiqc/modules/goleft_indexcov/__init__.py b/multiqc/modules/goleft_indexcov/__init__.py
new file mode 100644
index 0000000..d212a1b
--- /dev/null
+++ b/multiqc/modules/goleft_indexcov/__init__.py
@@ -0,0 +1,3 @@
+from __future__ import absolute_import
+
+from .goleft_indexcov import MultiqcModule
diff --git a/multiqc/modules/goleft_indexcov/goleft_indexcov.py b/multiqc/modules/goleft_indexcov/goleft_indexcov.py
new file mode 100644
index 0000000..5e0b087
--- /dev/null
+++ b/multiqc/modules/goleft_indexcov/goleft_indexcov.py
@@ -0,0 +1,126 @@
+"""MultiQC module to plot output from goleft indexcov
+
+https://github.com/brentp/goleft/tree/master/indexcov
+"""
+from __future__ import print_function
+import collections
+import logging
+
+from multiqc import config
+from multiqc.plots import linegraph, scatter
+from multiqc.modules.base_module import BaseMultiqcModule
+
+# Initialise the logger
+log = logging.getLogger(__name__)
+
+class MultiqcModule(BaseMultiqcModule):
+    def __init__(self):
+        super(MultiqcModule, self).__init__(name='goleft indexcov', anchor='goleft_indexcov',
+                                            href='https://github.com/brentp/goleft/tree/master/indexcov',
+                                            info="quickly estimates coverage from a whole-genome bam index.")
+        cov_plot = self.coverage_plot()
+        roc_plot = self.roc_plot()
+        bin_plot = self.bin_plot()
+        if not cov_plot:
+            log.debug("Did not find goleft indexcov outputs in {}".format(config.analysis_dir))
+            raise UserWarning
+
+        self.sections = list()
+        if cov_plot:
+            self.sections.append({
+                'name': 'Read coverage',
+                'anchor': 'goleft_indexcov-coverage',
+                'content': cov_plot
+            })
+        if roc_plot:
+            self.sections.append({
+                'name': 'Scaled coverage ROC plot',
+                'anchor': 'goleft_indexcov-roc',
+                'content': roc_plot
+            })
+        if bin_plot:
+            self.sections.append({
+                'name': 'Problem coverage bins',
+                'anchor': 'goleft_indexcov-roc',
+                'content': bin_plot
+            })
+
+    def _short_chrom(self, chrom):
+        """Plot standard chromosomes + X, sorted numerically.
+        """
+        chrom = chrom.replace("chr", "")
+        try:
+            return int(chrom)
+        except ValueError:
+            if chrom in set(["X"]):
+                return chrom
+
+    def coverage_plot(self):
+        max_y = 2.5
+        data = collections.defaultdict(lambda: collections.defaultdict(dict))
+        for fn in self.find_log_files(config.sp["goleft_indexcov"]["coverage"], filehandles=True):
+            header = fn['f'].readline()
+            sample = header.strip().split()[-1]
+            for chrom, start, end, cov in (l.split() for l in fn['f']):
+                if self._short_chrom(chrom) is not None:
+                    data[chrom][sample][int(end) + int(start) // 2] = min(max_y, float(cov))
+
+        if data:
+            chroms = sorted(data.keys(), key=self._short_chrom)
+            pconfig = {
+                'id': 'goleft_indexcov-coverage-plot',
+                'title': 'Scaled coverage by chromosome',
+                'ylab': 'Scaled coverage',
+                'xlab': 'Position',
+                'ymin': 0,
+                'ymax': max_y,
+                'xDecimals': False,
+                'data_labels': [{"name": self._short_chrom(c)} for c in chroms]}
+            return linegraph.plot([data[c] for c in chroms], pconfig)
+
+    def roc_plot(self):
+        data = collections.defaultdict(lambda: collections.defaultdict(dict))
+        for fn in self.find_log_files(config.sp["goleft_indexcov"]["roc"], filehandles=True):
+            header = fn['f'].readline()
+            sample = header.strip().split()[-1]
+            for chrom, cov, val in (l.split() for l in fn['f']):
+                if self._short_chrom(chrom) is not None:
+                    data[chrom][sample][float(cov)] = float(val)
+        if data:
+            chroms = sorted(data.keys(), key=self._short_chrom)
+            pconfig = {
+                'id': 'goleft_indexcov-roc-plot',
+                'title': 'ROC: genome coverage per scaled depth by chromosome',
+                'xlab': 'Scaled coverage',
+                'xlab': 'Proportion of regions covered',
+                'ymin': 0, 'ymax': 1.0,
+                'xmin': 0, 'xmax': 1.5,
+                'data_labels': [{"name": self._short_chrom(c)} for c in chroms]}
+            return linegraph.plot([data[c] for c in chroms], pconfig)
+
+    def bin_plot(self):
+        desc = '<p>This plot identifies problematic samples using binned coverage distributions. \n\
+        We expect bins to be around 1, so deviations from this indicate problems. \n\
+        Low coverage bins (< 0.15) on the x-axis have regions with low or missing coverage. \n\
+        Higher values indicate truncated BAM files or missing data. \n\
+        Bins with skewed distributions (<0.85 or >1.15) on the y-axis detect dosage bias. \n\
+        Large values on the y-axis are likely to impact CNV and structural variant calling. \n\
+        See the \n\
+        <a href="https://github.com/brentp/goleft/blob/master/docs/indexcov/help-bin.md" target="_blank">goleft indexcov bin documentation</a> \n\
+        for more details.</p>'
+
+        data = {}
+        for fn in self.find_log_files(config.sp["goleft_indexcov"]["ped"], filehandles=True):
+            header = fn['f'].readline()[1:].strip().split("\t")
+            for sample_parts in (l.split("\t") for l in fn['f']):
+                cur = dict(zip(header, sample_parts))
+                data[cur["sample_id"]] =  {"x": int(cur["bins.lo"]),
+                                           "y": int(cur["bins.out"])}
+        if data:
+            pconfig = {
+                'id': 'goleft_indexcov-bin-plot',
+                'title': 'Problematic low and non-uniform coverage bins',
+                'xDecimals': False, 'yDecimals': False,
+                'xlab': 'Total bins with depth < 0.15',
+                'ylab': 'Total bins with depth outside of (0.85, 1.15)'}
+            return desc + scatter.plot(data, pconfig)
diff --git a/multiqc/utils/config_defaults.yaml b/multiqc/utils/config_defaults.yaml
index 01d21db..4554592 100644
--- a/multiqc/utils/config_defaults.yaml
+++ b/multiqc/utils/config_defaults.yaml
@@ -159,6 +159,7 @@ module_order:
     - 'picard'
     - 'preseq'
     - 'prokka'
+    - 'goleft_indexcov'
     - 'samblaster'
     - 'samtools'
     - 'bamtools'
diff --git a/multiqc/utils/search_patterns.yaml b/multiqc/utils/search_patterns.yaml
index af04c86..97859d0 100644
--- a/multiqc/utils/search_patterns.yaml
+++ b/multiqc/utils/search_patterns.yaml
@@ -52,6 +52,14 @@ featurecounts:
 gatk:
     varianteval:
         contents: '#:GATKReport'
+goleft_indexcov:
+    coverage:
+        fn: '*-indexcov.tsv'
+    roc:
+        fn: '*-indexcov.roc'
+    ped:
+        fn: '*-indexcov.ped'
+picard:
 htseq:
     contents: '__too_low_aQual'
 hicup:
diff --git a/setup.py b/setup.py
index f3b0a62..fee0af5 100755
--- a/setup.py
+++ b/setup.py
@@ -63,6 +63,7 @@
             'bowtie2 = multiqc.modules.bowtie2:MultiqcModule',
             'bowtie1 = multiqc.modules.bowtie1:MultiqcModule',
             'cutadapt = multiqc.modules.cutadapt:MultiqcModule',
+            'goleft_indexcov = multiqc.modules.goleft_indexcov:MultiqcModule',
             'fastq_screen = multiqc.modules.fastq_screen:MultiqcModule',
             'fastqc = multiqc.modules.fastqc:MultiqcModule',
             'featureCounts = multiqc.modules.featureCounts:MultiqcModule',
