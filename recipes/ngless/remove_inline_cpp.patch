diff --git a/NGLess/Interpretation/Count.hs b/NGLess/Interpretation/Count.hs
index 3633399..09f4b65 100644
--- a/NGLess/Interpretation/Count.hs
+++ b/NGLess/Interpretation/Count.hs
@@ -16,11 +16,12 @@ module Interpretation.Count
     , loadAnnotator
     , loadFunctionalMap
     , performCount
-    , RSV.RefSeqInfo(..)
+    , RefSeqInfo(..)
 #endif
     ) where
 
 import qualified Data.ByteString as B
+import qualified Data.ByteString.Short as BS
 import qualified Data.ByteString.Char8 as B8
 import qualified Data.ByteString.Builder as BB
 import qualified Data.ByteString.Lazy as BL
@@ -28,6 +29,7 @@ import qualified Data.Text as T
 import qualified Data.Text.Encoding as T
 
 import qualified Data.Vector as V
+import qualified Data.Vector.Mutable as VM
 import qualified Data.Vector.Unboxed as VU
 import qualified Data.Vector.Unboxed.Mutable as VUM
 import qualified Data.Vector.Algorithms.Intro as VA
@@ -37,6 +39,7 @@ import qualified Data.Map.Strict as M
 import qualified Data.Set as S
 
 import qualified Data.Conduit as C
+import qualified Data.Conduit.Combinators as C
 import qualified Data.Conduit.Combinators as CC
 import qualified Data.Conduit.Binary as CB
 import qualified Data.Conduit.List as CL
@@ -74,7 +77,6 @@ import Utils.Vector
 import Utils.Conduit
 import Utils.Suggestion
 import qualified Utils.IntGroups as IG
-import qualified Interpretation.Count.RefSeqInfoVector as RSV
 
 #ifndef WINDOWS
 import Data.Double.Conversion.ByteString (toShortest)
@@ -129,10 +131,37 @@ data CountOpts =
 data AnnotationMode = AnnotateSeqName | AnnotateGFF FilePath | AnnotateFunctionalMap FilePath
     deriving (Eq, Show)
 
+
+data RefSeqInfo = RefSeqInfo
+                        { rsiName :: {-# UNPACK #-} !BS.ShortByteString
+                        , rsiSize :: {-# UNPACK #-} !Double
+                        } deriving (Eq, Show)
+instance NFData RefSeqInfo where
+    rnf !_ = ()
+
+instance Ord RefSeqInfo where
+    compare RefSeqInfo{ rsiName = n0 } RefSeqInfo{ rsiName = n1 } = compare n0 n1
+
+
+compareShortLong  :: RefSeqInfo -> B.ByteString -> Ordering
+compareShortLong (RefSeqInfo short _) long = loop 0
+    where
+        n1 = BS.length short
+        n2 = B.length long
+        n = min n1 n2
+        loop i
+            | i == n = compare n1 n2
+            | otherwise = let cur = compare (BS.index short i) (B.index long i) in
+                                if cur == EQ
+                                    then loop (i + 1)
+                                    else cur
+
+
 data Annotator =
-                SeqNameAnnotator (Maybe RSV.RefSeqInfoVector) -- ^ Just annotate by sequence names
+                SeqNameAnnotator (Maybe (V.Vector RefSeqInfo)) -- ^ Just annotate by sequence names
                 | GFFAnnotator GFFAnnotationMap [B.ByteString] FeatureSizeMap -- ^ map reference regions to features + feature sizes
-                | GeneMapAnnotator GeneMapAnnotation RSV.RefSeqInfoVector -- ^ map reference (gene names) to indices, indexing into the vector of refseqinfo
+                | GeneMapAnnotator GeneMapAnnotation (V.Vector RefSeqInfo) -- ^ map reference (gene names) to indices, indexing into the vector of refseqinfo
+    deriving (Eq, Show)
 instance NFData Annotator where
     rnf (SeqNameAnnotator m) = rnf m
     rnf (GFFAnnotator amap headers szmap) = amap `seq` rnf headers `seq` rnf szmap -- amap is already strict
@@ -148,9 +177,9 @@ annotateReadGroup opts ann samlines = add1 . listNub <$> case ann of
         -- this is because "unmatched" is -1
         add1 [] = [0]
         add1 vs = (+ 1) <$> vs
-        getID :: RSV.RefSeqInfoVector -> SamLine -> Either NGError (Maybe Int)
+        getID :: V.Vector RefSeqInfo -> SamLine -> Either NGError (Maybe Int)
         getID szmap sr@SamLine{samRName = rname }
-            | isAligned sr = case RSV.lookup szmap rname of
+            | isAligned sr = case binarySearchByExact compareShortLong szmap rname of
                     Nothing -> throwDataError ("Unknown sequence id: " ++ show rname)
                     ix -> return ix
         getID _ _ = Right Nothing
@@ -165,7 +194,7 @@ annSizeOf (GFFAnnotator _ _ szmap) name = case M.lookup name szmap of
     Just s -> return s
     Nothing -> throwShouldNotOccur ("Header does not exist in sizes: "++show name)
 annSizeOf (GeneMapAnnotator _ ix) name = annSizeOfInRSVector name ix
-annSizeOfInRSVector name vec = RSV.retrieveSize vec <$> note (NGError DataError $ "Could not find size of item ["++B8.unpack name++"]") (RSV.lookup vec name)
+annSizeOfInRSVector name ix = rsiSize <$> note (NGError DataError $ "Could not find size of item ["++B8.unpack name++"]") (binaryFindBy compareShortLong ix name)
 
 
 annEnumerate :: Annotator -> [(B.ByteString, Int)]
@@ -173,12 +202,12 @@ annEnumerate (SeqNameAnnotator Nothing)   = error "Using unfinished annotator"
 annEnumerate (SeqNameAnnotator (Just ix)) = ("-1",0):enumerateRSVector ix
 annEnumerate (GeneMapAnnotator _ ix)      = ("-1",0):enumerateRSVector ix
 annEnumerate (GFFAnnotator _ headers _)   = zip ("-1":headers) [0..]
-enumerateRSVector rfv = [(RSV.retrieveName rfv i, i + 1) | i <- [0.. RSV.length rfv - 1]]
+enumerateRSVector ix = V.toList . flip V.imap ix $ \i rs -> (BS.fromShort $ rsiName rs, i + 1)
 
 -- Number of elements
 annSize :: Annotator -> Int
-annSize (SeqNameAnnotator (Just rfv)) = RSV.length rfv + 1
-annSize (GeneMapAnnotator _ rfv) = RSV.length rfv + 1
+annSize (SeqNameAnnotator (Just ix)) = V.length ix + 1
+annSize (GeneMapAnnotator _ ix) = V.length ix + 1
 annSize ann = length (annEnumerate ann)
 
 
@@ -302,8 +331,8 @@ performCount1Pass MMDist1 mcounts = loop []
                                 else acc
 
 -- | Equivalent to Python's enumerate
-enumerateC :: (Monad m) => C.Conduit a m (Int, a)
-enumerateC = loop 0
+enumerate :: (Monad m) => C.Conduit a m (Int, a)
+enumerate = loop 0
     where
         loop !n = C.await >>= \case
                                 Nothing -> return ()
@@ -323,25 +352,24 @@ annSamHeaderParser :: Int -> [Annotator] -> CountOpts -> C.Sink ByteLine NGLessI
 annSamHeaderParser mapthreads anns opts = lineGroups =$= sequenceSinks (map annSamHeaderParser1 anns)
     where
         annSamHeaderParser1 (SeqNameAnnotator Nothing) = do
-            rfvm <- liftIO RSV.newRefSeqInfoVector
-            asyncMapEitherC mapthreads (\(!vi, v) -> V.imapM (\ix ell -> seqNameSize (vi*32768+ix, ell)) v)
-                .| CL.mapM_ (\v -> liftIO $
-                                    V.forM_ v $ \(RSV.RefSeqInfo n val) ->
-                                        RSV.insert rfvm n val)
+            headers <-
+                asyncMapEitherC mapthreads (\(!vi,v) -> V.imapM (\ix ell -> seqNameSize (vi*32768+ix, ell)) v)
+                .| CC.sinkList
             vsorted <- liftIO $ do
-                RSV.sort rfvm
-                RSV.unsafeFreeze rfvm
+                v <- V.unsafeThaw $ V.concat headers
+                sortParallel mapthreads v
+                V.unsafeFreeze v
             return $! SeqNameAnnotator (Just vsorted)
         annSamHeaderParser1 (GeneMapAnnotator gmap isizes)
             | optNormMode opts == NMNormed = do
-                msizes <- liftIO $ RSV.unsafeThaw isizes
+                msizes <- liftIO $ V.thaw isizes
                 asyncMapEitherC mapthreads (\(!vi,headers) -> flattenVs <$> V.imapM (\ix ell -> indexUpdates gmap (vi*32768+ix, ell)) headers)
                     .| CL.mapM_ (liftIO . updateSizes msizes)
-                GeneMapAnnotator gmap <$> liftIO (RSV.unsafeFreeze msizes)
-        annSamHeaderParser1 ann = CC.sinkNull >> return ann
+                GeneMapAnnotator gmap <$> liftIO (V.unsafeFreeze msizes)
+        annSamHeaderParser1 ann = C.sinkNull >> return ann
         lineGroups = CL.filter (B.isPrefixOf "@SQ\tSN:" . unwrapByteLine)
-                    .| CC.conduitVector 32768
-                    .| enumerateC
+                    .| C.conduitVector 32768
+                    .| enumerate
         flattenVs :: VU.Unbox a => V.Vector [a] -> VU.Vector a
         flattenVs chunks = VU.unfoldr getNext (0,[])
             where
@@ -350,21 +378,21 @@ annSamHeaderParser mapthreads anns opts = lineGroups =$= sequenceSinks (map annS
                     | vi >= V.length chunks = Nothing
                     | otherwise = getNext (vi + 1, chunks V.! vi)
 
-        updateSizes :: RSV.RefSeqInfoVectorMutable -> VU.Vector (Int,Double) -> IO ()
+        updateSizes :: VM.IOVector RefSeqInfo -> VU.Vector (Int,Double) -> IO ()
         updateSizes msizes updates =
-            VU.forM_ updates $ \(ix,val) -> do
-                cur <- RSV.retrieveSizeIO msizes ix
-                RSV.writeSizeIO msizes ix (cur + val)
+            VU.forM_ updates $ \(ix,val) ->
+                VM.modify msizes (rsiAdd val) ix
+        rsiAdd !val rsi@RefSeqInfo{ rsiSize = cur } = rsi { rsiSize = cur + val }
 
         indexUpdates :: GeneMapAnnotation -> (Int, ByteLine) -> NGLess [(Int, Double)]
         indexUpdates gmap line = do
-            RSV.RefSeqInfo seqid val <- seqNameSize line
-            let ixs = fromMaybe [] $ M.lookup seqid gmap
+            RefSeqInfo seqid val <- seqNameSize line
+            let ixs = fromMaybe [] $ M.lookup (BS.fromShort seqid) gmap
             return [(ix,val) | ix <- ixs]
-        seqNameSize :: (Int, ByteLine) -> NGLess RSV.RefSeqInfo
+        seqNameSize :: (Int, ByteLine) -> NGLess RefSeqInfo
         seqNameSize (n, ByteLine h) = case B8.split '\t' h of
                 [_,seqname,sizestr] -> case B8.readInt (B.drop 3 sizestr) of
-                    Just (size, _) -> return $! RSV.RefSeqInfo (B.drop 3 seqname) (convert size)
+                    Just (size, _) -> return $! RefSeqInfo (BS.toShort $ B.drop 3 seqname) (convert size)
                     Nothing -> throwDataError ("Could not parse sequence length in header (line: " ++ show n ++ ")")
                 _ -> throwDataError ("SAM file does not contain the right number of tokens (line: " ++ show n ++ ")")
 
@@ -539,14 +567,14 @@ loadFunctionalMap fname columns = do
         anns <- C.runConduit $
                     CB.sourceFile fname
                     .| CB.lines
-                    .| enumerateC
+                    .| enumerate
                     .| (do
                         hline <- CL.head
                         cis <- case hline of
                             Nothing -> throwDataError ("Empty map file: "++fname)
                             Just (_, header) -> let headers = B8.split '\t' header
                                                     in runNGLess $ lookUpColumns headers
-                        CC.conduitVector 8192
+                        C.conduitVector 8192
                             .| asyncMapEitherC mapthreads (V.mapM (selectColumns cis)) -- after this we have vectors of (<gene name>, [<feature-name>])
                             .| sequenceSinks
                                 [finishFunctionalMap <$> CL.fold (V.foldl' (inserts1 c)) (LoadFunctionalMapState 0 M.empty M.empty) | c <- [0 .. length cis - 1]])
@@ -555,7 +583,7 @@ loadFunctionalMap fname columns = do
     where
         finishFunctionalMap (LoadFunctionalMapState _ gmap namemap) = GeneMapAnnotator
                                                                             (reindex gmap namemap)
-                                                                            (RSV.fromList [RSV.RefSeqInfo n 0.0 | n <- M.keys namemap])
+                                                                            (V.fromList [RefSeqInfo (BS.toShort n) 0.0 | n <- M.keys namemap])
         reindex :: M.Map B.ByteString [Int] -> M.Map B.ByteString Int -> M.Map B.ByteString [Int]
         reindex gmap namemap = M.map (map reindex1) gmap
             where
diff --git a/NGLess/Interpretation/Count/RefSeqInfoVector.h b/NGLess/Interpretation/Count/RefSeqInfoVector.h
deleted file mode 100644
index 162a142..0000000
--- a/NGLess/Interpretation/Count/RefSeqInfoVector.h
+++ /dev/null
@@ -1,71 +0,0 @@
-#include <vector>
-#include <string>
-#include <cstring>
-#include <algorithm>
-
-const unsigned block_size = 8192 - 64; // 64 is for padding
-struct PoolC {
-    PoolC():free_(0) { }
-    ~PoolC() {
-        for (std::vector<void*>::iterator it = data_.begin(), past = data_.end(); it != past; ++it) {
-            operator delete(*it);
-        }
-    }
-    const char* strdup(const char* input) {
-        const int len = std::strlen(input) + 1;
-        if (len > block_size) {
-            char* n = static_cast<char*>(operator new(len));
-            std::strcpy(n, input);
-            data_.push_back(n);
-            free_ = 0;
-            return n;
-        }
-        if (len > free_) {
-            data_.push_back(operator new(block_size));
-            free_ = block_size;
-        }
-        char* r = static_cast<char*>(data_.back());
-        r += block_size - free_;
-        std::strcpy(r, input);
-        free_ -= len;
-        return r;
-    }
-    private:
-
-    std::vector<void*> data_;
-    int free_;
-};
-
-
-struct RefSeqInfo {
-    RefSeqInfo(const char* s, double v)
-        :str(s)
-        ,val(v) { }
-    bool operator <(const RefSeqInfo& rhs) const { return strcmp(str, rhs.str) < 0; }
-    const char* str;
-    double val;
-};
-
-
-struct RefSeqInfoVector {
-    RefSeqInfoVector() { }
-    ~RefSeqInfoVector() { }
-    void insert(std::string f, double v) {
-        data_.push_back(RefSeqInfo(strdup(f.c_str()), v));
-    }
-   RefSeqInfo& at(int ix) { return data_.at(ix); }
-   int find(const char* f) {
-       std::vector<RefSeqInfo>::const_iterator it = std::lower_bound(data_.begin(), data_.end(), RefSeqInfo(f, 0));
-       if (it == data_.end() || strcmp(it->str, f)) { return -1; }
-       return it - data_.begin();
-   }
-   void sort() { std::sort(data_.begin(), data_.end()); }
-   unsigned size() const { return data_.size(); }
-   std::vector<RefSeqInfo> data_;
-   PoolC pool_;
-};
-
-extern "C" {
-    void* rsiv_free(void* p) { delete static_cast<RefSeqInfoVector*>(p); }
-}
-
diff --git a/NGLess/Interpretation/Count/RefSeqInfoVector.hs b/NGLess/Interpretation/Count/RefSeqInfoVector.hs
deleted file mode 100644
index e7489ca..0000000
--- a/NGLess/Interpretation/Count/RefSeqInfoVector.hs
+++ /dev/null
@@ -1,123 +0,0 @@
-{-# LANGUAGE TemplateHaskell, QuasiQuotes #-}
-{- Copyright 2013-2018 NGLess Authors
- - License: MIT
- -}
-
-module Interpretation.Count.RefSeqInfoVector
-    ( RefSeqInfo(..)
-    , RefSeqInfoVectorMutable
-    , RefSeqInfoVector
-    , fromList
-    , newRefSeqInfoVector
-    , insert
-    , sort
-    , unsafeFreeze
-    , unsafeThaw
-    , lookup
-    , retrieveSize
-    , retrieveSizeIO
-    , retrieveName
-    , length
-    , writeSizeIO
-    ) where
-
-import           Prelude hiding (length, lookup)
-import           Data.Monoid ((<>))
-import           Foreign.C.Types
-import           Control.DeepSeq (NFData(..))
-import           Control.Monad (forM_)
-import qualified Data.ByteString as B
-
-
-import           Foreign.Ptr
-import           Foreign.ForeignPtr
-import           System.IO.Unsafe (unsafeDupablePerformIO)
-import qualified Language.C.Inline.Context as C
-import qualified Language.C.Inline.Unsafe as CU
-import qualified Language.C.Inline.Cpp as C
-import qualified Language.C.Inline.Cpp.Exceptions as C
-
-
-foreign import ccall "&rsiv_free" c_rsiv_free :: FunPtr (Ptr () -> IO ())
-
-C.context (C.baseCtx <> C.bsCtx <> C.fptrCtx <> C.cppCtx)
-C.include "RefSeqInfoVector.h"
-
-data RefSeqInfo = RefSeqInfo
-                        { rsiName :: {-# UNPACK #-} !B.ByteString
-                        , rsiSize :: {-# UNPACK #-} !Double
-                        } deriving (Eq, Show)
-instance NFData RefSeqInfo where
-    rnf !_ = ()
-
-instance Ord RefSeqInfo where
-    compare RefSeqInfo{ rsiName = n0 } RefSeqInfo{ rsiName = n1 } = compare n0 n1
-
-
-newtype RefSeqInfoVectorMutable = RefSeqInfoVectorMutable (ForeignPtr ())
-newtype RefSeqInfoVector = RefSeqInfoVector (ForeignPtr ())
-
-instance NFData RefSeqInfoVector where
-    rnf (RefSeqInfoVector !_) = ()
-
-newRefSeqInfoVector :: IO RefSeqInfoVectorMutable
-newRefSeqInfoVector = do
-    p <- C.withPtr_ $ \r ->
-        [C.catchBlock| { *( $(void** r) ) = new RefSeqInfoVector; }|]
-    RefSeqInfoVectorMutable <$> newForeignPtr c_rsiv_free (p :: Ptr ())
-
-insert :: RefSeqInfoVectorMutable -> B.ByteString -> Double -> IO ()
-insert (RefSeqInfoVectorMutable p) bs val = do
-        let val' :: CDouble
-            val' = CDouble val
-        [C.catchBlock| { static_cast<RefSeqInfoVector*>($fptr-ptr:(void* p))->insert(std::string($bs-ptr:bs, $bs-len:bs), $(double val')); } |]
-
-sort :: RefSeqInfoVectorMutable -> IO ()
-sort (RefSeqInfoVectorMutable p) = [CU.block| void {
-            RefSeqInfoVector* vec = static_cast<RefSeqInfoVector*>($fptr-ptr:(void* p));
-            vec->sort();
-    }|]
-
-unsafeFreeze :: RefSeqInfoVectorMutable -> IO RefSeqInfoVector
-unsafeFreeze (RefSeqInfoVectorMutable v) = return $ RefSeqInfoVector v
-
-unsafeThaw :: RefSeqInfoVector -> IO RefSeqInfoVectorMutable
-unsafeThaw (RefSeqInfoVector v) = return $ RefSeqInfoVectorMutable v
-
-lookup :: RefSeqInfoVector -> B.ByteString -> Maybe Int
-lookup (RefSeqInfoVector p) key = let
-    CInt ix = [CU.pure| int { static_cast<RefSeqInfoVector*>($fptr-ptr:(void* p))->find(std::string($bs-ptr:key, $bs-len:key).c_str()) } |]
-    in if ix == -1
-        then Nothing
-        else Just (fromEnum ix)
-
-retrieveSize :: RefSeqInfoVector -> Int -> Double
-retrieveSize (RefSeqInfoVector r) ix = unsafeDupablePerformIO (retrieveSizeIO (RefSeqInfoVectorMutable r) ix)
-
-retrieveSizeIO :: RefSeqInfoVectorMutable -> Int -> IO Double
-retrieveSizeIO (RefSeqInfoVectorMutable p) ix = do
-    let ix' = toEnum ix
-    CDouble val <- [CU.exp| double { static_cast<RefSeqInfoVector*>($fptr-ptr:(void* p))->at($(int ix')).val } |]
-    return val
-
-writeSizeIO :: RefSeqInfoVectorMutable -> Int -> Double -> IO ()
-writeSizeIO (RefSeqInfoVectorMutable p) ix val = do
-    let val' = CDouble val
-        ix' = toEnum ix
-    [C.catchBlock| { static_cast<RefSeqInfoVector*>($fptr-ptr:(void* p))->at($(int ix')).val = $(double val'); } |]
-
-length :: RefSeqInfoVector -> Int
-length (RefSeqInfoVector p) =
-    fromEnum [CU.pure| unsigned int { static_cast<RefSeqInfoVector*>($fptr-ptr:(void* p))->size() } |]
-
-retrieveName :: RefSeqInfoVector -> Int -> B.ByteString
-retrieveName (RefSeqInfoVector p) ix = unsafeDupablePerformIO $ do
-    let ix' = toEnum ix
-    [CU.exp| const char* {static_cast<RefSeqInfoVector*>($fptr-ptr:(void* p))->at($(int ix')).str } |] >>= B.packCString
-
-fromList :: [RefSeqInfo] -> RefSeqInfoVector
-fromList entries = unsafeDupablePerformIO $ do
-    r <- newRefSeqInfoVector
-    forM_ entries $ \(RefSeqInfo n v) -> insert r n v
-    sort r
-    unsafeFreeze r
diff --git a/Tests-Src/Tests/Count.hs b/Tests-Src/Tests/Count.hs
index dcbf222..19e0dd2 100644
--- a/Tests-Src/Tests/Count.hs
+++ b/Tests-Src/Tests/Count.hs
@@ -11,6 +11,7 @@ import qualified Data.IntervalMap.Strict as IM
 import qualified Data.Set as S
 import qualified Data.ByteString as B
 import qualified Data.ByteString.Char8 as B8
+import qualified Data.Vector as V
 import qualified Data.Map as M
 
 import qualified Data.Conduit.Combinators as C
@@ -24,7 +25,6 @@ import Control.Monad.IO.Class (liftIO)
 import Data.Maybe
 
 import Interpretation.Count
-import qualified Interpretation.Count.RefSeqInfoVector as RSV
 import FileOrStream (FileOrStream(..))
 import Tests.Utils
 import Utils.Here
@@ -210,18 +210,6 @@ case_gff_dist1_dist1_to_4 = do
     c <- testNGLessIO $ runSamGffAnnotation samAmbiguous3 gff1 defCountOpts { optFeatures  = ["gene"], optMMMethod = MMDist1 }
     c @?= M.fromList [("Gene100", 3.75), ("Gene300", 1.25)]
 
-case_rsv_1 = do
-    v <- RSV.newRefSeqInfoVector
-    RSV.insert v (B.take 5 "hello SLICE") 1.0 
-    RSV.insert v "world" 2.0 
-    RSV.sort v
-    fv <- RSV.unsafeFreeze v
-    RSV.length fv @?= 2
-    RSV.lookup fv "hello" @?= Just 0
-    RSV.lookup fv (B.take 5 "hello SLICE2") @?= Just 0
-    RSV.retrieveSize fv 0 @?= 1.0
-    RSV.lookup fv "world" @?= Just 1
-
 
 simple_map = [here|
 #gene	cog	ko	module
@@ -234,4 +222,4 @@ case_load_map = do
         map_fp <- asTempFile simple_map "map"
         loadFunctionalMap map_fp ["ko"]
     let Just [ix] = M.lookup "gene1" nmap
-    RSV.retrieveName names ix @?= "NA"
+    rsiName (names V.! ix) @?= "NA"
diff --git a/package.yaml b/package.yaml
index 04b2a09..0161e53 100644
--- a/package.yaml
+++ b/package.yaml
@@ -49,8 +49,6 @@ dependencies:
   - http-conduit
   - http-client
   - IntervalMap >=0.5
-  - inline-c
-  - inline-c-cpp
   - monad-control
   - mtl >=2.2
   - MissingH >=1.3
