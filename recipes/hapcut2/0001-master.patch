diff --git a/hairs-src/extracthairs.c b/hairs-src/extracthairs.c
index b0d9dcf..3c3eeab 100644
--- a/hairs-src/extracthairs.c
+++ b/hairs-src/extracthairs.c
@@ -85,12 +85,13 @@ Align_Params* AP; // global alignmnet params
 //#include "samhairs.c" // has two functions that handle sam file parsing
 
 void print_options();
-int parse_bamfile_sorted(char* bamfile, HASHTABLE* ht, CHROMVARS* chromvars, VARIANT* varlist, REFLIST* reflist,char* regions);
+int parse_bamfile_sorted(char* bamfile, HASHTABLE* ht, CHROMVARS* chromvars, VARIANT* varlist, REFLIST* reflist,char* regions,char* fastafilename);
 
 void print_options() {
-	fprintf(stderr, "\nExtract haplotype informative reads (HAIRS) from coordinate sorted BAM files \n\n");
+	fprintf(stderr, "\nExtract haplotype informative reads (HAIRS) from coordinate sorted BAM/CRAM files (for a single individual) \n\n");
 	fprintf(stderr, "./extractHAIRS [options] --bam reads.sorted.bam --VCF variants.VCF --out fragment_file \n\n");
 	fprintf(stderr, "Options:\n");
+	fprintf(stderr, "--bam BAM/CRAM : sorted and indexed BAM/CRAM file; the option can be used more than once to specify multiple files for the same sample \n");
 	fprintf(stderr, "--qvoffset <33/64> : quality value offset, 33/64 depending on how quality values were encoded, default is 33 \n");
 	fprintf(stderr, "--mbq <INT> : minimum base quality to consider a base for haplotype fragment, default 13\n");
 	fprintf(stderr, "--mmq <INT> : minimum read mapping quality to consider a read for phasing, default 20\n");
@@ -108,7 +109,7 @@ void print_options() {
 	fprintf(stderr, "--indels <0/1> : extract reads spanning INDELS, default is 0, variants need to specified in VCF format to use this option\n");
 	fprintf(stderr, "--noquality <INTEGER> : if the bam file does not have quality string, this value will be used as the uniform quality value, default 0 \n");
 	fprintf(stderr,"--triallelic <0/1> : include variants with genotype 1/2 for parsing, default 0 \n");
-	fprintf(stderr, "--ref <FILENAME> : reference sequence file (in fasta format, gzipped is okay), optional but required for indels, should be indexed\n");
+	fprintf(stderr, "--ref <FILENAME> : reference sequence file (in fasta format, gzipped is okay), optional but required for indels and CRAM files, should be indexed\n");
 	fprintf(stderr, "--out <FILENAME> : output filename for haplotype fragments, if not provided, fragments will be output to stdout\n");
 	fprintf(stderr, "--region <chr:start-end> : chromosome and region in BAM file, useful to process individual chromosomes or genomic regions \n");
 	fprintf(stderr, "--ep <0/1> : set to 1 to estimate HMM parameters from aligned reads (only with long reads), default = 1\n");
@@ -126,8 +127,8 @@ void check_input_0_or_1(char* x){
 // extract haplotype informative reads from sorted bam file //
 // need to discard reads that are marked as duplicates using flag //
 
-int parse_bamfile_sorted(char* bamfile, HASHTABLE* ht, CHROMVARS* chromvars, VARIANT* varlist, REFLIST* reflist,char* regions) {
-	fprintf(stderr, "reading sorted bamfile %s \n", bamfile);
+int parse_bamfile_sorted(char* bamfile, HASHTABLE* ht, CHROMVARS* chromvars, VARIANT* varlist, REFLIST* reflist,char* regions,char* fastafile) {
+	fprintf(stderr, "reading sorted bam/cram file %s \n", bamfile);
 	int reads = 0;
 	struct alignedread* read = (struct alignedread*) malloc(sizeof (struct alignedread));
 
@@ -155,17 +156,45 @@ int parse_bamfile_sorted(char* bamfile, HASHTABLE* ht, CHROMVARS* chromvars, VAR
     int ret; // for reading indexed bam files 
     hts_idx_t *idx; // bam file index
     hts_itr_t *iter = NULL;
+    int is_cram_file = 0;
     
     if ((fp = sam_open(bamfile, "r")) == NULL) {
         fprintf(stderr, "Fail to open BAM file %s\n", bamfile);
         return -1;
     }
+    if (fp->format.format == cram) 
+    {
+            is_cram_file=1;
+	    fprintf(stderr,"cram file detected, make sure fasta file matches the cram file header\n");
+	    if (strcmp(fastafile,"None") ==0 || hts_set_opt(fp,CRAM_OPT_REFERENCE,fastafile) < 0) 
+	    {
+		    fprintf(stderr,"failed to set fasta reference file\n");
+		    return 1;
+	    }
+    }
     if ((hdr = sam_hdr_read(fp)) == NULL) {
         fprintf(stderr, "Fail to read header from file %s\n", bamfile);
         sam_close(fp);
         return -1;
     }
-    if (regions != NULL &&  (idx = bam_index_load(bamfile)) ==0) { fprintf(stderr,"unable to load bam index for file %s\n",bamfile); return -1; }
+
+    // read index of bam/cram file if regions != NULL
+    if (is_cram_file ==0 && regions != NULL &&  (idx = bam_index_load(bamfile)) ==0) 
+    { 
+	    fprintf(stderr,"unable to load bam index for file %s\n",bamfile); 
+            sam_close(fp);
+	    return -1; 
+    }
+    else if (is_cram_file ==1 && regions != NULL) // load index for cram file 
+    {
+	idx = sam_index_load(fp,strcat(bamfile,".crai"));
+	if (idx ==0) 
+	{
+		fprintf(stderr,"unable to load index for cram file %s\n",bamfile);
+		return -1;
+	}
+    }
+
     if (regions == NULL) b = bam_init1();  // sam_read1(fp,hdr,b)
     else 
     {
@@ -497,7 +526,7 @@ int main(int argc, char** argv) {
 	if (readsorted == 0 && bamfiles > 0) {
 		for (i = 0; i < bamfiles; i++) {
 			int parse_ok = 0;
-			if (LONG_READS == 0) parse_ok = parse_bamfile_sorted(bamfilelist[i], &ht, chromvars, varlist, reflist,regions);
+			if (LONG_READS == 0) parse_ok = parse_bamfile_sorted(bamfilelist[i], &ht, chromvars, varlist, reflist,regions,fastafile);
 			//else parse_ok = parse_bamfile_fosmid(bamfilelist[i], &ht, chromvars, varlist, reflist); // fosmid pool bam file
 			if (parse_ok != 0) return parse_ok;
 		}
