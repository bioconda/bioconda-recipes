#!/bin/bash -e

# Function to print usage
usage() {
    echo USAGE:
    echo "kosudoku-poolanalyze [--row_pools A,B,C] [--col_pools 1,2,3] [--ctrl_pools SoG,Blank] --grid_layout <path> --pool_presence_table <path>"
}


VALID_ARGS=$(getopt -o r:c:t:g:p:h --long row_pools:,col_pools:,ctrl_pools:,grid_layout:,pool_presence_table,help -- "$@")
if [[ $? -ne 0 ]]; then
    usage
    exit 1;
fi

eval set -- "$VALID_ARGS"
while [ : ]; do
  case "$1" in
    -r | --row_pools)
        row_pools=$2
        shift 2
        ;;
    -c | --col_pools)
        col_pools=$2
        shift 2
        ;;
    -t | --ctrl_pools)
        ctrl_pools=$2
        shift 2
        ;;
    -g | --grid_layout)
        grid_layout=$2
        shift 2
        ;;
    -p | --pool_presence_table)
        pool_presence_table=$2
        shift 2
        ;;
    -h | --help)
        usage
        exit 0
        ;;
    --) shift; 
        break
        ;;
  esac
done


# Create a temporary folder for intermediate output
tmp_folder=${tmp_dir:-/tmp}/kosudoku-$(date | tr ' ' '_')-$RANDOM
mkdir -p $tmp_folder

job_file=$tmp_folder/config.inp
touch $job_file

# Generate the job file following the original repository's format.
# Input data
echo "rowPools = ${row_pools:-A,B,C,D,E,F,G,H}" >> $job_file
echo "colPools = ${col_pools:-1,2,3,4,5,6,7,8,9,10,11,12}" >> $job_file
echo "controlPools = ${ctrl_pools:-SoG,pta,Blank}" >> $job_file

echo "sudokuGridLayout = ${grid_layout:?input parameter undefined}" >> $job_file
echo "poolPresenceTableFileName = ${pool_presence_table:?input parameter undefined}" >> $job_file

echo "readCountThresholdForInclusionInReadCountThresholds = 1" >> $job_file
echo "startReadCountThresholdForTrialSolution = 1" >> $job_file
echo "endReadCountThresholdForTrialSolution = 2" >> $job_file
echo "readCountThresholdForReadCountRatioHistogramCalculation = 5" >> $job_file

# Output data
echo "poolPresenceTaxonomyTableFileName = ./pool_presence_table.csv" >> $job_file


# Run the script from the package
python "$CONDA_PREFIX/share/kosudoku/kosudoku-poolanalyze" $job_file


# Delete the temporary data folder after successful tool execution.
rm -r $tmp_folder


