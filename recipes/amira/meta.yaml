{% set version = "0.8.0" %}
{% set name = "Amira" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://github.com/Danderson123/{{ name }}/archive/refs/tags/v{{ version }}.tar.gz
  sha256: 46af33fab66ce18c8b9f950531b94fd4253a58e88af9a4d3db8dc553aa6e12a8

build:
  number: 0
  script:
    - |
      git clone --single-branch https://github.com/rmcolq/pandora.git --recursive
      cd pandora
      git checkout f7e06605d54981edbeebd8935bd1a6fd47a31fbc
      set -eux -o pipefail

      # make compilation not be dependent on locale settings
      export LC_ALL=C

      # allows boost to find the correct build toolset in Linux
      BIN_DIR=$(which x86_64-conda-linux-gnu-gcc)
      BIN_DIR="$(dirname "${BIN_DIR}")"
      cp "${BIN_DIR}/x86_64-conda-linux-gnu-gcc" "${BIN_DIR}/gcc"
      cp "${BIN_DIR}/x86_64-conda-linux-gnu-g++" "${BIN_DIR}/g++"

      # build pandora
      mkdir -p build
      cd build
      cmake -DBIOCONDA=True \
            -DCMAKE_BUILD_TYPE=Release \
            -DHUNTER_JOBS_NUMBER=4 \
            -DCMAKE_INSTALL_PREFIX="$PREFIX" \
            ..
      make -j1
      # test - 25 tests are excluded due to an unknown error that just happens in Bioconda Circle CI
      cd test
      ./pandora_test --gtest_filter=-FindPathsThroughCandidateRegionTest.endKmerExistsInStartKmersFindPathAndCycles:FindPathsThroughCandidateRegionTest.doGraphCleaningtwoIdenticalReadsPlusNoiseReturnOnePath:FindPathsThroughCandidateRegionTest.twoIdenticalReadsReturnOnePath:FindPathsThroughCandidateRegionTest.twoPossiblePathsOneWithLowCovgOnOneReturnsOnePath:FindPathsThroughCandidateRegionTest.twoPossiblePathsWithGoodCovgReturnsTwoPaths:GetNodeFromGraph.LowestKmerOfNode_KmerFoundInGraphAndNeighbour:GetNodeFromGraph.HighestKmerOfNode_KmerFoundInGraph:GetNodeFromGraph.HighestKmerOfNode_KmerFoundInGraphAndNeighbour:GetNodeFromGraph.LowestKmerOfStartNode_KmerFoundInGraphButNotNeighbourOfStart:GetNodeFromGraph.RevcompKmerOfInitialSeq_KmerFoundInGraphAndCorrectNeighbourFound:GetNodeFromGraph.NonExistentKmer_NotFoundInGraphAndNodeEmpty:GetPathsBetweenTest.OnlyReturnPathsBetweenStartAndEndKmers:GetPathsBetweenTest.lotsOfHighCovgCyclesReturnEmpty:DepthFirstSearchFromTest.SimpleGraphTwoNodesReturnSeqPassedIn:DepthFirstSearchFromTest.SimpleGraphSixNodesReturnSeqPassedIn:DepthFirstSearchFromTest.TwoReadsSameSequenceReturnOneSequence:DepthFirstSearchFromTest.TwoReadsOneVariantReturnOriginalTwoSequences:DepthFirstSearchFromTest.ThreeReadsTwoVariantsReturnOriginalSequences:DepthFirstSearchFromTest.TwoReadsTwoVariantsReturnOriginalTwoSequencesPlusTwoMosaics:DepthFirstSearchFromTest.ThreeReadsOneReverseComplimentReturnPathsForStrandOfStartAndEndKmers:DepthFirstSearchFromTest.SimpleCycleReturnPathsOfLengthsUpToMaxPathLengthCycling:GraphCleaningTest.simpleTipRemove:QueryAbundance.oneKmer_ReturnOne:QueryAbundance.twoKmers_ReturnTwo:QueryAbundance.fakeKmer_ReturnZero --gtest_color=no
      cd ..

      # test sample example
      cd ../example
      PATH=../build:"$PATH" ./run_pandora.sh conda
      cd ../build

      # install
      make install
      {{ PYTHON }} -m pip install . --no-deps --no-build-isolation --no-cache-dir -vvv

  entry_points:
    - amira = amira.__main__:main
  run_exports:
    - {{ pin_subpackage("amira", max_pin="x.x") }}

requirements:
  build:
    - {{ compiler('cxx') }}
    - cmake
    - make
    - wget
    - mafft

  host:
    - python ==3.10
    - pip
    - poetry-core >=1.0.0
    - make
    - git

  run:
    - python ==3.10
    - samtools ==1.18
    - racon ==1.4.10
    - minimap2 ==2.17
    - kmer-jellyfish ==2.3.0

test:
  imports:
    - amira
  commands:
    - amira --help
    - pandora --help

about:
  home: "https://github.com/Danderson123/Amira"
  summary: 'A tool to detect acquired AMR genes directly from long read sequencing data.'
  license: "Apache-2.0"
  license_family: APACHE
  license_file: LICENSE
  dev_url: "https://github.com/Danderson123/Amira"
  doc_url: "https://github.com/Danderson123/Amira/blob/main/README.md"

extra:
  recipe-maintainers:
    - Danderson123
