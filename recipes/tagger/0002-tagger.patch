diff --git a/batch_tagger.h b/batch_tagger.h
index 48216b2..1c4f6d8 100644
--- a/batch_tagger.h
+++ b/batch_tagger.h
@@ -78,7 +78,9 @@ void DocumentTagger::load_groups(int type, const char* groups_filename)
 
 void DocumentTagger::process(Document& document, const GetMatchesParams& params, IDocumentHandler* document_handler)
 {
-	Matches matches = Tagger::get_matches(document.text, NULL, params);
+	char document_id[16];
+	sprintf(document_id, "%d", document.key);
+	Matches matches = Tagger::get_matches(document.text, document_id, params);
 	this->match_handler->process(matches);
 	document_handler->process(document, matches);
 	for (Matches::iterator it = matches.begin(); it != matches.end(); it++) {
diff --git a/cleandict.cxx b/cleandict.cxx
index 99f4bff..834f982 100644
--- a/cleandict.cxx
+++ b/cleandict.cxx
@@ -46,7 +46,6 @@ class CleaningTagger : public Tagger {
 		{
 			unordered_set<int> filter_types;
 			filter_types.insert(-2);
-			filter_types.insert(-21);
 			filter_types.insert(-22);
 			filter_types.insert(-25);
 			filter_types.insert(-26);
diff --git a/makefile b/makefile
index 3d910ab..5746b98 100644
--- a/makefile
+++ b/makefile
@@ -12,7 +12,7 @@ clean:
 # Make C-style Python interpreter wrapper C-code layer.
 #
 tagger_swig.py tagger_swig_wrap.cxx: tagger_swig.i tagger.h
-	swig -python -c++ -threads $<
+	swig -python -c++ -threads -DSWIG_PYTHON_LEGACY_BOOL $<
 	
 tagger.o: tagger.cxx acronyms.h tagger.h tagger_types.h tagger_core.h acronyms.h hash.h tokens.h
 	$(CC) $(CFLAGS) -c $<
diff --git a/tagcorpus.cxx b/tagcorpus.cxx
index 6a11162..f16f6fd 100644
--- a/tagcorpus.cxx
+++ b/tagcorpus.cxx
@@ -44,6 +44,7 @@ int main (int argc, char *argv[])
 	char groups[MAXFILENAMELEN] = "";
 	char type_pairs[MAXFILENAMELEN] = "";
 	char stopwords[MAXFILENAMELEN] = "";
+	char localstopwords[MAXFILENAMELEN] = "";
 	bool autodetect = false;
 	bool tokenize_characters = false;
 	float document_weight = 1;
@@ -66,6 +67,7 @@ int main (int argc, char *argv[])
 			{"groups", optional_argument, 0, 'g'},
 			{"type-pairs", optional_argument, 0, 'p'},
 			{"stopwords", optional_argument, 0, 's'},
+			{"local-stopwords", optional_argument, 0, 'l'},
 			{"autodetect", no_argument, 0, 'u'},
 			{"tokenize-characters", no_argument, 0, 'z'},
 			{"document-weight", optional_argument, 0, 'd'},
@@ -83,7 +85,7 @@ int main (int argc, char *argv[])
 		
 		int option_index = 0;
 		
-		c = getopt_long (argc, argv, "y:e:n:i:g:p:s:u:d:r:c:f:t:m:a:h:", long_options, &option_index);
+		c = getopt_long (argc, argv, "y:e:n:i:g:p:s:l:u:d:r:c:f:t:m:a:h:", long_options, &option_index);
 		
 		/* Detect the end of the options. */
 		if (c == -1)
@@ -102,6 +104,7 @@ int main (int argc, char *argv[])
 				printf("\t--groups=filename\n");
 				printf("\t--type-pairs=filename\tTypes of pairs that are allowed\n");
 				printf("\t--stopwords=filename\n");
+				printf("\t--local-stopwords=filename\n");
 				printf("\t--autodetect Turn autodetect on\n");
 				printf("\t--tokenize-characters Turn single-character tokenization on\n");
 				printf("\t--document-weight=%1.2f\n", document_weight);
@@ -130,6 +133,12 @@ int main (int argc, char *argv[])
 				}
 				break;
 			
+			case 'l':
+				if (optarg) {
+					strncpy(localstopwords, optarg, min(MAXFILENAMELEN, int(sizeof(localstopwords))));
+				}
+				break;
+			
 			case 'n':
 				if (optarg) {
 					strncpy(names, optarg, min(MAXFILENAMELEN, int(sizeof(names))));
@@ -237,6 +246,9 @@ int main (int argc, char *argv[])
 	if (validate_opt(stopwords)) {
 		batch_tagger.load_global(stopwords);
 	}
+	if (validate_opt(localstopwords)) {
+		batch_tagger.load_local(localstopwords);
+	}
 	cerr << " done." << endl;
 	
 	TsvDocumentReader *document_reader;
diff --git a/tagger.py b/tagger.py
index 210f53c..bdf7539 100644
--- a/tagger.py
+++ b/tagger.py
@@ -36,7 +36,7 @@ def entity_dict(qtype, qid):
 
 class Tagger:
 
-	def __init__(self, java_script=None, re_stop=None):
+	def __init__(self, java_script=None, re_stop=None, serials_only=False):
 		self.re_head_begin = re.compile("<head[^>]*>", re.I)
 		self.re_head_end   = re.compile("</head>", re.I)
 		self.re_base_href  = re.compile("<base href=.+?>", re.I)
@@ -53,9 +53,9 @@ class Tagger:
 		self.document_types = {}
 		self.document_types_lock = threading.Lock()
 		if re_stop is None:
-			self.cpp_tagger = tagger_swig.Tagger(False)
+			self.cpp_tagger = tagger_swig.Tagger(serials_only)
 		else:
-			self.cpp_tagger = tagger_swig.Tagger(False, re_stop)
+			self.cpp_tagger = tagger_swig.Tagger(serials_only, re_stop)
 
 	def load_changelog(self, file):
 		self.changelog_lock.acquire()
diff --git a/tagger_core.h b/tagger_core.h
index da8e493..77702bb 100644
--- a/tagger_core.h
+++ b/tagger_core.h
@@ -61,8 +61,8 @@ Tagger::Tagger(bool serials_only, const char* pattern)
 	}
 	else {
 		this->re_stop = regex(
-			"\\A&|\\A(.{0,2}|.[ \t\r\n-]+.|[^A-Za-z]*([ \t\r\n]|\\Z)|[ACDEFGHIKLMNPQRSTVWY]-?[0-9]{1,4}|[Oo][Rr][ -]*[0-9]+|[CJnsXx][ -]*[0-9.-]+|[0-9]{1,4}[A-Za-z]|[0-9.-]+[ -]*[ckmnp]?[AdghLlMmSsVXx][0-9-]*)\\Z"
-			"|\\A([DGNSTdgnst]o|[Aa][nst]?|[Aa]nd|[Aa]re|[Bb][ey]|[Bb]ut|[Cc]an|[Dd]id|[Ff]or|[Hh]a[ds]|[Hh]ave]|[Ii][fnst]|[Ii]ts|[Oo][fnr]|[Tt]he|[Tt]his|[Ww]as|[Ww]ere)[ \t\r\n]"
+			"\\A&|\\A(.{0,2}|.[ \t\r\n-]+.|[^A-Za-z]*([ \t\r\n]|\\Z)|[ACDEFGHIKLMNPQRSTVWY]-?[0-9]{1,4}|[Oo][Rr][ -]*[0-9]+|[CJnsXx][ -]*[0-9.-]+|[0-9]{1,4}[A-Za-z]|[0-9.-]+[ -]*[cGkMmnp]?[ABbdghLlMmSsVXx]\\(?[0-9-]*\\)?|[0-9] .{2,9})\\Z"
+			"|\\A([DGNSTdgnst]o|[Aa][nst]?|[Aa]nd|[Aa]re|[Bb][ey]|[Bb]ut|[Cc]an|[Dd]id|[Ff]or|[Hh]a[ds]|[Hh]ave|[Ii][fnst]|[Ii]ts|[Oo][fnr]|s|[Tt]he|[Tt]his|[Ww]as|[Ww]ere)[ \t\r\n]"
 			"|[ \t\r\n]([dgs]o|are|but|can|did|et|ha[ds]|have|i[fst]|its|this|was|were)[ \t\r\n]"
 			"|[ \t\r\n]([dgnst]o|a[nst]?|and|are|b[ey]|but|can|did|et|for|ha[ds]|have|i[fnst]|its|o[fnr]|the|this|was|were)\\Z"
 		);
diff --git a/tagger_mamba.py b/tagger_mamba.py
index 1ac5a2e..598554f 100644
--- a/tagger_mamba.py
+++ b/tagger_mamba.py
@@ -8,9 +8,12 @@ import mamba.setup
 import mamba.task
 import mamba.util
 
-import blackmamba.database
-import blackmamba.html
-import blackmamba.xpage
+try:
+	import blackmamba.database
+	import blackmamba.html
+	import blackmamba.xpage
+except ImportError:
+	blackmamba = None
 
 import tagger.tagger
 
diff --git a/tokens.h b/tokens.h
index 3f8c3c3..baecdb1 100644
--- a/tokens.h
+++ b/tokens.h
@@ -2,12 +2,12 @@
 #define __REFLECT_TOKENS_HEADER__
 
 class Token {
-	
+
 	public:
 		int start;
 		int stop;
 		int length;
-		
+
 	public:
 		Token();
 		Token(const Token& other);
@@ -48,7 +48,7 @@ Token::Token(int start, int stop) {
 const unsigned char tokenize_type[256] = {
 	  0,   1,   1,   1,   1,   1,   1,   1,   1,   2,   2,   1,   1,   2,   1,   1,
 	  1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
-	  2,   2,   1,   1,   1,   1,   1,   1,   2,   2,   1,   2,   2,   3,   2,   2,
+	  2,   2,   1,   1,   1,   1,   1,   2,   2,   2,   3,   2,   2,   3,   2,   2,
 	  1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   2,   2,   1,   1,   1,   2,
 	  1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
 	  1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   2,   1,   2,   1,   2,
@@ -74,7 +74,6 @@ void Tokens::add(char* document, int offset, const GetMatchesParams& params)
 	}
 	else {
 		int start = -1;
-		int hyphen = -1;
 		int i = offset;
 		while (true) {
 			unsigned char type = tokenize_type[(unsigned char)document[i]];
@@ -82,26 +81,21 @@ void Tokens::add(char* document, int offset, const GetMatchesParams& params)
 				if (start == -1) {
 					start = i;
 				}
-				else if (hyphen != -1) {
-					Token cur(start, hyphen-1);
-					tokens.push_back(cur);
-					start = i;
-					hyphen = -1;
-				}
-			}
-			else if (type == 3) {
-				if (start != -1 && hyphen == -1) {
-					hyphen = i;
-				}
 			}
 			else {
 				if (start != -1) {
 					Token cur(start, i-1);
 					tokens.push_back(cur);
 					start = -1;
-					hyphen = -1;
 				}
-				if (type == 0) {
+				if (type == 3) {
+					start = i;
+					while (tokenize_type[(unsigned char)document[i+1]] == 3) ++i;
+					Token cur(start, i);
+					tokens.push_back(cur);
+					start = -1;
+				}
+				else if (type == 0) {
 					break;
 				}
 			}
