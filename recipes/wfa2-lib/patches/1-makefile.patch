diff --git a/CMakeLists.txt b/CMakeLists.txt
index ab399ba..07d6874 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -59,8 +59,8 @@ if (${CMAKE_BUILD_TYPE} MATCHES Release)
 endif()
 
 if ((${CMAKE_BUILD_TYPE} MATCHES Release) OR (${CMAKE_BUILD_TYPE} MATCHES RelWithDebInfo))
-  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS} ${OPTIMIZE_FLAGS}")
-  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS} ${OPTIMIZE_FLAGS}")
+  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OPTIMIZE_FLAGS}")
+  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OPTIMIZE_FLAGS}")
 endif ()
 
 if (${CMAKE_BUILD_TYPE} MATCHES "Debug")
@@ -150,6 +150,11 @@ target_include_directories(wfa2_static PUBLIC . wavefront utils)
 add_library(wfa2::wfa2 ALIAS wfa2)
 add_library(wfa2::wfa2_static ALIAS wfa2_static)
 
+if(OPENMP)
+  target_link_libraries(wfa2_static PRIVATE OpenMP::OpenMP_C)
+  target_link_libraries(wfa2 PRIVATE OpenMP::OpenMP_C)
+endif(OPENMP)
+
 # ---- C++ binding library
 
 set(wfa2cpp_SOURCE
@@ -163,13 +168,18 @@ add_library(wfa2cpp SHARED ${wfa2cpp_SOURCE})
 set_target_properties(wfa2cpp PROPERTIES SOVERSION 0)
 set_target_properties(wfa2cpp_static PROPERTIES OUTPUT_NAME wfa2cpp)
 target_link_libraries(wfa2cpp PUBLIC wfa2)
-target_link_libraries(wfa2cpp_static PUBLIC wfa2)
+target_link_libraries(wfa2cpp_static PUBLIC wfa2_static)
 add_library(wfa2::wfa2cpp ALIAS wfa2cpp)
 add_library(wfa2::wfa2cpp_static ALIAS wfa2cpp_static)
 
+if(OPENMP)
+  target_link_libraries(wfa2cpp_static PRIVATE OpenMP::OpenMP_CXX)
+  target_link_libraries(wfa2cpp PRIVATE OpenMP::OpenMP_CXX)
+endif(OPENMP)
+
 # ---- Get version
 
-file (STRINGS "VERSION" BUILD_NUMBER)
+file (STRINGS "VERSION.txt" BUILD_NUMBER)
 add_definitions(-DWFA2LIB_VERSION="${BUILD_NUMBER}")
 add_definitions(-DVERSION="${BUILD_NUMBER}")
 
diff --git a/Makefile b/Makefile
index 37ca094..4f0ced3 100644
--- a/Makefile
+++ b/Makefile
@@ -12,7 +12,7 @@ UNAME=$(shell uname)
 CC:=$(CC)
 CPP:=$(CXX)
 
-CC_FLAGS=-Wall -g
+CC_FLAGS=-Wall -g -fPIE
 
 AR=ar
 AR_FLAGS=-rsc
diff --git a/VERSION b/VERSION.txt
similarity index 100%
rename from VERSION
rename to VERSION.txt
diff --git a/alignment/cigar.c b/alignment/cigar.c
index 4c4efe3..b79f06c 100644
--- a/alignment/cigar.c
+++ b/alignment/cigar.c
@@ -494,10 +494,10 @@ void cigar_print_pretty(
   }
   // Print alignment pretty
   fprintf(stream,"      ALIGNMENT\t");
-  cigar_print(stderr,cigar,true);
+  cigar_print(stream,cigar,true);
   fprintf(stream,"\n");
   fprintf(stream,"      ALIGNMENT.COMPACT\t");
-  cigar_print(stderr,cigar,false);
+  cigar_print(stream,cigar,false);
   fprintf(stream,"\n");
   fprintf(stream,"      PATTERN    %s\n",pattern_alg);
   fprintf(stream,"                 %s\n",ops_alg);
diff --git a/bindings/cpp/WFAligner.hpp b/bindings/cpp/WFAligner.hpp
index 373bb2d..8da82bb 100644
--- a/bindings/cpp/WFAligner.hpp
+++ b/bindings/cpp/WFAligner.hpp
@@ -33,6 +33,7 @@
 #define BINDINGS_CPP_WFALIGNER_HPP_
 
 #include <string>
+#include <cstdint>
 
 #include "../../wavefront/wfa.hpp"
 
diff --git a/utils/commons.h b/utils/commons.h
index a1f0132..7d60243 100644
--- a/utils/commons.h
+++ b/utils/commons.h
@@ -31,6 +31,7 @@
 
 #pragma once
 
+#include <stdint.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <unistd.h>
diff --git a/utils/vector.h b/utils/vector.h
index 2c5dcf0..4bd4776 100644
--- a/utils/vector.h
+++ b/utils/vector.h
@@ -33,6 +33,8 @@
 #ifndef VECTOR_H_
 #define VECTOR_H_
 
+#include <stdint.h>
+
 /*
  * Checkers
  */
diff --git a/wavefront/wavefront_heuristic.c b/wavefront/wavefront_heuristic.c
index 51d414c..73ada3e 100644
--- a/wavefront/wavefront_heuristic.c
+++ b/wavefront/wavefront_heuristic.c
@@ -518,6 +518,9 @@ void wavefront_heuristic_cufoff(
   if (mwavefront == NULL || mwavefront->lo > mwavefront->hi) return;
   // Decrease wait steps
   --(wf_heuristic->steps_wait);
+  // Save lo/hi base
+  const int hi_base = mwavefront->hi;
+  const int lo_base = mwavefront->lo;
   // Select heuristic (WF-Adaptive)
   if (wf_heuristic->strategy & wf_heuristic_wfadaptive) {
     wavefront_heuristic_wfadaptive(wf_aligner,mwavefront,false);
@@ -537,6 +540,7 @@ void wavefront_heuristic_cufoff(
     wavefront_heuristic_banded_adaptive(wf_aligner,mwavefront);
   }
   // Check wavefront length
+  if (lo_base == mwavefront->lo && hi_base == mwavefront->hi) return; // No wavefronts pruned
   if (mwavefront->lo > mwavefront->hi) mwavefront->null = true;
   // DEBUG
   // const int wf_length_base = hi_base-lo_base+1;
