--- src/pyOpenMS/pyopenms/__init__.py	2021-10-13 15:21:36.000000000 +0200
+++ src/pyOpenMS/pyopenms/__init__.py.patched	2021-10-13 15:25:05.000000000 +0200
@@ -29,31 +29,6 @@
 import os
 here = os.path.abspath(os.path.dirname(__file__))
 
-default_openms_data_path = os.path.join(here, "share/OpenMS")
-env_openms_data_path = os.environ.get("OPENMS_DATA_PATH")
-
-if not env_openms_data_path:
-    os.environ["OPENMS_DATA_PATH"] = default_openms_data_path
-else:
-    print(
-        "Warning: OPENMS_DATA_PATH environment variable already exists. "
-        "pyOpenMS will use it ({env}) to locate data in the OpenMS share folder "
-        "(e.g., the unimod database), instead of the default ({default})."
-        .format(env=env_openms_data_path, default=default_openms_data_path)
-    )
-
-import sys
-# on conda the libs will be installed to the general conda lib path which is available during load.
-# try to skip this loading if we do not ship the libraries in the package (e.g. as wheel via pip)
-# TODO check if this can be completely removed by now or e.g. by baking in an RPATH into the pyopenms*.so's
-if sys.platform.startswith("linux") and os.path.exists(os.path.join(here, "libOpenMS.so")):
-    # load local shared libraries before we import pyopenms*.so, else
-    # those are not found. setting LD_LIBRARY_PATH does not work,
-    # see: http://stackoverflow.com/questions/1178094
-    import ctypes
-    ctypes.cdll.LoadLibrary(os.path.join(here, "libOpenSwathAlgo.so"))
-    ctypes.cdll.LoadLibrary(os.path.join(here, "libOpenMS.so"))
-
 try:
     from .all_modules import *
     from .python_extras import *
