{% set name = "OpenMS" %}
{% set version = "3.4.1" %}  # if ends with 'dev' it is considered a development release and pulled from GitHub

package:
  name: {{ name|lower  }}-meta
  version: {{ version  }}

{% if 'dev' in version %}
source:
  git_url: https://github.com/OpenMS/OpenMS.git
  git_rev: release/{{ version }}
  md5: unused
{% else %}
source:
  # PLEASE never use abbreviated versions anymore!
  url: https://github.com/OpenMS/OpenMS/releases/download/release%2F{{ version }}/OpenMS-{{ version }}.tar.gz
  md5: 8d0b4d1d333f069959f7d5ff1c77a90f
{% endif %}

build:
  number: 1

# Try this when building with GUI
#extra:
#  container:
#    extended-base: True

# Note: pinning of sysroot_linux-64 =2.17 enforces cos7 and is currently needed to prevent an memcpy@GLIBC2.14 error
{% set host_deps = [
    "bzip2",
    "coinmp",
    "eigen >=3.4.0",
    "libboost-devel",
    "libsvm",
    "qt6-main",
    "xerces-c",
    "yaml-cpp",
    "zlib"
]
+ (["libgomp", "sysroot_linux-64 =2.17"] if linux else [])
+ (["llvm-openmp"] if osx else [])
%}

requirements:
    
    build:
      - {{ compiler('cxx') }}
      - cmake
      - ninja
    
    host:
    {% for dep in host_deps %}
      - {{ dep }}
    {% endfor %}

test:
  commands:
    - conda inspect linkages -p $PREFIX $PKG_NAME  # [not win]
    - conda inspect objects -p $PREFIX $PKG_NAME  # [osx]

outputs:
  - name: libopenms
    version: {{ version }}
    script: package_libopenms.sh
    requirements:
        # No actual build is done. CMake is used to install different parts of the existing build
        #  from the main "package"
        # But since the other packages depend on its run_exports we want to make
        #  sure that the versions of the dependencies used are the same as above. So list them
        #  again
        build:
          - cmake
        host:
        {% for dep in host_deps %}
          - {{ dep }}
        {% endfor %}

    build:
      run_exports:
          # We only need to export things that we expose in our library!
          - {{ pin_compatible('xerces-c', max_pin='x.x') }}
          - {{ pin_compatible('eigen', max_pin='x.x') }}
          - {{ pin_compatible('qt6-main', max_pin='x.x') }}
          - {{ pin_compatible('libsvm', max_pin='x.x') }}
          - libopenms {{ version }}

  - name: openms
    version: {{ version }}
    script: package_openms-tools.sh
    requirements:
      # no actual build is done. CMake is used to install different parts of the existing build
      build:
        - cmake
      host:
        - {{ pin_subpackage('libopenms', exact=True) }}
      # conda apparently does not support run_exports in subpackages yet, otherwise having libopenms in host would be enough.
      # see https://github.com/conda/conda-build/issues/3478
      # so specify everything again, such that EXACTLY the same versions are used!
      # I could not get the "resolved_packages" jinja function to gather dependencies from other subpackages.
        {% for dep in host_deps %}
        - {{ dep }}
        {% endfor %}

    test:
      commands:
        - OPENMS_DATA_PATH=${PREFIX}/share/OpenMS/ ${PREFIX}/bin/OpenMSInfo
        - OPENMS_DATA_PATH=${PREFIX}/share/OpenMS/ ${PREFIX}/bin/FileMerger --help

  - name: openms-thirdparty
    version: {{ version }}
    build:
     # Dependencies bumbershoot, fido, percolator are not available for osx.
     skip: True  # [osx]

    requirements:
     run:
       - {{ pin_subpackage('openms', exact=True) }}
       - comet-ms ==2024011
       - luciphor2 ==2020_04_03
       - msgf_plus ==2024.03.26
       - percolator ==3.7.1
       - sirius-ms >=6.1.0
       - thermorawfileparser ==1.4.3
       - sage-proteomics ==0.14.7
       - gnuplot
       - r-gplots

    test:
     # Test copied from openms output to make sure a test environment for this output is created.
     commands:
       - OPENMS_DATA_PATH=${PREFIX}/share/OpenMS/ ${PREFIX}/bin/OpenMSInfo

about:
  home: "https://github.com/OpenMS/OpenMS"
  license: "BSD-3-Clause"
  license_family: BSD
  license_file: LICENSE
  summary: "OpenMS is an open-source software C++ library for LC-MS data management and analyses."
  dev_url: "https://github.com/OpenMS/OpenMS"
  doc_url: "https://openms.readthedocs.io/en/latest/index.html"

extra:
  additional-platforms:
    - linux-aarch64
  skip-lints:
    - build_number_needs_reset  # our linter has some issues with multi-package recipes as it seems
    - missing_run_exports  # linter seems expect run_export keyword for meta-package in multi-package
    {% if 'dev' in version %}
    - uses_vcs_url
    {% endif %}
  identifiers:
    - biotools:openms
    - usegalaxy-eu:openms_fileconverter
    - doi:10.1038/nmeth.3959
