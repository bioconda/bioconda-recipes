{% set name = "OpenMS" %}
{% set version = "3.4.1" %}  # if ends with 'dev' it is considered a development release and pulled from GitHub

package:
  name: {{ name|lower  }}-meta
  version: {{ version  }}

{% if 'dev' in version %}
source:
  git_url: https://github.com/OpenMS/OpenMS.git
  # We do not release dev versions, so build from develop
  # Note: This will only work correctly as long as the current X.Y.Zdev version is actually the latest
  # Retrospective builds not supported.
  git_rev: develop
  md5: unused
{% else %}
source:
  # PLEASE never use abbreviated versions anymore!
  url: https://github.com/OpenMS/OpenMS/releases/download/release%2F{{ version }}/OpenMS-{{ version }}.tar.gz
  md5: 8d0b4d1d333f069959f7d5ff1c77a90f
{% endif %}

build:
  number: 1
  overlinking_ignore_patterns: "*"
  # Linking is checked in the outputs not meta recipe

# Try this when building with GUI
#extra:
#  container:
#    extended-base: True

requirements:
    
    build:
      - {{ compiler('cxx') }}
      - cmake
      - ninja

    # Note: pinning of sysroot_linux-64 =2.17 enforces cos7 and is currently needed to prevent an memcpy@GLIBC2.14 error
    host:
      - bzip2
      - coin-or-utils
      - coin-or-clp
      - coin-or-cgl
      - coin-or-cbc
      - eigen >=3.4.0
      - libboost-devel
      - libsvm
      - qt6-main
      - xerces-c
      - yaml-cpp
      - zlib
      - libgomp  # [linux]
      - sysroot_linux-64 =2.17  # [linux]
      - llvm-openmp  # [osx]

test:
  commands:
    - echo "Tests are in subpackages"

outputs:
  - name: libopenms
    version: {{ version }}
    script: package_libopenms.sh
    requirements:
        # No actual build is done. CMake is used to install different parts of the existing build
        #  from the main "package"
        # But since the other packages depend on its run_exports we want to make
        #  sure that the versions of the dependencies used are the same as above. So list them
        #  again. Also we want the compiler jinja func to have the run dependencies such that
        #  dso linker checks dont complain
        build:
          - {{ compiler('cxx') }}
          - cmake
        host:
          - bzip2
          - coin-or-utils
          - coin-or-clp
          - coin-or-cgl
          - coin-or-cbc
          - eigen >=3.4.0
          - libboost-devel
          - libsvm
          - qt6-main
          - xerces-c
          - yaml-cpp
          - zlib
          - libgomp  # [linux]
          - sysroot_linux-64 =2.17  # [linux]
          - llvm-openmp  # [osx]
        # Run dependencies are fully managed by run_exports of our host deps

    build:
      run_exports:
          # We only need to export things that we expose in our library!
          - {{ pin_compatible('xerces-c', max_pin='x.x') }}
          - {{ pin_compatible('eigen', max_pin='x.x') }}
          - {{ pin_compatible('qt6-main', max_pin='x.x') }}
          - {{ pin_compatible('libsvm', upper_bound='400') }} # libsvm is usually more compatible than it says
          - libopenms {{ version }}
      # Looks like we are only using header-only part of boost in libOpenMS
      ignore_run_exports_from:
          - libboost-devel

    test:
      commands:
        - command -v readelf >/dev/null 2>&1 && readelf -d ${PREFIX}/lib/libOpenMS.so | grep 'R.*PATH' || echo "Mulled container.. skip tests" # [linux]
        - command -v otool >/dev/null 2>&1 && otool -L ${PREFIX}/lib/libOpenMS.dylib || echo "Mulled container.. skip tests"  # [osx]
    
    about:
      home: "https://github.com/OpenMS/OpenMS"
      license: "BSD-3-Clause"
      license_family: BSD
      license_file: LICENSE
      summary: "Libraries and headers for developing with OpenMS. They are also a dependency of pyopenms and openms (tools)."
      dev_url: "https://github.com/OpenMS/OpenMS"
      doc_url: "https://openms.readthedocs.io/en/latest/index.html"

  - name: openms
    version: {{ version }}
    script: package_openms-tools.sh
    requirements:
      # no actual build is done. CMake is used to install different parts of the existing build
      build:
        - {{ compiler('cxx') }}
        - cmake
      host:
        - {{ pin_subpackage('libopenms', exact=True) }}
        - xerces-c
        - eigen
        - qt6-main
        - libsvm
      ignore_run_exports:
        - libsvm
      run:
        # conda does not support run_exports from outputs in other outputs of the same package yet,
        # otherwise having libopenms in host would be enough.
        # see https://github.com/conda/conda-build/issues/3478
        # so specify everything again, such that EXACTLY the same versions are used!
        # Note that for this to work, 
        # I could not get the "resolved_packages" jinja function to gather dependencies from other subpackages.
        - {{ pin_subpackage('libopenms', exact=True) }}
        - {{ pin_compatible('xerces-c', max_pin='x.x') }}
        - {{ pin_compatible('eigen', max_pin='x.x') }}
        - {{ pin_compatible('qt6-main', max_pin='x.x') }}
        - {{ pin_compatible('libsvm', upper_bound='400') }}

    test:
      commands:
        - command -v readelf >/dev/null 2>&1 && readelf -d ${PREFIX}/bin/OpenMSInfo | grep 'R.*PATH' || echo "Mulled container.. skip tests" # [linux]
        - command -v otool >/dev/null 2>&1 && otool -L ${PREFIX}/bin/OpenMSInfo || echo "Mulled container.. skip tests"  # [osx]
        - OPENMS_DATA_PATH=${PREFIX}/share/OpenMS/ ${PREFIX}/bin/OpenMSInfo
        - OPENMS_DATA_PATH=${PREFIX}/share/OpenMS/ ${PREFIX}/bin/FileMerger --help

    about:
      home: "https://github.com/OpenMS/OpenMS"
      license: "BSD-3-Clause"
      license_family: BSD
      license_file: LICENSE
      summary: "The OpenMS TOPP tools (without GUI components and adapted thirdparty tools)."
      dev_url: "https://github.com/OpenMS/OpenMS"
      doc_url: "https://openms.readthedocs.io/en/latest/index.html"

  - name: openms-thirdparty
    version: {{ version }}
    build:
     # Dependencies bumbershoot, fido, percolator are not available for osx.
     skip: True  # [osx]

    requirements:
     run:
       - {{ pin_subpackage('openms', exact=True) }}
       - comet-ms ==2024011
       - luciphor2 ==2020_04_03
       - msgf_plus ==2024.03.26
       - percolator ==3.7.1
       - sirius-ms >=6.1.0
       - thermorawfileparser ==1.4.3
       - sage-proteomics ==0.14.7
       - gnuplot
       - r-gplots

    test:
      # Test copied from openms output to make sure a test environment for this output is created.
      commands:
        - OPENMS_DATA_PATH=${PREFIX}/share/OpenMS/ ${PREFIX}/bin/OpenMSInfo
    
    about:
      home: "https://github.com/OpenMS/OpenMS"
      license: "BSD-3-Clause"
      license_family: BSD
      license_file: LICENSE
      summary: "A helper package to install OpenMS TOPP tools with all their compatible and conda-available versions of adapted thirdparty tools."
      dev_url: "https://github.com/OpenMS/OpenMS"
      doc_url: "https://openms.readthedocs.io/en/latest/index.html"

about:
  home: "https://github.com/OpenMS/OpenMS"
  license: "BSD-3-Clause"
  license_family: BSD
  license_file: LICENSE
  summary: "OpenMS is an open-source software C++ library for LC-MS data management and analyses. The openms-meta package should not be installed. Please use one of its outputs libopenms, openms (=tools) or openms-thirdparty."
  dev_url: "https://github.com/OpenMS/OpenMS"
  doc_url: "https://openms.readthedocs.io/en/latest/index.html"

extra:
  additional-platforms:
    - linux-aarch64
    - osx-arm64
  skip-lints:
    - build_number_needs_reset  # our linter has some issues with multi-package recipes as it seems
    - missing_run_exports  # linter seems expect run_export keyword for meta-package in multi-package
    {% if 'dev' in version %}
    - uses_vcs_url
    {% endif %}
  identifiers:
    - biotools:openms
    - usegalaxy-eu:openms_fileconverter
    - doi:10.1038/s41592-024-02197-7
