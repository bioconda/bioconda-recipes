--- setup.py	2017-11-26 11:00:47.000000000 -0600
+++ setup.py.new	2021-06-23 15:35:52.450265939 -0500
@@ -1,5 +1,5 @@
 try:
-	from setuptools import setup
+	from setuptools import setup, find_packages
 except:
 	from distutils.core import setup
 import os
@@ -12,5 +12,7 @@
 	author = 'Stephen Nayfach',
 	author_email='snayfach@gmail.com',
 	url='https://github.com/snayfach/MIDAS',
-	install_requires = ['biopython >= 1.62', 'numpy >= 1.7.0', 'pysam >= 0.8.1', 'pandas >= 0.17.1']
+	install_requires = ['biopython >= 1.62', 'numpy >= 1.7.0', 'pysam >= 0.8.1', 'pandas >= 0.17.1'],
+	packages = find_packages(),
+	scripts = ['scripts/build_midas_db.py', 'scripts/call_consensus.py', 'scripts/compare_genes.py', 'scripts/merge_midas.py', 'scripts/query_by_compound.py', 'scripts/run_midas.py', 'scripts/snp_diversity.py', 'scripts/strain_tracking.py']
 )
--- midas/utility.py	2017-11-26 11:00:47.000000000 -0600
+++ midas/utility.py.new	2021-06-23 15:41:32.513768942 -0500
@@ -5,6 +5,7 @@
 # Freely distributed under the GNU General Public License (GPLv3)
 
 import io, os, stat, sys, resource, gzip, platform, bz2, Bio.SeqIO
+from distutils.spawn import find_executable
 
 __version__ = '1.3.0'
 
@@ -106,48 +107,23 @@
 		pool.join()
 		sys.exit("\nKeyboardInterrupt")
 
+def find_exe(exe, path):
+	""" Finding executable """
+	if find_executable(exe) is None:
+		exe = os.path.join(path, exe)
+		if not os.path.isfile(exe):
+			sys.exit("\nError: File not found: %s\n" % exe)
+		if find_executable(exe) is None:
+			sys.exit("\nError: Executable not found: %s\n" % exe)
+	return exe
+
 def add_executables(args):
 	""" Identify relative file and directory paths """
 	src_dir = os.path.dirname(os.path.abspath(__file__))
 	main_dir = os.path.dirname(src_dir)
-	args['stream_seqs'] = '/'.join([src_dir, 'run', 'stream_seqs.py'])
-	args['hs-blastn'] = '/'.join([main_dir, 'bin', platform.system(), 'hs-blastn'])
-	args['bowtie2-build'] = '/'.join([main_dir, 'bin', platform.system(), 'bowtie2-build'])
-	args['bowtie2'] = '/'.join([main_dir, 'bin', platform.system(), 'bowtie2'])
-	args['samtools'] = '/'.join([main_dir, 'bin', platform.system(), 'samtools'])
-	
-	for arg in ['hs-blastn', 'stream_seqs', 'bowtie2-build', 'bowtie2', 'samtools']:
-		if not os.path.isfile(args[arg]):
-			sys.exit("\nError: File not found: %s\n" % args[arg])
-
-	for arg in ['hs-blastn', 'bowtie2-build', 'bowtie2', 'samtools']:
-		if not os.access(args[arg], os.X_OK):
-			sys.exit("\nError: File not executable: %s\n" % args[arg])
-
-	import subprocess as sp
-
-	process = sp.Popen("%s view" % args['samtools'], shell=True, stdout=sp.PIPE, stderr=sp.PIPE)
-	process.wait()
-	if process.returncode != 0:
-		err = "\nError: could not execute samtools binary: %s\n" % args['samtools']
-		err += "(exited with error code %s)\n" % process.returncode
-		err += "To solve this issue, follow these steps:\n"
-		err += "  1) Download samtools v1.4: https://github.com/samtools/samtools/releases/download/1.4/samtools-1.4.tar.bz2\n"
-		err += "  2) Unpack and compile the software on your system\n"
-		err += "  3) Copy the new samtools binary to: %s\n" % os.path.dirname(args['samtools'])
-		sys.exit(err)
-
-	process = sp.Popen("%s -h" % args['bowtie2'], shell=True, stdout=sp.PIPE, stderr=sp.PIPE)
-	process.wait()
-	if process.returncode != 0:
-		err = "\nError: could not execute bowtie2 binary: %s\n" % args['bowtie2']
-		err += "(exited with error code %s)\n" % process.returncode
-		err += "To solve this issue, follow these steps:\n"
-		err += "  1) Go to https://sourceforge.net/projects/bowtie-bio/files/bowtie2/2.3.2\n"
-		err += "  2) Download bowtie2-2.3.2-linux-x86_64.zip\n"
-		err += "  3) Unpack the software on your system\n"
-		err += "  4) Copy the new bowtie2 binaries to: %s\n" % os.path.dirname(args['bowtie2'])
-		sys.exit(err)
+	args['stream_seqs'] = find_exe('stream_seqs.py', os.path.join(src_dir, 'run'))
+	for exe in ['hs-blastn',  'bowtie2-build', 'bowtie2', 'samtools']:
+		args[exe] = find_exe(exe, os.path.join(main_dir, 'bin', platform.system()))
 
 def auto_detect_file_type(inpath):
 	""" Detect file type [fasta or fastq] of <p_reads> """
 
--- midas/run/snps.py	2017-11-26 11:00:47.000000000 -0600
+++ midas/run/snps.py.new	2021-06-23 15:40:01.298365787 -0500
@@ -220,6 +220,8 @@
 	start = time()
 	print("\nCounting alleles")
 	args['log'].write("\nCounting alleles\n")
+	args['log'].close()
+	args.pop('log', None)
 
 	# run pileups per species in parallel
 	argument_list = []
