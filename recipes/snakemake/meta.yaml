# Attention: when upgrading the version, please compare below dependencies with
# https://github.com/snakemake/snakemake/blob/{version}/setup.cfg
{% set version = "8.10.0" %}

package:
  name: snakemake
  version: {{ version }}

source:
  url: https://pypi.io/packages/source/s/snakemake/snakemake-{{ version }}.tar.gz
  sha256: abd73a2acd6741d0794bbf6e11eb1ae50cf44dc060e6dc80328fce2a4633dd78

build:
  number: 0
  noarch: generic
  run_exports:
    - {{ pin_subpackage("snakemake", max_pin="x") }}

requirements:
  run:
    - snakemake-minimal ={{ version }}
    # pandas is optional, but required for many workflows
    - pandas
    # options.extras_require: messaging
    - slack_sdk
    # options.extras_require: pep
    - eido
    - peppy
    # options.extras_require: reports
    - pygments

test:
  imports:
    - snakemake
  commands:
    - export GIT\_PYTHON_REFRESH=warn
    - snakemake --version
    - snakemake --version | grep "{{ version }}"
    # Generate a report to check whether graphviz dependencies (libXau) are properly installed:
    - 'printf %s\\n "rule empty:" > Snakefile && snakemake --cores 1 --report'
    # Remove test artifacts from command above.
    - rm -rf .snakemake Snakefile report.html

about:
  home: https://snakemake.github.io
  license: MIT
  summary: A popular workflow management system aiming at full in-silico reproducibility.
  description: |
        Snakemake is a workflow management system that aims to reduce the complexity of creating 
        workflows by providing a fast and comfortable execution environment, together with a clean 
        and modern specification language in python style. Snakemake workflows are essentially Python 
        scripts extended by declarative code to define rules. Rules describe how to create output 
        files from input files.

extra:
  additional-platforms:
    - linux-aarch64
  identifiers:
    - doi:10.1093/bioinformatics/bts480
    - biotools:Snakemake
  skip-lints:
    - uses_setuptools  # uses pkg_resoures during run time
    - should_be_noarch_python  # toplevel metapackage is noarch:generic
    - missing_run_exports 
  recipe-maintainers:
    - johanneskoester
    - corneliusroemer

outputs:
  - name: snakemake-minimal

    build:
      noarch: python
      script: python -m pip install --no-deps --ignore-installed .
      entry_points:
        - snakemake = snakemake.cli:main
      run_exports:
        - {{ pin_subpackage("snakemake-minimal", max_pin="x") }}

    requirements:
      host:
        - python >=3.11
        - pip
        - setuptools
      run:
        # Keep in sync with snakemake/setup.cfg
        - python >=3.11,<3.13
        - appdirs
        - immutables
        - configargparse
        - connection_pool >=0.0.3
        - datrie
        - docutils
        - gitpython
        - humanfriendly
        - jinja2 >=3.0,<4.0
        - jsonschema
        - nbformat
        - packaging
        - psutil
        - pulp >=2.3.1,<2.9
        - pyyaml
        - requests >=2.8.1
        - reretry
        - smart_open >=3.0,<4.0
        - snakemake-interface-executor-plugins >=9.0.2,<10.0.0
        - snakemake-interface-common >=1.17.0,<2.0
        - snakemake-interface-storage-plugins >=3.1.0,<4.0
        - snakemake-interface-report-plugins >=1.0.0,<2.0.0
        - stopit
        - tabulate
        - throttler
        - toposort >=1.10,<2.0
        - wrapt
        - yte  >=1.5.1,<2.0
        - dpath >=2.1.6,<3.0.0
        - conda-inject >=1.3.1,<2.0

    test:
      imports:
        - snakemake
      commands:
        - export GIT\_PYTHON_REFRESH=warn
        - snakemake --version
        - snakemake --version | grep "{{ version }}"
    
    about:
      home: https://snakemake.github.io
      license: MIT
      summary: A popular workflow management system aiming at full in-silico reproducibility.
      description: |
        Snakemake is a workflow management system that aims to reduce the complexity
        of creating workflows by providing a fast and comfortable execution 
        environment, together with a clean and modern specification language in 
        python style. Snakemake workflows are essentially Python scripts extended 
        by declarative code to define rules. Rules describe how to create output 
        files from input files. This package provides the core snakemake functionality.
        For features like reports and remote files, check out the snakemake package 
        which provides all optional dependencies.
