package:
  name: pepr
  version: "1.1.23"

source:
  fn: PePr-1.1.23.tar.gz
  url: https://pypi.python.org/packages/27/7d/98db15f4f0aad8c8fc7c2154cd75429f5894467c1de1cb3972a0588f0206/PePr-1.1.23.tar.gz
  md5: 3783fca9d0c2b39d092bd1ed11c0e2ae
  patches:
   # List any patch files here
    - setup.py.patch
build:
  # noarch_python: True
  # preserve_egg_dir: True
  entry_points:
    # Put any entry points (scripts to be generated automatically) here. The
    # syntax is module:function.  For example
    #
    # - pepr = pepr:main
    #
    # Would create an entry point called pepr that calls pepr.main()

    - PePr=PePr.PePr:argless_main
    - PePr-preprocess=PePr.PePr:pre_processing_module
    - PePr-postprocess=PePr.post_processing.post_process_PePr:post_processing_module

  # If this is a new build for the same version, increment the build
  # number. If you do not include this key, it defaults to 0.
  # number: 1

requirements:
  build:
    - python
    - setuptools
    - numpy >=1.6.0
    - scipy >=0.14.0
    - pysam
    - sharedmem

  run:
    - python
    - numpy >=1.6.0
    - scipy >=0.14.0
    - pysam
    - sharedmem

test:
  # Python imports
  imports:
    - PePr
    - PePr.post_processing
#    - PePr.pre_processing
#    - PePr.utilities

  commands:
    # You can put test commands to be run here.  Use this to test that the
    # entry points work.

    - PePr --help
    - PePr-preprocess --help
    - PePr-postprocess --help

  # You can also put a file called run_test.py in the recipe that will be run
  # at test time.

  # requires:
    # Put any additional test requirements here.  For example
    # - nose

about:
  home: https://github.com/shawnzhangyx/PePr/
  license: GNU General Public License v3 (GPLv3)
  summary: 'Peak-calling and Prioritization pipeline for replicated ChIP-Seq data'
  license_family: GPL

# See
# http://docs.continuum.io/conda/build.html for
# more information about meta.yaml
