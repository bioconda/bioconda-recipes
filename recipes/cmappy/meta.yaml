package:
  name: cmappy
  version: "1.0.8"

source:
  fn: cmapPy-1.0.8.tar.gz
  url: https://pypi.python.org/packages/83/9d/2fb659a7d1ffb1460edb1cae5e7ff7c7ff744f53a73276b12ff0be48416a/cmapPy-1.0.8.tar.gz
  md5: be801cf4ab097c002742c8edacb2aba6
#  patches:
   # List any patch files here
   # - fix.patch

build:
  # noarch_python: True
  # preserve_egg_dir: True
  entry_points:
    # Put any entry points (scripts to be generated automatically) here. The
    # syntax is module:function.  For example
    #
    # - cmappy = cmappy:main
    #
    # Would create an entry point called cmappy that calls cmappy.main()

    - gctx2gct=cmapPy.pandasGEXpress.gctx2gct:main
    - gct2gctx=cmapPy.pandasGEXpress.gct2gctx:main
    - concat_gctoo=cmapPy.pandasGEXpress.concat_gctoo:main

  # If this is a new build for the same version, increment the build
  # number. If you do not include this key, it defaults to 0.
  # number: 1

requirements:
  build:
    - python
    - setuptools
    - numpy >=1.11.2
    - pandas >=0.18
    - h5py >=2.6.0
    - requests >=2.13.0

  run:
    - python
    - numpy >=1.11.2
    - pandas >=0.18
    - h5py >=2.6.0
    - requests >=2.13.0

test:
  # Python imports
  imports:
    - cmapPy
    - cmapPy.clue_api_client
    - cmapPy.pandasGEXpress

  commands:
    # You can put test commands to be run here.  Use this to test that the
    # entry points work.

    - gctx2gct --help
    - gct2gctx --help
    - concat_gctoo --help

  # You can also put a file called run_test.py in the recipe that will be run
  # at test time.

  requires:
    # Put any additional test requirements here.  For example
    # - nose

about:
  home: https://github.com/cmap/cmapPy
  license: MIT License
  summary: 'Assorted tools for interacting with .gct, .gctx files and other Connectivity Map (Broad Institute) data/tools'
  license_family: MIT

# See
# http://docs.continuum.io/conda/build.html for
# more information about meta.yaml
