diff --git a/kentsrc/dnautil.h b/kentsrc/dnautil.h
index d509e88..4665814 100644
--- a/kentsrc/dnautil.h
+++ b/kentsrc/dnautil.h
@@ -272,10 +272,10 @@ void aaToAbbr(char aa, char *abbrBuf, size_t abbrBufSize);
 /* Convert an AA single letter such as "A", "D" etc. to its abbreviation such as "Ala", "Asp" etc.
  * abbrBufSize must be at least 4.  If aa is not found, "?%c?",aa is written into abbrBuf. */
 
-void trimRefAlt(char *ref, char *alt, uint *pStart, uint *pEnd, int *pRefLen, int *pAltLen);
+void trimRefAlt(char *ref, char *alt, int *pStart, int *pEnd, int *pRefLen, int *pAltLen);
 /* If ref and alt have identical bases at beginning and/or end, trim those & update all params. */
 
-void trimRefAltLeft(char *ref, char *alt, uint *pStart, uint *pEnd, int *pRefLen, int *pAltLen);
+void trimRefAltLeft(char *ref, char *alt, int *pStart, int *pEnd, int *pRefLen, int *pAltLen);
 /* If ref and alt have identical bases at beginning and/or end, trim those starting on the right
  * so we get the leftmost representation & update all params. */
 
diff --git a/kentsrc/dnautil.c b/kentsrc/dnautil.c
index cf82e9e..1306600 100644
--- a/kentsrc/dnautil.c
+++ b/kentsrc/dnautil.c
@@ -1266,13 +1266,13 @@ if (trimStart)
 *pAltLen = altLen;
 }
 
-void trimRefAlt(char *ref, char *alt, uint *pStart, uint *pEnd, int *pRefLen, int *pAltLen)
+void trimRefAlt(char *ref, char *alt, int *pStart, int *pEnd, int *pRefLen, int *pAltLen)
 /* If ref and alt have identical bases at beginning and/or end, trim those & update all params. */
 {
 trimRefAltDir(ref, alt, pStart, pEnd, pRefLen, pAltLen, FALSE);
 }
 
-void trimRefAltLeft(char *ref, char *alt, uint *pStart, uint *pEnd, int *pRefLen, int *pAltLen)
+void trimRefAltLeft(char *ref, char *alt, int *pStart, int *pEnd, int *pRefLen, int *pAltLen)
 /* If ref and alt have identical bases at beginning and/or end, trim those starting on the right
  * so we get the leftmost representation & update all params. */
 {
