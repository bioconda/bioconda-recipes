diff --git sed/compile.c sed/compile.c
--- sed/compile.c	2012-04-13 04:42:21.000000000 -0400
+++ sed/compile.c	2016-05-26 23:49:31.000000000 -0400
@@ -138,7 +138,8 @@ static const char errors[] =
   "expected newer version of sed\0"
   "invalid usage of line address 0\0"
   "unknown command: `%c'\0"
-  "incomplete command";
+  "incomplete command\0"
+  "e/r/w commands disabled in sandbox mode";
 
 #define BAD_BANG (errors)
 #define BAD_COMMA (BAD_BANG + sizeof(N_("multiple `!'s")))
@@ -166,7 +167,8 @@ static const char errors[] =
 #define INVALID_LINE_0 (ANCIENT_VERSION + sizeof(N_("expected newer version of sed")))
 #define UNKNOWN_CMD (INVALID_LINE_0 + sizeof(N_("invalid usage of line address 0")))
 #define INCOMPLETE_CMD (UNKNOWN_CMD + sizeof(N_("unknown command: `%c'")))
-#define END_ERRORS (INCOMPLETE_CMD + sizeof(N_("incomplete command")))
+#define DISALLOWED_CMD (INCOMPLETE_CMD + sizeof(N_("incomplete command")))
+#define END_ERRORS (DISALLOWED_CMD+ sizeof(N_("e/r/w commands disabled in sandbox mode")))
 
 static struct output *file_read = NULL;
 static struct output *file_write = NULL;
@@ -338,6 +340,9 @@ read_filename()
   struct buffer *b;
   int ch;
 
+  if (sandbox)
+    bad_prog(_(DISALLOWED_CMD));
+
   b = init_buffer();
   ch = in_nonblank();
   while (ch != EOF && ch != '\n')
@@ -1138,6 +1143,9 @@ compile_program(vector)
 	  break;
 
 	case 'e':
+	  if (sandbox)
+	  	bad_prog(_(DISALLOWED_CMD));
+
 	  ch = in_nonblank();
 	  if (ch == EOF || ch == '\n')
 	    {
@@ -1262,6 +1270,9 @@ compile_program(vector)
 	    cur_cmd->x.cmd_subst->regx =
 	      compile_regex(b, flags, cur_cmd->x.cmd_subst->max_id + 1);
 	    free_buffer(b);
+
+            if (cur_cmd->x.cmd_subst->eval && sandbox)
+	      bad_prog(_(DISALLOWED_CMD));
 	  }
 	  break;
 
diff --git sed/sed.c sed/sed.c
--- sed/sed.c	2012-03-16 05:13:31.000000000 -0400
+++ sed/sed.c	2016-05-26 23:45:00.000000000 -0400
@@ -53,6 +53,9 @@ bool separate_files = false;
 /* If set, follow symlinks when processing in place */
 bool follow_symlinks = false;
 
+/* If set, opearate in 'sandbox' mode */
+bool sandbox = false;
+
 /* How do we edit files in-place? (we don't if NULL) */
 char *in_place_extension = NULL;
 
@@ -130,6 +133,8 @@ Usage: %s [OPTION]... {script-only-if-no
 #ifdef REG_PERL
   fprintf(out, PERL_HELP);
 #endif
+  fprintf(out, _("      --sandbox\n\
+                 operate in sandbox mode.\n"));
   fprintf(out, _("  -s, --separate\n\
                  consider files as separate rather than as a single continuous\n\
                  long stream.\n"));
@@ -178,6 +183,7 @@ main(argc, argv)
     {"quiet", 0, NULL, 'n'},
     {"posix", 0, NULL, 'p'},
     {"silent", 0, NULL, 'n'},
+    {"sandbox", 0, NULL, 'o'},
     {"separate", 0, NULL, 's'},
     {"unbuffered", 0, NULL, 'u'},
     {"version", 0, NULL, 'v'},
@@ -293,6 +299,10 @@ main(argc, argv)
 	  break;
 #endif
 
+	case 'o':
+	  sandbox = true;
+	  break;
+
 	case 's':
 	  separate_files = true;
 	  break;
diff --git sed/sed.h sed/sed.h
--- sed/sed.h	2012-07-25 06:33:09.000000000 -0400
+++ sed/sed.h	2016-05-26 23:45:00.000000000 -0400
@@ -241,6 +241,9 @@ extern bool use_extended_syntax_p;
 extern int mb_cur_max;
 extern bool is_utf8;
 
+/* If set, operate in 'sandbox' mode - disable e/r/w commands */
+extern bool sandbox;
+
 #define MBRTOWC(pwc, s, n, ps) \
   (mb_cur_max == 1 ? \
    (*(pwc) = btowc (*(unsigned char *) (s)), 1) : \
