{% set name = "fibermorph" %}
{% set version = "0.1.4" %}
{% set file_ext = "tar.gz" %}
{% set hash_type = "sha256" %}
{% set hash_value = "54f431bd7de43978f11d3494e184df2e8af45198b39c975ca879c20ac18a755b" %}

package:
  name: '{{ name|lower }}'
  version: '{{ version }}'

source:
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.{{ file_ext }}
  '{{ hash_type }}': '{{ hash_value }}'

build:
  noarch: python
  number: 0
  entry_points:
    - fibermorph = fibermorph.fibermorph:main
  script: python setup.py install --single-version-externally-managed --record=record.txt

requirements:
  host:
    - python >=3.6
    - pip
  build:
    - python >=3.6
    - setuptools
  run:
    - python >=3.6
    - numpy
    - scipy
    - matplotlib-base
    - joblib
    - pandas
    - opencv-python
    - scikit-learn
    - pillow
    - rawpy
    - requests
    - sympy
    - argparse
    - scikit-image
    - joblib
    - tqdm

test:
  imports:
    - fibermorph
  commands:
    - fibermorph --help

about:
  home: https://github.com/tinalasisi/fibermorph
  license: MIT
  license_family: MIT
  license_file: ''
  summary: Toolkit for analyzing hair fiber morphology
  description: "# fibermorph\nPython package for image analysis of hair curvature and cross-section\n\n> ## Prerequisites\nWe recommend that you use a virtual environment to run fibermorph in a virtual\
    \ environment to avoid any conflicts with other Python packages you might have on your system. To learn more about virtual enviornments, click [here](https://docs.python.org/3/tutorial/venv.html).\n\
    \nIf you are familiar with Python, conda and have the necessary installations on your system, feel free to skip ahead to the section entitled \"Install the package\", otherwise you can follow the step\
    \ by step instructions below for the prerequisites.\n\n## Setting up\n1. We recommend you download [miniconda](https://docs.conda.io/en/latest/miniconda.html) for your operating system.\n\nYou may also\
    \ download [Anaconda](https://docs.anaconda.com/anaconda/install/). The only difference is that Anaconda comes preloaded with more libraries (500 Mb). You won't need this to run fibermorph, so we recommend\
    \ you stick to minconda which is the smaller (58 Mb) and quicker to download.\n\nWhichever you choose *be sure to download the version with Python 3.X and not Python 2.X*.\n\n2. Open a terminal.\n\n\
    The commands are written in bash, so if you are running this on a Windows OS, you will need to switch into the correct settings. You can find more information for Windows specifically [here]().\n\n\
    3.  Now you can set up a virtual environment.\n\nCreate an empty conda environment, e.g. `conda create -n <YearMonthDay>_fibermorph python=3.8` and load it `conda activate <YearMonthDay>_fibermorph`\n\
    \nYou are now ready to install fibermorph!\n\n\n## Install the package\n\n1. After having activated your new virtual environment, you can simply run `pip install fibermorph`.\n\nYou can find the latest\
    \ release [here](https://github.com/tinalasisi/fibermorph/) on this GitHub page and on the [fibermorph PyPI page](https://pypi.org/project/fibermorph/).\n\n2. You have successfully installed fibermorph.\n\
    \nThe package is now ready for use. Enter `fibermorph -h` or `fibermorph --help` to see all the flags. You can keep reading to try out the demos and read instructions on the various modules within the\
    \ package.\n\n## Demo data\nBefore using this on any of your own data, it's recommended that you test that you test whether fibermorph is working properly on your machine. There are a few `demo` modules\
    \ you can use to check whether fibermorph is running correctly.\n\n### Testing with real data\nYou can test both the curvature and section modules with real data that is downloaded automatically when\
    \ you run the `--demo_real` modules.\n\nIn both cases, all you need to do is specify a folder path where the images and results can be created with `---output_directory` or `-o`. This folder can be\
    \ existing, but you can also establish a new folder by including it in the new path.\n\nBoth modules will download the demo data into a new folder `tmpdata` within the path you gave. Then, fibermorph\
    \ will run the curvature or section analysis, and the results  will be saved in a new folder `results_cache` at this same location. It is recommended that you specify a path with a new folder name to\
    \ keep everything organized.\n\n#### Testing curvature analysis\n`  --demo_real_curv`\n\nThis flag will run  a demo of fibermorph curvature analysis with real data. You will need to provide a folder\
    \ for the demo data to be downloaded.\n\nTo run the demo, you will input something like:\n`fibermorph --demo_real_curv --output_directory /Users/<UserName>/<ExistingPath>/<NewFolderName`\n\n#### Testing\
    \ section analysis\n`  --demo_real_section`\n\nThis flag will run  a demo of fibermorph section analysis with real data. You will need to provide a folder for the demo data to be downloaded.\n\nTo run\
    \ the demo, you will input something like:\n`fibermorph --demo_real_section --output_directory /Users/<UserName>/<ExistingPath>/<NewFolderName`\n\n## Calculating image analysis error\nIn order to validate\
    \ the image analysis program, the fibermorph package includes two modules that will generate and analyze dummy data, then run the appropriate analysis and generate error data.\n\nBoth `--demo_dummy`\
    \ modules require the following flags:\n\n```\n-o , --output_directory\n                        Required. Full path to and name of desired output directory.\n                        Will be created\
    \ if it doesn't exist.\n\n--repeats               Integer. Number of times to repeat validation module\n                        (i.e. number of sets of dummy data to generate).\n\n```\n\nThe modules\
    \ create a `results_cache` within the given path. In this folder there will be another folder named `<MonthDay_HourMinute>_ValidationTest_<Curv or Section>` where the generated dummy images and corresponding\
    \ parameters in spreadsheets will be in a folder named `ValidationData` and the error data will be in a folder named `ValidationAnalysis`.\n\nRunning the module once will create a set of data and analyses\
    \ for a single randomly generated arc and line (for curvature) or circle and ellipse (for section). To produce more data, simply add the flag `--repeats`  with the number of times you would like to\
    \ repeat it, e.g. `fibermorph --repeats <integer>`. This flag is optional.\n\n### Validating curvature analysis\n`--demo_dummy_curv`\n\nThis flag will run a demo of fibermorph curvature with dummy data.\
    \ Arcs and lines are generated, analyzed and error is calculated.\n\nFor this module, you can optionally include `--window_size`. This will allow you to edit the window size used to fit the circle used\
    \ to estimate curvature. By default, this is 10 pixels. The images generated are 3900 x 5200 pixels, and you can use a range of values between 10 and 3900.\n\nTo run the demo, you can enter e.g. `fibermorph\
    \ --demo_dummy_curv --output_directory /Users/<UserName>/<ExistingPath>/<NewFolderName> --repeats 4`\n\nRather than repeating this analysis with various window_sizes, you can simply use the curvature\
    \ module (see below) and set the `--input_directory` to the `/ValidationData` folder created above. You will need to set `--resolution 1`, `--window_size 10`, and `--window_unit px` or whatever number\
    \ of pixels you would like to use as a window size.\n\n### Validating section analysis\n`--demo_dummy_section`\n\nThis flag will run a demo of fibermorph curvature with dummy data. Arcs and lines are\
    \ generated, analyzed and error is calculated.\n\nTo run the demo, you can enter e.g. `fibermorph --demo_dummy_section --output_directory /Users/<UserName>/<ExistingPath>/<NewFolderName> --repeats 4`\n\
    \n### Deleting demo folders\n`--delete_dir`\nCan be used to delete directories generated in the demo modules.\n\nExample usage: `fibermorph --delete_dir --output_directory /Users/<UserName>/<ExistingPath>/<ResultsFolderName>`\n\
    \nThis will delete the folder (with all its contents) and print a confirmation of which folder has been deleted.\n\n## Using the fibermorph packages\nThe main modules of the fibermorph package are `--curvature`\
    \ and `--section`. Both require the following flags to run:\n\n```\n-o , --output_directory\n                        Required. Full path to and name of desired output directory. Will be created\n  \
    \                         if it doesn't exist.\n-i , --input_directory\n                        Required. Full path to and name of desired directory containing input files.\n--jobs                 \
    \ Integer. Number of parallel jobs to run. Default is 1.\n\n```\n\n### Curvature\nTo calculate curvature from grayscale TIFF images of hair fibers, the flag `--curvature` is used with the following\
    \ flags in addition to input and output directories:\n```\n--resolution_mm       Integer. Number of pixels per mm for curvature analysis.\n--window_size  [ ...]\n                      Float or integer.\
    \ Desired size for window of measurement for curvature\n                      analysis in pixels or mm (given the flag --window_unit). Default is 10.\n                      Works when the --window_unit\
    \ is pixels.\n--window_unit {px,mm}\n                      String. Unit of measurement for window of measurement for curvature\n                      analysis. Can be 'px' (pixels) or 'mm'. Default\
    \ is 'px'.\n-s, --save_image      Default is False. Will save intermediate curvature processing images if\n                      --save_image flag is included.\n-W, --within_element  Boolean. Default\
    \ is False. Will create an additional directory with\n                      spreadsheets of raw curvature measurements for each hair if the\n                      --within_element flag is included.\n\
    \n```\n\nSo, to run a curvature analysis, you would enter e.g.\n```\nfibermorph --curvature --input_directory /Users/<UserName>/<ImageFolderPath> --output_directory /Users/<UserName>/<ExistingPath>/\
    \ --window_size 0.5 --window_unit mm --resolution 132 --save_image --within_element --jobs 2\n```\n\n### Section\nTo calculate cross-sectional properties from grayscale TIFF images of hair fibers, the\
    \ flag `--section` is used with the following flags:\n```\n--resolution_mu       Float. Number of pixels per micron for section analysis.\n--minsize             Integer. Minimum diameter in microns\
    \ for sections. Default is 20.\n--maxsize             Integer. Maximum diameter in microns for sections. Default is 150.\n\n```\n\nAn example command would be:\n```\nfibermorph --section --input_directory\
    \ /Users/<UserName>/<ImageFolderPath> --output_directory /Users/<UserName>/<ExistingPath>/ --minsize 30 --maxsize 180 --resolution_mu 4.25 --jobs 2\n```\n\n\n### Converting raw images to grayscale TIFF\n\
    This package features an additional auxiliary module to convert raw images to grayscale TIFF files if necessary: `--raw2gray`\n\nIn addition to the input and output directories, the module needs the\
    \ user to specify what file extension it should be looking for.\n\n```\n--file_extension      Optional. String. Extension of input files to use in input_directory when\n                      using raw2gray\
    \ function. Default is .RW2.\n\n```\n\nA user could enter, for example:\n```\nfibermorph --raw2gray --input_directory /Users/<UserName>/<ImageFolderPath> --output_directory /Users/<UserName>/<ExistingPath>/<NewFolderName>\
    \ --file_extension .RW2 --jobs 4\n```\n\n\n"
  doc_url: ''
  dev_url: ''

extra:
  recipe-maintainers: ''
