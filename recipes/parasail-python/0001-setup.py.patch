diff --git a/setup.py b/setup.py
index 4465048..2ff8a33 100644
--- a/setup.py
+++ b/setup.py
@@ -15,6 +15,7 @@ import zipfile
 
 from distutils.dir_util import copy_tree
 from distutils.util import get_platform
+import setuptools
 from setuptools import setup
 from setuptools.command.install import install as install_
 
@@ -28,7 +29,6 @@ CLASSIFIERS = [
     "Development Status :: 5 - Production/Stable",
     "Intended Audience :: Science/Research",
     "Natural Language :: English",
-    "License :: OSI Approved :: BSD License",
     "Operating System :: OS Independent",
     "Programming Language :: C",
     "Programming Language :: Python",
@@ -180,10 +180,9 @@ def run_autoreconf(root):
     if all_good:
         retcode = -1
         try:
-            retcode = subprocess.Popen([
-                'autoreconf',
-                '-fi',
-                ], cwd=root).wait()
+            retcode = subprocess.run([
+                "${BUILD_PREFIX}/bin/autoreconf -if"
+                ], shell=True, cwd=root)
         except Exception as e:
             all_good = False
         else:
@@ -239,6 +238,10 @@ def build_autotools(patch_m4=False):
             print("{} already exists! Skipping build.".format(binary))
         else:
             os.chdir(os.path.join(top,tdir))
+            subprocess.run("mkdir -p build-aux", executable="/bin/bash")
+            subprocess.run("mkdir -p lib", executable="/bin/bash")
+            subprocess.run("cp -rfv ${BUILD_PREFIX}/share/gnuconfig/config.* build-aux/", shell=True, executable="/bin/bash")
+            subprocess.run("cp -rfv ${BUILD_PREFIX}/share/gnuconfig/config.* lib/", shell=True, executable="/bin/bash")
             CPPFLAGS=""
             if tool == 'm4' and patch_m4:
                 CPPFLAGS="CPPFLAGS=-D_IO_IN_BACKUP=0x100"
@@ -265,12 +268,13 @@ def build_autotools(patch_m4=False):
                 os.chdir(save_cwd)
                 return False
             print("making and installing {}".format(tool))
-            proc = subprocess.Popen([
-                'make', '-j', str(cpu_count()), 'install'
-                ], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
-            stdout,stderr = proc.communicate()
+            subprocess.run("cp -rf ${BUILD_PREFIX}/bin/make ${PREFIX}/bin/make", shell=True, executable="/bin/bash")
+            subprocess.run("export PATH=${PREFIX}/bin:${PATH}", shell=True, executable="/bin/bash")
+            proc = subprocess.run([
+                "make -j${CPU_COUNT} install",
+                ], shell=True, stdout=subprocess.PIPE)
             if 0 != proc.returncode:
-                print(stdout)
+                print(proc.stdout)
                 print("make of {} failed".format(tool))
                 os.chdir(save_cwd)
                 return False
@@ -324,14 +328,14 @@ def build_parasail(libname):
         # on OSX, homebrew perl might not support threading and automake
         # build will fail
         print('Prepending /usr/bin to PATH')
-        os.environ['PATH'] = '/usr/bin' + os.pathsep + os.environ['PATH']
+        os.environ['PATH'] = os.environ['PREFIX'] + '/bin' + os.pathsep + os.environ['PATH']
         print("PATH={}".format(os.environ['PATH']))
         if not run_autoreconf(root):
             newpath = os.path.join(os.getcwd(), 'autotools', 'bin')
             print("Prepending {} to PATH".format(newpath))
             os.environ['PATH'] = newpath + os.pathsep + os.environ['PATH']
             if platform.system() == "Darwin" and 'M4' not in os.environ:
-                os.environ['M4'] = '/usr/bin/m4'
+                os.environ['M4'] = os.environ['BUILD_PREFIX'] + '/bin/m4'
             print("PATH={}".format(os.environ['PATH']))
             if not build_autotools():
                 if not build_autotools(True):
@@ -344,11 +348,24 @@ def build_parasail(libname):
 
     if find_file('config.status', parasail_root) is None:
         print("configuring parasail in directory {}".format(parasail_root))
+        my_env = os.environ.copy()
         retcode = subprocess.Popen([
             './configure',
             '--enable-shared',
-            '--disable-static'
-            ], cwd=parasail_root).wait()
+            '--disable-static',
+            '--disable-option-checking',
+            '--enable-silent-rules',
+            '--disable-dependency-tracking',
+            '--with-zlib',
+            "--libdir='$PREFIX/lib'",
+            "CC='$CC'",
+            "CFLAGS='$CFLAGS -O3'",
+            "CXX='$CXX'",
+            "CXXFLAGS='$CXXFLAGS -O3'",
+            "CPPFLAGS='$CPPFLAGS -I$PREFIX/include'",
+            "LDFLAGS='$LDFLAGS -L$PREFIX/lib'",
+            "PKG_CONFIG_PATH='$PREFIX/lib/pkgconfig'"
+            ], shell=True, env=my_env, cwd=parasail_root).wait()
         if 0 != retcode:
             raise RuntimeError("configure failed")
     else:
@@ -356,12 +373,10 @@ def build_parasail(libname):
 
     if find_file(libname, parasail_root) is None:
         print("making parasail")
-        retcode = subprocess.Popen([
-            'make',
-            '-j',
-            str(cpu_count())
-            ], cwd=parasail_root).wait()
-        if 0 != retcode:
+        retcode = subprocess.run([
+            "make -j${CPU_COUNT}"
+            ], shell=True, cwd=parasail_root)
+        if 0 != retcode.returncode:
             raise RuntimeError("make failed")
     else:
         print("parasail library '{}' already made".format(libname))
@@ -524,11 +539,12 @@ if __name__ == "__main__":
         maintainer=find_meta("author"),
         maintainer_email=find_meta("email"),
         keywords=KEYWORDS,
-        packages=PACKAGES,
+        packages=setuptools.find_packages(where="."),
         package_data={"parasail": [get_libname()] + get_includes()},
         cmdclass=cmdclass,
         zip_safe=False,
         classifiers=CLASSIFIERS,
         install_requires=INSTALL_REQUIRES,
+        options={"bdist_wheel": {"universal": "1"}},
     )
 
