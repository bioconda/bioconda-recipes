--- setup.py
+++ setup.py
@@ -19,6 +19,8 @@
 # SOFTWARE.
 
 import os
+import pathlib
+import re
 import shutil
 import sysconfig
 from subprocess import Popen, PIPE, STDOUT
@@ -30,6 +32,7 @@
 LIBHS = ["libhs.a", "libhs_runtime.a"]
 LIBHS_VERSION = "v5.2.1"
 LIBHS_SOURCE = "https://github.com/intel/hyperscan.git"
+LIBHS_DIRECTORY = os.environ.get("LIBHS_DIRECTORY")
 
 
 def get_compiler():
@@ -68,13 +71,6 @@
         c_flags = "-fPIC -O{o} -DNDEBUG -lm".format(o=o_flag)
         cpp_flags = c_flags + " -lstdc++"
 
-        with Popen(["which", "git"], stdin=PIPE, stdout=PIPE, stderr=PIPE) as process:
-            process.communicate()
-            if process.returncode != 0:
-                raise SystemError(
-                    "Could not find 'git' on your PATH, cannot build hyperscan"
-                )
-
         with Popen(["which", "cmake"], stdin=PIPE, stdout=PIPE, stderr=PIPE) as process:
             process.communicate()
             if process.returncode != 0:
@@ -89,26 +85,53 @@
                     "Could not find 'ninja' on your PATH, cannot build hyperscan"
                 )
 
-        with Popen(
-            "git clone -b {tag} --single-branch {rep}".format(
-                tag=LIBHS_VERSION, rep=LIBHS_SOURCE
-            ).split(),
-            stdin=PIPE,
-            stdout=PIPE,
-            stderr=STDOUT,
-        ) as process:
-            for line in process.stdout:
-                print(line.decode("utf-8", errors="ignore")[:-1])
-            _, err = process.communicate()
-            if process.returncode != 0:
-                raise SystemError(
-                    "Error cloning hyperscan: {err}".format(
-                        err=err.decode("utf-8", errors="ignore")
+        if not LIBHS_DIRECTORY:
+            with Popen(["which", "git"], stdin=PIPE, stdout=PIPE, stderr=PIPE) as process:
+                process.communicate()
+                if process.returncode != 0:
+                    raise SystemError(
+                        "Could not find 'git' on your PATH, cannot build hyperscan"
                     )
-                )
 
-        if not os.path.exists("hyperscan"):
+            with Popen(
+                "git clone -b {tag} --single-branch {rep}".format(
+                    tag=LIBHS_VERSION, rep=LIBHS_SOURCE
+                ).split(),
+                stdin=PIPE,
+                stdout=PIPE,
+                stderr=STDOUT,
+            ) as process:
+                for line in process.stdout:
+                    print(line.decode("utf-8", errors="ignore")[:-1])
+                _, err = process.communicate()
+                if process.returncode != 0:
+                    raise SystemError(
+                        "Error cloning hyperscan: {err}".format(
+                            err=err.decode("utf-8", errors="ignore")
+                        )
+                    )
+            libhs_directory = "../hyperscan"
+        else:
+            libhs_directory = LIBHS_DIRECTORY
+
+        if not os.path.exists(libhs_directory):
             raise SystemError("Error, hyperscan directory does not exist")
+        try:
+            libhs_version = "v" + ".".join(
+                re.search(
+                    r"""
+                        \(HS_MAJOR_VERSION\ (\d+)\).*
+                        \(HS_MINOR_VERSION\ (\d+)\).*
+                        \(HS_PATCH_VERSION\ (\d+)\)
+                    """,
+                    pathlib.Path(libhs_directory, "CMakeLists.txt").read_text(),
+                    re.DOTALL | re.VERBOSE,
+                ).groups(),
+            )
+        except:
+            raise SystemError("Error, hyperscan version could not be read")
+        if libhs_version != LIBHS_VERSION:
+            raise SystemError("Error, hyperscan version mismatch")
 
         os.mkdir("hyperscan_build")
         os.chdir("hyperscan_build")
@@ -122,7 +145,7 @@
                 "Ninja",
                 "-DCMAKE_C_FLAGS_RELEASE='{cflags}'".format(cflags=c_flags),
                 "-DCMAKE_CXX_FLAGS_RELEASE='{cppflags}'".format(cppflags=cpp_flags),
-                "../hyperscan/",
+                libhs_directory,
             ],
             stdin=PIPE,
             stdout=PIPE,
@@ -160,7 +183,8 @@
 
         os.chdir("../")
         try:
-            shutil.rmtree("hyperscan")
+            if not LIBHS_DIRECTORY:
+                shutil.rmtree("hyperscan")
             shutil.rmtree("hyperscan_build")
         except OSError as e:
             raise SystemError(
