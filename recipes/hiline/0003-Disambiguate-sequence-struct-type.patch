--- HiLine.cpp
+++ HiLine.cpp
@@ -237,12 +237,12 @@
 }
 
 struct
-sequence
+sequence_s
 {
 	char *name;
 	u64 length;
 	wavl_tree *tree;
-	sequence *next;
+	sequence_s *next;
 	u32 index;
 	u32 pad;
 };
@@ -250,7 +250,7 @@
 struct
 sequence_hash_table_node
 {
-	sequence *sequence;
+	sequence_s *sequence;
 	sequence_hash_table_node *next;
 };
 
@@ -278,7 +278,7 @@
 
 global_function
 void
-AddSequenceToHashTable(memory_arena *arena, sequence_hash_table *table, sequence *sequence)
+AddSequenceToHashTable(memory_arena *arena, sequence_hash_table *table, sequence_s *sequence)
 {
 #define SequenceHashTableSeed 0xf20b503a1896576e
 	u32 name32[16];
@@ -302,7 +302,7 @@
 }
 
 global_function
-sequence *
+sequence_s *
 GetSequenceFromHashTable(sequence_hash_table *table, char *name, char nameTerm = '\t')
 {
 	u32 name32[16];
@@ -311,12 +311,12 @@
 	u32 hash = FastHash32(name32, sizeof(name32), SequenceHashTableSeed) % table->size;
 	sequence_hash_table_node *node = table->table[hash];
 	sequence_hash_table_node *prevNode = 0;
-	sequence *result = 0;
+	sequence_s *result = 0;
 
 	while (node)
 	{
 		prevNode = node;
-		sequence *test = node->sequence;
+		sequence_s *test = node->sequence;
 		if (AreStringsEqual(name, nameTerm, test->name, '\0'))
 		{
 			result = test;
@@ -336,7 +336,7 @@
 create_tree_data
 {
 	line_buffer_value **values;
-	sequence *sequence;
+	sequence_s *sequence;
 	memory_arena *arena;
 	u32 numValueLists;
 	u32 pad;
@@ -1578,13 +1578,13 @@
 			s32 fastaFile;
 			if ((fastaFile = PyObject_AsFileDescriptor(objFastaInput)) > 0)
 			{
-				sequence *sequences = 0;
+				sequence_s *sequences = 0;
 				u32 numSequences = 0;
 
 				Py_BEGIN_ALLOW_THREADS;
 				PrintStatus("Reading \'%s\'...", fastaPath);
 				{
-					sequence *tailSequence = 0;
+					sequence_s *tailSequence = 0;
 
 					line_buffer *buffer = 0;
 					u32 bufferPtr = 0;
@@ -1636,7 +1636,7 @@
 									}
 									newName[nameBufferPtr + 1] = '\0';
 
-									sequence *newSequence = PushStruct(Working_Set, sequence);
+									sequence_s *newSequence = PushStruct(Working_Set, sequence_s);
 									newSequence->name = newName;
 									newSequence->tree = InitialiseWavlTree(&Working_Set);
 									newSequence->next = 0;
@@ -1645,7 +1645,7 @@
 									if (!sequences) sequences = newSequence;
 									else tailSequence->next = newSequence;
 
-									sequence *prevSequence = tailSequence;
+									sequence_s *prevSequence = tailSequence;
 									tailSequence = newSequence;
 
 									currName = newName;
@@ -1801,7 +1801,7 @@
 					u64 totalBP = 0;
 
 					Sequence_Hash_Table = CreateSequenceHashTable(&Working_Set, numSequences);
-					TraverseLinkedList(sequences, sequence)
+					TraverseLinkedList(sequences, sequence_s)
 					{
 						AddSequenceToHashTable(&Working_Set, Sequence_Hash_Table, node);
 						totalBP += node->length;
@@ -1811,7 +1811,7 @@
 
 					u64 totalRestrictionSites = 0;
 					u64 treeId = 0;
-					TraverseLinkedList(sequences, sequence)
+					TraverseLinkedList(sequences, sequence_s)
 					{
 						totalRestrictionSites += (node->tree->numIntervals - 1);
 
@@ -2095,7 +2095,7 @@
 						PyArrayObject *restrictionSitesPerSeq = (PyArrayObject *)PyArray_SimpleNew(1, (const npy_intp*)dims, NPY_UINT64);
 						{
 							u32 index = 0;
-							TraverseLinkedList(sequences, sequence)
+							TraverseLinkedList(sequences, sequence_s)
 							{
 								PyTuple_SET_ITEM(seqNames, (Py_ssize_t)index, Py_BuildValue("s", node->name));
 								u64 *out = (u64 *)((u08 *)PyArray_DATA(seqLengths) + (index * PyArray_STRIDE(seqLengths, 0)));
--- SAMLineBufferQueue.cpp
+++ SAMLineBufferQueue.cpp
@@ -59,7 +59,7 @@
     s32 distanceFromRestrictionSite;
     read_type type;
     u64 samIndex;
-    sequence *sequence;
+    sequence_s *sequence;
     wavl_node *fragment;
     u64 readStart;
     process_queue *processQueue;
