{% set version = "0.0.9" %}
{% set sha256 = "03a7ab5a453b41709604e6dd238226adef8b87f220321877fa8d5ce949097d88" %}
{% set hyperscan_version = "5.2.1" %}
{% set hyperscan_sha256 = "fd879e4ee5ecdd125e3a79ef040886978ae8f1203832d5a3f050c48f17eec867" %}

package:
  name: hiline
  version: {{ version }}

source:
  - url: https://github.com/wtsi-hpag/HiLine/archive/{{ version }}.tar.gz
    sha256: {{ sha256 }}
    patches:
      - 0001-Do-not-fetch-hyperscan-via-git.patch
      - 0002-Use-more-general-compiler-detection.patch
      - 0003-Disambiguate-sequence-struct-type.patch
  - url: https://github.com/intel/hyperscan/archive/v{{ hyperscan_version }}.tar.gz
    sha256: {{ hyperscan_sha256 }}
    patches:
      - 0004-hyperline-cmake-build_wrapper.sh.patch
    folder: hyperscan

build:
  number: 3
  skip: True  # [py<38]
  script: |
    export LIBHS_DIRECTORY='{{ SRC_DIR }}/hyperscan'
    {{ PYTHON }} -m pip install . --no-deps --ignore-installed --no-cache-dir -vvv

requirements:
  build:
    - {{ compiler('cxx') }}
    - cmake >=3.16.4
    - pkgconfig >=1.3.1
    # hyperline/cmake/build_wrapper.sh uses `rev` provides by util-linux.
    - util-linux  # [linux]
  host:
    # Ninja is a build tool but in reqs/host to not pull python into reqs/build.
    - ninja >=1.10.0
    - boost >=1.72.0
    - ragel >=6.10
    - pcre >=8.44
    - numpy >=1.18.1
    - pip >=20.0.2
    - python
    - setuptools >=46.0.0
  run:
    - python
    - bwa >=0.7.17
    - samtools >=1.10
    - click >=7.0
    - pandas >=1.0.1
    - numpy >=1.18.1
    - seaborn >=0.10.0
    - matplotlib-base >=3.2.0
    - biopython >=1.76

test:
  commands:
    - HiLine --help
  imports:
    - HiLine

about:
  home: https://github.com/wtsi-hpag/HiLine
  license: MIT
  license_file: LICENSE
  license_family: MIT
  summary: HiC alignment and classification pipeline.
  description: >
    This is a HiC short-read alignment pipeline. It will perform an alignment, or read in an external alignment,
    perform optional duplicate-read marking, perform HiC read classification based on an in-slico restriction digest
    of reference sequences and finally split the output alignments based on HiC read-type.
    It can also optionally process and output HiC alignment statistics.
    Under the hood, it uses bwa mem and samtools to perform and process alignments.
    It also uses a custom C++ Python extension to perform the in-slico digest
    (using the Hyperscan (https://github.com/intel/hyperscan) regex library) and subsequent HiC classification.  
