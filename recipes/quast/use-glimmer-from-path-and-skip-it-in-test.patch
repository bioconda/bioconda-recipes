diff --git a/quast_libs/glimmer.py b/quast_libs/glimmer.py
index 101e5962..e7d181fd 100644
--- a/quast_libs/glimmer.py
+++ b/quast_libs/glimmer.py
@@ -19,7 +19,7 @@ from quast_libs.genemark import add_genes_to_fasta
 from quast_libs.genes_parser import Gene
 
 from quast_libs.log import get_logger
-from quast_libs.qutils import is_python2
+from quast_libs.qutils import compile_tool, get_path_to_program, run_parallel
 
 logger = get_logger(qconfig.LOGGER_DEFAULT_NAME)
 
@@ -50,18 +50,16 @@ def parse_gff(gff_path):
     gff_file.close()
 
 
-def glimmerHMM(tool_dir, fasta_fpath, out_fpath, gene_lengths, err_path, tmp_dir, index):
+def glimmerHMM(tool_dir, tool_exec_fpath, fasta_fpath, out_fpath, gene_lengths, err_path, tmp_dir, index):
     def run(contig_path, tmp_path):
         with open(err_path, 'a') as err_file:
             return_code = qutils.call_subprocess(
-                [tool_exec, contig_path, '-d', trained_dir, '-g', '-o', tmp_path],
+                [tool_exec_fpath, contig_path, '-d', trained_dir, '-g', '-o', tmp_path],
                 stdout=err_file,
                 stderr=err_file,
                 indent='  ' + qutils.index_to_str(index) + '  ')
             return return_code
 
-    tool_exec = os.path.join(tool_dir, 'glimmerhmm')
-
     # Note: why arabidopsis? for no particular reason, really.
     trained_dir = os.path.join(tool_dir, 'trained', 'arabidopsis')
 
@@ -110,7 +108,7 @@ def glimmerHMM(tool_dir, fasta_fpath, out_fpath, gene_lengths, err_path, tmp_dir
     return out_gff_path, genes, len(unique), total, full_cnt, partial_cnt
 
 
-def predict_genes(index, contigs_fpath, gene_lengths, out_dirpath, tool_dirpath, tmp_dirpath):
+def predict_genes(index, contigs_fpath, gene_lengths, out_dirpath, tool_dirpath, tool_exec_fpath, tmp_dirpath):
     assembly_label = qutils.label_from_fpath(contigs_fpath)
     corr_assembly_label = qutils.label_from_fpath_for_fname(contigs_fpath)
 
@@ -122,7 +120,7 @@ def predict_genes(index, contigs_fpath, gene_lengths, out_dirpath, tool_dirpath,
     #out_gff_path, out_fasta_path, unique, total, cnt = glimmerHMM(tool_dir,
     #    fasta_path, out_path, gene_lengths, err_path)
 
-    out_gff_path, genes, unique, total, full_genes, partial_genes = glimmerHMM(tool_dirpath,
+    out_gff_path, genes, unique, total, full_genes, partial_genes = glimmerHMM(tool_dirpath, tool_exec_fpath,
         contigs_fpath, out_fpath, gene_lengths, err_fpath, tmp_dirpath, index)
 
     if out_gff_path:
@@ -135,26 +133,10 @@ def predict_genes(index, contigs_fpath, gene_lengths, out_dirpath, tool_dirpath,
 def compile_glimmer(logger, only_clean=False):
     tool_dirpath = os.path.join(qconfig.LIBS_LOCATION, 'glimmer')
     tool_src_dirpath = os.path.join(tool_dirpath, 'src')
-    tool_exec_fpath = os.path.join(tool_dirpath, 'glimmerhmm')
-
-    if only_clean:
-        if os.path.isfile(tool_exec_fpath):
-            os.remove(tool_exec_fpath)
-        return True
-
-    if not os.path.isfile(tool_exec_fpath):
-        logger.main_info("Compiling GlimmerHMM...")
-        return_code = qutils.call_subprocess(
-            ['make', '-C', tool_src_dirpath],
-            stdout=open(os.path.join(tool_src_dirpath, 'make.log'), 'w'),
-            stderr=open(os.path.join(tool_src_dirpath, 'make.err'), 'w'),
-            indent='    ')
-        if return_code != 0 or not os.path.isfile(tool_exec_fpath):
-            logger.error("Failed to compile GlimmerHMM (" + tool_src_dirpath +
-                         ")!\nTry to compile it manually or do not use --gene-finding "
-                         "option with --eukaryote.\nUse --debug option to see the command lines.")
-            return None
-    return tool_exec_fpath
+
+    if not get_path_to_program('glimmerhmm', tool_dirpath):
+        compile_tool('GlimmerHMM', tool_src_dirpath, ['../glimmerhmm'], logger=logger, only_clean=only_clean)
+    return get_path_to_program('glimmerhmm', tool_dirpath)
 
 
 def do(contigs_fpaths, gene_lengths, out_dirpath):
@@ -173,30 +155,22 @@ def do(contigs_fpaths, gene_lengths, out_dirpath):
         os.makedirs(tmp_dirpath)
 
     n_jobs = min(len(contigs_fpaths), qconfig.max_threads)
-    if is_python2():
-        from joblib2 import Parallel, delayed
-    else:
-        from joblib3 import Parallel, delayed
-    if qconfig.memory_efficient:
-        results = Parallel(n_jobs=n_jobs)(delayed(predict_genes)(
-            index, contigs_fpath, gene_lengths, out_dirpath, tool_dirpath, tmp_dirpath)
-            for index, contigs_fpath in enumerate(contigs_fpaths))
-    else:
-        results = [predict_genes(index, contigs_fpath, gene_lengths, out_dirpath, tool_dirpath, tmp_dirpath)
-                   for index, contigs_fpath in enumerate(contigs_fpaths)]
+    parallel_args = [(index, contigs_fpath, gene_lengths, out_dirpath, tool_dirpath, tool_exec_fpath, tmp_dirpath)
+                     for index, contigs_fpath in enumerate(contigs_fpaths)]
+    genes_list, unique, full_genes, partial_genes = run_parallel(predict_genes, parallel_args, n_jobs)
 
     genes_by_labels = dict()
     # saving results
     for i, contigs_fpath in enumerate(contigs_fpaths):
         report = reporting.get(contigs_fpath)
         label = qutils.label_from_fpath(contigs_fpath)
-        genes_by_labels[label], unique, full_genes, partial_genes = results[i]
-        if unique is not None:
-            report.add_field(reporting.Fields.PREDICTED_GENES_UNIQUE, unique)
-        if full_genes is not None:
-            genes = ['%s + %s part' % (full_cnt, partial_cnt) for full_cnt, partial_cnt in zip(full_genes, partial_genes)]
+        genes_by_labels[label] = genes_list[i]
+        if unique[i] is not None:
+            report.add_field(reporting.Fields.PREDICTED_GENES_UNIQUE, unique[i])
+        if full_genes[i] is not None:
+            genes = ['%s + %s part' % (full_cnt, partial_cnt) for full_cnt, partial_cnt in zip(full_genes[i], partial_genes[i])]
             report.add_field(reporting.Fields.PREDICTED_GENES, genes)
-        if unique is None and full_genes is None:
+        if unique[i] is None and full_genes[i] is None:
             logger.error(
                 'Failed running Glimmer for %s. ' % label + ('Run with the --debug option'
                 ' to see the command line.' if not qconfig.debug else ''))
diff --git a/quast_libs/options_parser.py b/quast_libs/options_parser.py
index e6bb46ec..c56ceffb 100644
--- a/quast_libs/options_parser.py
+++ b/quast_libs/options_parser.py
@@ -749,7 +749,7 @@ def parse_options(logger, quast_args):
             if not is_metaquast:
                 qconfig.features = test_features
                 qconfig.operons = test_operons
-                qconfig.glimmer = True
+                qconfig.glimmer = False
                 if not qconfig.large_genome:  # special case -- large mode imposes eukaryote gene finding (GeneMark-ES) and our test data is too small for it.
                     qconfig.gene_finding = True
         if qconfig.test_sv:
