diff --git a/common/time/timetools.h b/common/time/timetools.h
index d944cf2..dd0a80e 100644
--- a/common/time/timetools.h
+++ b/common/time/timetools.h
@@ -3,6 +3,7 @@
 
 #include <string>
 #include <sys/time.h>
+#include <ctime>
 
 namespace BGIQD{
 namespace TIME{
diff --git a/main_src_ont/Makefile b/main_src_ont/Makefile
index d4ab8e6..c500e3d 100644
--- a/main_src_ont/Makefile
+++ b/main_src_ont/Makefile
@@ -3,7 +3,7 @@
 CC 		   ?=	gcc
 CXX 	   ?=	g++
 
-CXXFLAGS   +=	-std=c++11\
+CXXFLAGS   +=	-std=c++11 -no-pie\
 				-I../\
 
 
diff --git a/main_src_ont/tgsgapcandidate.cpp b/main_src_ont/tgsgapcandidate.cpp
index 73b34df..10209d7 100644
--- a/main_src_ont/tgsgapcandidate.cpp
+++ b/main_src_ont/tgsgapcandidate.cpp
@@ -188,9 +188,10 @@ struct AppConfig
         }
         pos_caches_non.clear();
     }
-    void LogAllChoose(const BGIQD::ONT::ONT2GapInfos & chooses ,
+    bool LogAllChoose(const BGIQD::ONT::ONT2GapInfos & chooses ,
             const BGIQD::stLFR::ContigDetail & prev )
     {
+        bool succ = false;
         for ( const auto & pair : chooses )
         {
             //auto & pair = chooses.front() ;
@@ -231,6 +232,7 @@ struct AppConfig
                 else 
                     cut_len += max_hang ;
                 cut_start = new_cut_start;
+                succ = true;
                 if( ! candidate_shake_filter )
                     UpdatePosCache(m1.target_name,cut_start , cut_start+cut_len-1 , false);
                 else
@@ -282,6 +284,7 @@ struct AppConfig
                 {
                     continue ;
                 }
+                succ = true;
                 if( ! candidate_shake_filter )
                     UpdatePosCache(m1.target_name,cut_start , cut_start+cut_len-1, false);
                 else
@@ -289,6 +292,7 @@ struct AppConfig
             }
         }
         CleanNonRepeatCache();
+        return succ;
     }
 
 
@@ -358,6 +362,7 @@ struct AppConfig
         int no_choose = 0 ;
         int no_match = 0 ;
         int nread_limit = 0;
+        int noverlap_f = 0 ;
 
         BGIQD::FREQ::Freq<int> gap_both_read_freq ;
         BGIQD::FREQ::Freq<int> gap_oo_read_freq ;
@@ -429,7 +434,8 @@ struct AppConfig
                 }
                 if( candidate_max > 0 )
                     SortAndFilterChoose(chooses);
-                LogAllChoose(chooses,prev);
+                if(LogAllChoose(chooses,prev) == false)
+                    noverlap_f ++ ;
             }
         }
         loger<<BGIQD::LOG::lstart()<<"#gaps : "<<gap_tatal<<BGIQD::LOG::lend() ;
@@ -437,6 +443,7 @@ struct AppConfig
         loger<<BGIQD::LOG::lstart()<<"#failed by no common alignment: "<<no_common<<BGIQD::LOG::lend() ;
         loger<<BGIQD::LOG::lstart()<<"#failed by orientation check: "<<no_choose<<BGIQD::LOG::lend() ;
         loger<<BGIQD::LOG::lstart()<<"#failed by nread check: "<<nread_limit<<BGIQD::LOG::lend() ;
+        loger<<BGIQD::LOG::lstart()<<"#failed by overlap check: "<<noverlap_f<<BGIQD::LOG::lend() ;
     }
 
     void PrintCandidate()
diff --git a/main_src_ont/tgsgapcloser.cpp b/main_src_ont/tgsgapcloser.cpp
index f3dd174..89094ea 100644
--- a/main_src_ont/tgsgapcloser.cpp
+++ b/main_src_ont/tgsgapcloser.cpp
@@ -371,6 +371,7 @@ struct AppConfig
                     pass_gap_size ++ ;
                     if( tmp.gap_size < 0 )
                     {
+                        ont_overlap = true ;
                         std::cerr
                                <<"overlap check c1="<< prev.contig_id<<'\t'
                                <<"and Try c2="<< next.contig_id<<'\t'
@@ -378,7 +379,6 @@ struct AppConfig
                         if( tmp.gap_size < -max_hang *1.3 )
                             continue ;
 
-                        ont_overlap = true ;
                         // verify this overlap
                         //const auto & left = contigs
                         int true_overlap = VerifyOverlap(
@@ -409,6 +409,7 @@ struct AppConfig
                         else
                             continue ;
                     }
+                    ont_overlap = false;
                     if( tmp.gap_size == 0 )
                     {
                         ont_negotive_gap_size ++ ;
diff --git a/tgsgapcloser b/tgsgapcloser
index ced4eec..466491e 100755
--- a/tgsgapcloser
+++ b/tgsgapcloser
@@ -410,8 +410,10 @@ else
 
         TMP_INPUT_SCAFF_INFO=$OUT_PREFIX".orignial_scaff_infos"
         check_file $TMP_INPUT_SCAFF_INFO
+        # pre filter unwanted alignments.
+        awk '{if(($3<1000000)||($2-$3<1000000)) print $0}' $OUT_PREFIX.sub.paf >$OUT_PREFIX.sub.filter.paf
         $Candidate --ont_reads_a $TGS_READS \
-        --contig2ont_paf $OUT_PREFIX.sub.paf \
+        --contig2ont_paf $OUT_PREFIX.sub.filter.paf \
         --min_nread $MIN_NREAD \
         --max_nread $MAX_NREAD \
         --candidate_max $MAX_CANDIDATE --candidate_shake_filter --candidate_merge \
@@ -626,14 +628,16 @@ else
 fi
 if [[ ! -e 'done_step_4.2_tag' ]] ; then
     print_info_line "4,2 , filling gaps ... "
+    # pre filter unwanted alignments.
+    awk '{if(($3<1000000)||($2-$3<1000000)) print $0}' $OUT_PREFIX.fill.paf >$OUT_PREFIX.fill.filter.paf
     if [[ $G_CHECK == 0 ]] ; then
-        $GapCloser --ont_reads_a $FINAL_READS --contig2ont_paf $OUT_PREFIX.fill.paf \
+        $GapCloser --ont_reads_a $FINAL_READS --contig2ont_paf $OUT_PREFIX.fill.filter.paf \
             --min_match=$MIN_MATCH --min_idy=$MIN_IDY \
             --prefix $OUT_PREFIX 1>$OUT_PREFIX.fill.log  2>&1|| exit 1
         # remove used paf 
         rm $OUT_PREFIX.fill.paf
     else
-        $GapCloser --ont_reads_a $FINAL_READS --contig2ont_paf $OUT_PREFIX.fill.paf \
+        $GapCloser --ont_reads_a $FINAL_READS --contig2ont_paf $OUT_PREFIX.fill.filter.paf \
             --min_match=$MIN_MATCH --min_idy=$MIN_IDY \
             --prefix $OUT_PREFIX --use_gapsize_check  1>$OUT_PREFIX.fill.log  2>&1|| exit 1
         rm $OUT_PREFIX.fill.paf
