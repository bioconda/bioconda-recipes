diff --git a/CMakeLists.txt b/CMakeLists.txt
index f4e3d4b..3a52a95 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -70,14 +70,9 @@ if(NOT CMAKE_BUILD_TYPE)
           "Choose the type of build, options are: Release|Debug|RelWithDebInfo (for distros)." FORCE)
 endif()
 
-if (${CMAKE_BUILD_TYPE} MATCHES Release)
-  set(EXTRA_FLAGS "-march=native -D_FILE_OFFSET_BITS=64")
-  # set(CMAKE_CXX_FLAGS_RELEASE "-DNDEBUG") # reset CXX_FLAGS to replace -O3 with -Ofast
-endif()
-
 if ((${CMAKE_BUILD_TYPE} MATCHES Release) OR (${CMAKE_BUILD_TYPE} MATCHES RelWithDebInfo))
-  set (CMAKE_C_FLAGS "${OpenMP_C_FLAGS} ${EXTRA_FLAGS}")
-  set (CMAKE_CXX_FLAGS "${OpenMP_CXX_FLAGS} ${EXTRA_FLAGS}")
+  set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${EXTRA_FLAGS}")
+  set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${EXTRA_FLAGS}")
 endif ()
 
 if (${CMAKE_BUILD_TYPE} MATCHES "Debug")
@@ -116,12 +111,22 @@ include_directories(contrib/multichoose)
 include_directories(contrib/filevercmp)
 include_directories(contrib/c-progress-bar)
 
-if(NOT HTSLIB_FOUND)
+if(HTSLIB_FOUND)
+  list(JOIN HTSLIB_CFLAGS " " HTSLIB_CFLAGS_STRING)
+  set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${HTSLIB_CFLAGS_STRING}")
+  set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${HTSLIB_CFLAGS_STRING}")
+else(HTSLIB_FOUND)
+  message(STATUS "Using included htslib")
   set(HTSLIB_LOCAL contrib/tabixpp/htslib)
-  set(TABIX_FOUND OFF) # also build tabixpp if htslib is missing
+  set(TABIXPP_FOUND OFF) # also build tabixpp if htslib is missing
 endif()
 
-if (NOT TABIX_FOUND)
+if (TABIXPP_FOUND)
+  list(JOIN TABIXPP_CFLAGS " " TABIXPP_CFLAGS_STRING)
+  set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${TABIXPP_CFLAGS_STRING}")
+  set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${TABIXPP_CFLAGS_STRING}")
+else(TABIXPP_FOUND)
+  message(STATUS "Using included tabixpp")
   set(TABIXPP_LOCAL contrib/tabixpp)
   include_directories(contrib/tabixpp)
   set(tabixpp_SOURCE
@@ -142,6 +147,11 @@ file(GLOB INCLUDES
   contrib/filevercmp/*.h*
   )
 
+set(vcfwfa_SOURCE
+    src/legacy.cpp # introduces a WFA dependency
+    src/vcf-wfa.cpp
+)
+
 set(vcflib_SOURCE
     src/vcf-c-api.cpp
     src/legacy.cpp
@@ -173,10 +183,14 @@ if (TABIXPP_LOCAL) # add the tabixpp source file
     list(APPEND vcflib_SOURCE ${tabixpp_SOURCE})
 endif()
 
-add_library(vcflib STATIC
+add_library(vcflib SHARED
     ${vcflib_SOURCE}
     )
 
+target_link_libraries(vcflib PUBLIC
+    tabixpp
+    )
+
 set(BINS
     vcfecho
     dumpContigsFromHeader
@@ -309,6 +323,10 @@ set(SCRIPTS
 file (STRINGS "VERSION" BUILD_NUMBER)
 add_definitions(-DVCFLIB_VERSION="${BUILD_NUMBER}")
 add_definitions(-DVERSION="${BUILD_NUMBER}")
+string(REGEX MATCH "^[0-9]+" MAJOR_BUILD_NUMBER ${BUILD_NUMBER})
+set_target_properties(vcflib PROPERTIES
+       SOVERSION ${MAJOR_BUILD_NUMBER}
+    )
 
 # ---- Build htslib
 #
@@ -320,7 +338,7 @@ if (HTSLIB_LOCAL)
 
   include_directories(${HTSLIB_LOCAL})
 
-  set(flags "-O2 -g -fPIC")
+  set(flags "-O3 -g -fPIC")
   ExternalProject_Add(htslib-EXT
     SOURCE_DIR "${CMAKE_SOURCE_DIR}/${HTSLIB_LOCAL}"
     UPDATE_COMMAND autoreconf -i
@@ -359,6 +377,7 @@ if (HTSLIB_LOCAL)
 endif(HTSLIB_LOCAL)
 
 if(WFA_GITMODULE)
+  message(STATUS "Using included libwfa")
   set(WFA_INCLUDE_DIRS ${WFA_LOCAL})
   # add_subdirectory(${WFA_LOCAL} EXCLUDE_FROM_ALL)
   add_subdirectory(${WFA_LOCAL})
@@ -366,10 +385,7 @@ if(WFA_GITMODULE)
 else(WFA_GITMODULE)
   include_directories($ENV{CMAKE_PREFIX_PATH}/include/wfa2lib)
   set(WFA_INCLUDE_DIRS ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_INCLUDEDIR}/wfa2lib)
-  find_library(WFALIB wfa2 wfa) # distro search for shared lib
-  if(NOT WFALIB)
-    message(STATUS "ERROR: Can not find libfwa! Make sure it is installed or use the git submodule instead")
-  endif()
+  find_library(WFALIB wfa2 wfa REQUIRED) # distro search for shared lib
 endif(WFA_GITMODULE)
 
 include_directories(${WFA_INCLUDE_DIRS})
@@ -437,14 +453,24 @@ add_dependencies(vcflib ${vcflib_DEPS})
 
 if (NOT BUILD_ONLY_LIB)
   foreach(BIN ${BINS})
-    add_executable(${BIN} src/${BIN}.cpp)
+    add_executable(${BIN} src/${BIN}.cpp ${vcfwfa_SOURCE})
     add_dependencies(${BIN} vcflib)
     target_link_libraries(${BIN} PUBLIC ${vcflib_LIBS} vcflib)
+    target_link_libraries(${BIN} PUBLIC ${vcflib_LIBS} ${WFALIB})
   endforeach(BIN ${BINS})
   # These binaries include WFALIB
   target_link_libraries(vcfallelicprimitives PUBLIC ${WFALIB})
   target_link_libraries(vcfcleancomplex PUBLIC ${WFALIB})
   target_link_libraries(vcfparsealts PUBLIC ${WFALIB})
+  target_link_libraries(vcfstreamsort PUBLIC ${WFALIB})
+  target_link_libraries(vcfuniq PUBLIC ${WFALIB})
+  target_link_libraries(vcfcreatemulti PUBLIC ${WFALIB})
+  target_link_libraries(vcfld PUBLIC ${WFALIB})
+  target_link_libraries(vcfecho PUBLIC ${WFALIB})
+  target_link_libraries(vcfuniqalleles PUBLIC ${WFALIB})
+  target_link_libraries(vcffilter PUBLIC ${WFALIB})
+  target_link_libraries(permuteGPAT++ PUBLIC ${WFALIB})
+  target_link_libraries(vcfintersect PUBLIC ${WFALIB})
   target_link_libraries(vcfroc PUBLIC ${WFALIB})
   target_link_libraries(vcfstats PUBLIC ${WFALIB})
   target_link_libraries(vcfwave PUBLIC ${WFALIB})
@@ -579,6 +605,8 @@ endif (PANDOC)
 
 install(TARGETS vcflib ARCHIVE DESTINATION ${CMAKE_INSTALL_BINDIR})
 
-install(FILES ${INCLUDES} DESTINATION include)
+install(FILES ${INCLUDES} DESTINATION include/vcflib)
+configure_file(${CMAKE_CURRENT_SOURCE_DIR}/vcflib.pc.in ${CMAKE_CURRENT_BINARY_DIR}/vcflib.pc @ONLY)
+install(FILES ${CMAKE_CURRENT_BINARY_DIR}/vcflib.pc DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)
 
 install(DIRECTORY ${CMAKE_SOURCE_DIR}/man/ DESTINATION ${CMAKE_INSTALL_PREFIX}/man/man1)
