diff --git a/CMakeLists.txt b/CMakeLists.txt
index 7e90114..5983481 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -69,11 +69,6 @@ if(NOT CMAKE_BUILD_TYPE)
           "Choose the type of build, options are: Release|Debug|RelWithDebInfo (for distros)." FORCE)
 endif()
 
-if (${CMAKE_BUILD_TYPE} MATCHES Release)
-  set(EXTRA_FLAGS "-march=native -D_FILE_OFFSET_BITS=64")
-  # set(CMAKE_CXX_FLAGS_RELEASE "-DNDEBUG") # reset CXX_FLAGS to replace -O3 with -Ofast
-endif()
-
 if ((${CMAKE_BUILD_TYPE} MATCHES Release) OR (${CMAKE_BUILD_TYPE} MATCHES RelWithDebInfo))
   set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${EXTRA_FLAGS}")
   set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${EXTRA_FLAGS}")
@@ -114,6 +109,7 @@ include_directories(contrib/smithwaterman)
 # include_directories(contrib/multichoose) merged with vcflib
 include_directories(contrib/filevercmp)
 include_directories(contrib/c-progress-bar)
+include_directories(contrib/WFA2-lib/wavefront)
 
 if(HTSLIB_FOUND)
   list(JOIN HTSLIB_CFLAGS " " HTSLIB_CFLAGS_STRING)
@@ -149,6 +145,10 @@ file(GLOB INCLUDES
   contrib/smithwaterman/*.h*
   contrib/fastahack/*.h*
   contrib/filevercmp/*.h*
+  contrib/WFA2-lib/wavefront/*.h*
+  contrib/WFA2-lib/utils/*.h*
+  contrib/WFA2-lib/alignment/*.h*
+  contrib/WFA2-lib/system/*.h*
   )
 
 set(vcfwfa_SOURCE
@@ -180,16 +180,59 @@ set(vcflib_SOURCE
     contrib/fsom/fsom.c
     contrib/filevercmp/filevercmp.c
     contrib/c-progress-bar/progress.c
+    contrib/WFA2-lib/wavefront/wavefront_align.c
+    contrib/WFA2-lib/wavefront/wavefront_aligner.c
+    contrib/WFA2-lib/wavefront/wavefront_attributes.c
+    contrib/WFA2-lib/wavefront/wavefront_backtrace_buffer.c
+    contrib/WFA2-lib/wavefront/wavefront_backtrace.c
+    contrib/WFA2-lib/wavefront/wavefront_backtrace_offload.c
+    contrib/WFA2-lib/wavefront/wavefront_bialign.c
+    contrib/WFA2-lib/wavefront/wavefront_bialigner.c
+    contrib/WFA2-lib/wavefront/wavefront.c
+    contrib/WFA2-lib/wavefront/wavefront_components.c
+    contrib/WFA2-lib/wavefront/wavefront_compute_affine2p.c
+    contrib/WFA2-lib/wavefront/wavefront_compute_affine.c
+    contrib/WFA2-lib/wavefront/wavefront_compute.c
+    contrib/WFA2-lib/wavefront/wavefront_compute_edit.c
+    contrib/WFA2-lib/wavefront/wavefront_compute_linear.c
+    contrib/WFA2-lib/wavefront/wavefront_debug.c
+    contrib/WFA2-lib/wavefront/wavefront_display.c
+    contrib/WFA2-lib/wavefront/wavefront_extend.c
+    contrib/WFA2-lib/wavefront/wavefront_heuristic.c
+    contrib/WFA2-lib/wavefront/wavefront_pcigar.c
+    contrib/WFA2-lib/wavefront/wavefront_penalties.c
+    contrib/WFA2-lib/wavefront/wavefront_plot.c
+    contrib/WFA2-lib/wavefront/wavefront_slab.c
+    contrib/WFA2-lib/wavefront/wavefront_unialign.c
+    contrib/WFA2-lib/system/profiler_counter.c
+    contrib/WFA2-lib/system/profiler_timer.c
+    contrib/WFA2-lib/system/mm_allocator.c
+    contrib/WFA2-lib/system/mm_stack.c
+    contrib/WFA2-lib/utils/bitmap.c
+    contrib/WFA2-lib/utils/dna_text.c
+    contrib/WFA2-lib/utils/sequence_buffer.c
+    contrib/WFA2-lib/utils/vector.c
+    contrib/WFA2-lib/utils/commons.c
+    contrib/WFA2-lib/utils/heatmap.c
+    contrib/WFA2-lib/alignment/affine2p_penalties.c
+    contrib/WFA2-lib/alignment/affine_penalties.c
+    contrib/WFA2-lib/alignment/cigar.c
+    contrib/WFA2-lib/alignment/score_matrix.c
 )
 
 if (TABIXPP_LOCAL) # add the tabixpp source file
     list(APPEND vcflib_SOURCE ${tabixpp_SOURCE})
 endif()
 
-add_library(vcflib STATIC
+add_library(vcflib SHARED
     ${vcflib_SOURCE}
     )
 
+target_link_libraries(vcflib PUBLIC
+    tabixpp
+    wfa2
+    )
+
 set(BINS
     vcfecho
     dumpContigsFromHeader
@@ -326,6 +369,10 @@ set(SCRIPTS
 file (STRINGS "VERSION" BUILD_NUMBER)
 add_definitions(-DVCFLIB_VERSION="${BUILD_NUMBER}")
 add_definitions(-DVERSION="${BUILD_NUMBER}")
+string(REGEX MATCH "^[0-9]+" MAJOR_BUILD_NUMBER ${BUILD_NUMBER})
+set_target_properties(vcflib PROPERTIES
+	SOVERSION ${MAJOR_BUILD_NUMBER}
+    )
 
 # ---- Build htslib
 #
@@ -337,11 +384,11 @@ if (HTSLIB_LOCAL)
 
   include_directories(${HTSLIB_LOCAL})
 
-  set(flags "-O2 -g -fPIC")
+  set(flags "-O3 -g -fPIC")
   ExternalProject_Add(htslib-EXT
     SOURCE_DIR "${CMAKE_SOURCE_DIR}/${HTSLIB_LOCAL}"
-    UPDATE_COMMAND autoreconf -i
-    CONFIGURE_COMMAND ./configure --disable-s3
+    UPDATE_COMMAND autoreconf -if
+    CONFIGURE_COMMAND ./configure --disable-s3 CC=${CC}
     INSTALL_COMMAND ""
     BUILD_IN_SOURCE ON
     BUILD_COMMAND $(MAKE) CFLAGS=${flags} lib-static
@@ -381,8 +428,8 @@ if(WFA_GITMODULE)
   add_subdirectory(${WFA_LOCAL})
   set(WFALIB wfa2) # pick up the wfa2 lib target from the included CMakeLists.txt
 else(WFA_GITMODULE)
-  include_directories($ENV{CMAKE_PREFIX_PATH}/include/wfa2lib)
-  set(WFA_INCLUDE_DIRS ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_INCLUDEDIR}/wfa2lib)
+  include_directories($ENV{PREFIX}/include/wfa2lib)
+  set(WFA_INCLUDE_DIRS ${PREFIX}/include/wfa2lib)
   find_library(WFALIB wfa2 wfa REQUIRED) # distro search for shared lib
 endif(WFA_GITMODULE)
 
@@ -457,13 +504,15 @@ if (NOT BUILD_ONLY_LIB)
   foreach(BIN ${BINS})
     add_executable(${BIN} src/${BIN}.cpp)
     add_dependencies(${BIN} vcflib)
-    target_link_libraries(${BIN} PUBLIC ${vcflib_LIBS} vcflib)
+    set_target_properties(${BIN} PROPERTIES SOVERSION 1)
+    target_link_libraries(${BIN} PUBLIC vcflib)
   endforeach(BIN ${BINS})
   foreach(WFBIN ${WFBINS})
     add_executable(${WFBIN} src/${WFBIN}.cpp ${vcfwfa_SOURCE})
     add_dependencies(${WFBIN} vcflib)
-    target_link_libraries(${WFBIN} PUBLIC ${vcflib_LIBS} vcflib)
-    target_link_libraries(${WFBIN} PUBLIC ${vcflib_LIBS} ${WFALIB})
+    set_target_properties(${WFBIN} PROPERTIES SOVERSION 1)
+    target_link_libraries(${WFBIN} PUBLIC vcflib)
+    target_link_libraries(${WFBIN} PUBLIC ${WFALIB})
   endforeach(WFBIN ${BINS})
   install(TARGETS ${BINS} RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})
 
@@ -595,8 +644,12 @@ endif (PANDOC)
 # ---- Install
 
 install(TARGETS vcflib ARCHIVE DESTINATION ${CMAKE_INSTALL_BINDIR})
-install(TARGETS ${WFALIB} ARCHIVE DESTINATION ${CMAKE_INSTALL_BINDIR})
+if(WFA_GITMODULE)
+  install(TARGETS ${WFALIB} ARCHIVE DESTINATION ${CMAKE_INSTALL_BINDIR})
+endif(WFA_GITMODULE)
 
-install(FILES ${INCLUDES} DESTINATION include/vcflib)
+install(FILES ${INCLUDES} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/vcflib)
+configure_file(${CMAKE_CURRENT_SOURCE_DIR}/vcflib.pc.in ${CMAKE_CURRENT_BINARY_DIR}/vcflib.pc @ONLY)
+install(FILES ${CMAKE_CURRENT_BINARY_DIR}/vcflib.pc DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)
 
 install(DIRECTORY ${CMAKE_SOURCE_DIR}/man/ DESTINATION ${CMAKE_INSTALL_PREFIX}/man/man1)
