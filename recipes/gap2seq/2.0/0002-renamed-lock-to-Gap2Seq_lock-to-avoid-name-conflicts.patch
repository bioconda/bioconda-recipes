From 02ed602ef70daf7f375cf40feb8d130094e1406d Mon Sep 17 00:00:00 2001
From: Ilya Shlyakhter <ilya_shl@alum.mit.edu>
Date: Tue, 23 May 2017 18:57:33 -0400
Subject: [PATCH 2/2] renamed lock to Gap2Seq_lock to avoid name conflicts when
 compiling with clang on osx

---
 src/Gap2Seq.cpp | 36 ++++++++++++++++++------------------
 1 file changed, 18 insertions(+), 18 deletions(-)

diff --git a/src/Gap2Seq.cpp b/src/Gap2Seq.cpp
index 9142484..2967db1 100755
--- a/src/Gap2Seq.cpp
+++ b/src/Gap2Seq.cpp
@@ -87,7 +87,7 @@ Gap2Seq::Gap2Seq ()  : Tool ("Gap2Seq")
 
 #ifndef SINGLE_THREAD
 // Synchronizer for access to global variables
-ISynchronizer *lock;
+ISynchronizer *Gap2Seq_lock;
 #endif
 
 /*********************************************************************
@@ -181,7 +181,7 @@ void Gap2Seq::execute ()
 
 #ifndef SINGLE_THREAD
   // Synchronization for output (both file and stdout)
-  lock = System::thread().newSynchronizer();
+  Gap2Seq_lock = System::thread().newSynchronizer();
   IDispatcher *d = getDispatcher();
   // Default group size is too big (one thread will do all the work...)
   d->setGroupSize(1);
@@ -208,7 +208,7 @@ void Gap2Seq::execute ()
     std::string seq = "";
     std::string comment = "";
     {
-      LocalSynchronizer local(lock);
+      LocalSynchronizer local(Gap2Seq_lock);
       if (!itSeq.isDone()) {
 	seq = itSeq->toString();
 	comment = itSeq->getComment();
@@ -237,7 +237,7 @@ void Gap2Seq::execute ()
 //     std::cout << comment << std::endl;
 // #else
 //     {
-//       LocalSynchronizer local(lock);
+//       LocalSynchronizer local(Gap2Seq_lock);
 //       std::cout << comment << std::endl;
 
 // #ifdef DEBUG
@@ -252,7 +252,7 @@ void Gap2Seq::execute ()
       if (seq[i] == 'N' || seq[i] == 'n') {
 #ifndef SINGLE_THREAD
 	{
-	  LocalSynchronizer local(lock);
+	  LocalSynchronizer local(Gap2Seq_lock);
 #endif
 	  gapcount++;
 #ifndef SINGLE_THREAD
@@ -291,7 +291,7 @@ void Gap2Seq::execute ()
 
 #ifndef SINGLE_THREAD
 	  {
-	    LocalSynchronizer local(lock);
+	    LocalSynchronizer local(Gap2Seq_lock);
 #endif
 
 	    if (s > 0 && (!unique_paths || s == 1)) {
@@ -374,7 +374,7 @@ void Gap2Seq::execute ()
     s._comment = comment;
 #ifndef SINGLE_THREAD
     {
-      LocalSynchronizer local(lock);
+      LocalSynchronizer local(Gap2Seq_lock);
 #endif
       output.insert(s);
       output.flush();
@@ -422,7 +422,7 @@ public:
     long long id = System::thread().getThreadSelf();
 #ifndef SINGLE_THREAD
     {
-      LocalSynchronizer local(lock);
+      LocalSynchronizer local(Gap2Seq_lock);
 #endif
       memuse[id] += n*sizeof(T);
 #ifndef SINGLE_THREAD
@@ -438,7 +438,7 @@ public:
     long long id = System::thread().getThreadSelf();
 #ifndef SINGLE_THREAD
     {
-      LocalSynchronizer local(lock);
+      LocalSynchronizer local(Gap2Seq_lock);
 #endif
       memuse[id] -= n*sizeof(T);
 #ifndef SINGLE_THREAD
@@ -872,7 +872,7 @@ int Gap2Seq::fill_gap(Graph graph, std::string kmer_left, std::string kmer_right
   long long id = System::thread().getThreadSelf();
 #ifndef SINGLE_THREAD
   {
-      LocalSynchronizer local(lock);
+      LocalSynchronizer local(Gap2Seq_lock);
 #endif
       memuse[id] = 0;
 #ifndef SINGLE_THREAD
@@ -927,7 +927,7 @@ int Gap2Seq::fill_gap(Graph graph, std::string kmer_left, std::string kmer_right
   long long mymemuse;
 #ifndef SINGLE_THREAD
   {
-      LocalSynchronizer local(lock);
+      LocalSynchronizer local(Gap2Seq_lock);
 #endif
       mymemuse = memuse[id];
 #ifndef SINGLE_THREAD
@@ -951,7 +951,7 @@ int Gap2Seq::fill_gap(Graph graph, std::string kmer_left, std::string kmer_right
     for (boost::unordered_set<Node, node_hash, equal_to<Node>, count_allocator<Node> >::iterator it = border.begin(); it != border.end(); ++ it) {
 #ifndef SINGLE_THREAD
       {
-	LocalSynchronizer local(lock);
+	LocalSynchronizer local(Gap2Seq_lock);
 #endif
 	mymemuse = memuse[id];
 #ifndef SINGLE_THREAD
@@ -1043,7 +1043,7 @@ int Gap2Seq::fill_gap(Graph graph, std::string kmer_left, std::string kmer_right
 
 #ifndef SINGLE_THREAD
     {
-      LocalSynchronizer local(lock);
+      LocalSynchronizer local(Gap2Seq_lock);
 #endif
       mymemuse = memuse[id];
 #ifndef SINGLE_THREAD
@@ -1104,7 +1104,7 @@ int Gap2Seq::fill_gap(Graph graph, std::string kmer_left, std::string kmer_right
 
 #ifndef SINGLE_THREAD
   {
-      LocalSynchronizer local(lock);
+      LocalSynchronizer local(Gap2Seq_lock);
 #endif
       mymemuse = memuse[id];
 #ifndef SINGLE_THREAD
@@ -1126,7 +1126,7 @@ int Gap2Seq::fill_gap(Graph graph, std::string kmer_left, std::string kmer_right
     for (boost::unordered_set<Node, node_hash, equal_to<Node>, count_allocator<Node> >::iterator it = border.begin(); it != border.end(); ++ it) {
 #ifndef SINGLE_THREAD
       {
-	LocalSynchronizer local(lock);
+	LocalSynchronizer local(Gap2Seq_lock);
 #endif
 	mymemuse = memuse[id];
 #ifndef SINGLE_THREAD
@@ -1177,7 +1177,7 @@ int Gap2Seq::fill_gap(Graph graph, std::string kmer_left, std::string kmer_right
     
 #ifndef SINGLE_THREAD
     {
-      LocalSynchronizer local(lock);
+      LocalSynchronizer local(Gap2Seq_lock);
 #endif
       mymemuse = memuse[id];
 #ifndef SINGLE_THREAD
@@ -1580,7 +1580,7 @@ int Gap2Seq::fill_gap(Graph graph, std::string kmer_left, std::string kmer_right
 
 #ifndef SINGLE_THREAD
     {
-      LocalSynchronizer local(lock);
+      LocalSynchronizer local(Gap2Seq_lock);
 #endif
       mymemuse = memuse[id];
 #ifndef SINGLE_THREAD
@@ -1640,7 +1640,7 @@ int Gap2Seq::fill_gap(Graph graph, std::string kmer_left, std::string kmer_right
 #ifdef STATS
 #ifndef SINGLE_THREAD
   {
-      LocalSynchronizer local(lock);
+      LocalSynchronizer local(Gap2Seq_lock);
 #endif
       std::cout << "Nodes: " << n << " Nonzeros: " << nz << " Total memory: " << memuse[id] << std::endl; 
 #ifndef SINGLE_THREAD
-- 
2.6.4

