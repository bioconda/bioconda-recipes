From 63cf28175dc0f0c4e590153f7f7a703c24cc0a2e Mon Sep 17 00:00:00 2001
From: Ilya Shlyakhter <ilya_shl@alum.mit.edu>
Date: Tue, 23 May 2017 16:20:18 -0400
Subject: [PATCH] use boost unordered map and set in lieu of standard

---
 src/Gap2Seq.cpp   | 24 ++++++++++++------------
 src/GapCutter.cpp |  4 +---
 src/GapMerger.cpp |  4 +---
 3 files changed, 14 insertions(+), 18 deletions(-)

diff --git a/src/Gap2Seq.cpp b/src/Gap2Seq.cpp
index bd6a557..9142484 100755
--- a/src/Gap2Seq.cpp
+++ b/src/Gap2Seq.cpp
@@ -22,8 +22,8 @@
 #include <Gap2Seq.hpp>
 #include <map>
 #include <fstream>
-#include <unordered_map>
-#include <unordered_set>
+#include <boost/unordered_map.hpp>
+#include <boost/unordered_set.hpp>
 
 #include <boost/graph/adjacency_list.hpp>
 #include <boost/graph/graphviz.hpp>
@@ -400,7 +400,7 @@ void Gap2Seq::execute ()
 // Threadwise memory limit using std allocators
 
 // Array of memory usage accessed by thread id
-unordered_map<long long, long long> memuse;
+boost::unordered_map<long long, long long> memuse;
 
 // Custom memory allocator to be used with stl containers
 template <typename T>
@@ -880,10 +880,10 @@ int Gap2Seq::fill_gap(Graph graph, std::string kmer_left, std::string kmer_right
 #endif
 
   // Border sets for breadth first search
-  std::unordered_set<Node, node_hash, equal_to<Node>, count_allocator<Node> > border;
-  std::unordered_set<Node, node_hash, equal_to<Node>, count_allocator<Node> > nextBorder;
+  boost::unordered_set<Node, node_hash, equal_to<Node>, count_allocator<Node> > border;
+  boost::unordered_set<Node, node_hash, equal_to<Node>, count_allocator<Node> > nextBorder;
 
-  unordered_map<Node, map_element2 *, node_hash, equal_to<Node>, count_allocator< pair <const Node, map_element2 *> > > reachableSetRight;
+  boost::unordered_map<Node, map_element2 *, node_hash, equal_to<Node>, count_allocator< pair <const Node, map_element2 *> > > reachableSetRight;
 
 #ifdef DEBUG
   std::cout << "Search from right end" << std::endl;
@@ -948,7 +948,7 @@ int Gap2Seq::fill_gap(Graph graph, std::string kmer_left, std::string kmer_right
     std::cout << "Border size: " << border.size() << std::endl;
 #endif
 
-    for (std::unordered_set<Node, node_hash, equal_to<Node>, count_allocator<Node> >::iterator it = border.begin(); it != border.end(); ++ it) {
+    for (boost::unordered_set<Node, node_hash, equal_to<Node>, count_allocator<Node> >::iterator it = border.begin(); it != border.end(); ++ it) {
 #ifndef SINGLE_THREAD
       {
 	LocalSynchronizer local(lock);
@@ -1059,7 +1059,7 @@ int Gap2Seq::fill_gap(Graph graph, std::string kmer_left, std::string kmer_right
   int count = 0;
 
   // The set of nodes reached so far
-  unordered_map<Node, map_element *, node_hash, equal_to<Node>, count_allocator< pair <const Node, map_element *> > > reachableSetLeft;
+  boost::unordered_map<Node, map_element *, node_hash, equal_to<Node>, count_allocator< pair <const Node, map_element *> > > reachableSetLeft;
 
 #ifdef DEBUG
   std::cout << "Search from left end" << std::endl;
@@ -1123,7 +1123,7 @@ int Gap2Seq::fill_gap(Graph graph, std::string kmer_left, std::string kmer_right
     std::cout << "Border size: " << border.size() << std::endl;
 #endif
 
-    for (std::unordered_set<Node, node_hash, equal_to<Node>, count_allocator<Node> >::iterator it = border.begin(); it != border.end(); ++ it) {
+    for (boost::unordered_set<Node, node_hash, equal_to<Node>, count_allocator<Node> >::iterator it = border.begin(); it != border.end(); ++ it) {
 #ifndef SINGLE_THREAD
       {
 	LocalSynchronizer local(lock);
@@ -1311,12 +1311,12 @@ int Gap2Seq::fill_gap(Graph graph, std::string kmer_left, std::string kmer_right
 	  typedef boost::adjacency_list<boost::vecS, boost::vecS, boost::bidirectionalS > digraph;
 	  typedef boost::graph_traits<digraph>::vertex_descriptor bnode ;
 	  digraph subgraph(0);
-	  std::unordered_map<Node, bnode, node_hash, equal_to<Node>, count_allocator< pair <const Node, map_element *> > > node2boost;
+	  boost::unordered_map<Node, bnode, node_hash, equal_to<Node>, count_allocator< pair <const Node, map_element *> > > node2boost;
 	  int *branch = NULL;
 
 	  if (!skip_confident) {
-	    std::unordered_set<Node, node_hash, equal_to<Node>, count_allocator<Node> > backBorder;
-	    std::unordered_set<Node, node_hash, equal_to<Node>, count_allocator<Node> > nextBackBorder;
+	    boost::unordered_set<Node, node_hash, equal_to<Node>, count_allocator<Node> > backBorder;
+	    boost::unordered_set<Node, node_hash, equal_to<Node>, count_allocator<Node> > nextBackBorder;
 
 	    backBorder.insert(rnode);
 	    node2boost[rnode] = boost::add_vertex(subgraph);
diff --git a/src/GapCutter.cpp b/src/GapCutter.cpp
index 9e55530..d99dfd3 100644
--- a/src/GapCutter.cpp
+++ b/src/GapCutter.cpp
@@ -20,8 +20,6 @@
 
 #include <map>
 #include <fstream>
-#include <unordered_map>
-#include <unordered_set>
 
 #include <gatb/gatb_core.hpp>
 
@@ -239,4 +237,4 @@ int main (int argc, char* argv[])
     }
 
     return EXIT_SUCCESS;
-}
\ No newline at end of file
+}
diff --git a/src/GapMerger.cpp b/src/GapMerger.cpp
index 50d8f97..cd41e3f 100644
--- a/src/GapMerger.cpp
+++ b/src/GapMerger.cpp
@@ -20,8 +20,6 @@
 
 #include <map>
 #include <fstream>
-#include <unordered_map>
-#include <unordered_set>
 
 #include <gatb/gatb_core.hpp>
 
@@ -211,4 +209,4 @@ int main (int argc, char* argv[])
     }
 
     return EXIT_SUCCESS;
-}
\ No newline at end of file
+}
-- 
2.6.4

