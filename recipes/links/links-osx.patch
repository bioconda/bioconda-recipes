--- lib/bloomfilter/BloomFilter.hpp	2018-10-25 10:04:43.000000000 -0700
+++ BloomFilter.patch.hpp	2021-06-03 09:31:53.000000000 -0700
@@ -65,7 +65,7 @@
 	 *
 	 * kmerSize refers to the number of bases the kmer has
 	 */
-	BloomFilter(size_t filterSize, unsigned hashNum, unsigned kmerSize) :
+	BloomFilter(uint64_t filterSize, unsigned hashNum, unsigned kmerSize) :
 		m_filter(NULL), m_size(filterSize), m_hashNum(hashNum),
 		m_kmerSize(kmerSize), m_dFPR(0), m_nEntry(0), m_tEntry(0)
 	{
@@ -77,7 +77,7 @@
 	 *
 	 * If hashNum is set to 0, an optimal value is computed based on the FPR
 	 */
-	BloomFilter(size_t expectedElemNum, double fpr, unsigned hashNum,
+	BloomFilter(uint64_t expectedElemNum, double fpr, unsigned hashNum,
 			unsigned kmerSize) :
 			m_size(0), m_hashNum(hashNum), m_kmerSize(kmerSize), m_dFPR(fpr), m_nEntry(
 					0), m_tEntry(0) {
@@ -107,7 +107,7 @@
 
 		long int lCurPos = ftell(file);
 		fseek(file, 0, 2);
-		size_t fileSize = ftell(file) - sizeof(struct FileHeader);
+		uint64_t fileSize = ftell(file) - sizeof(struct FileHeader);
 		fseek(file, lCurPos, 0);
 		if (fileSize != m_sizeInBytes) {
 			cerr << "Error: " << filterFilePath
@@ -116,7 +116,7 @@
 			exit(1);
 		}
 
-		size_t countRead = fread(m_filter, fileSize, 1, file);
+		uint64_t countRead = fread(m_filter, fileSize, 1, file);
 		if (countRead != 1 && fclose(file) != 0) {
 			cerr << "file \"" << filterFilePath << "\" could not be read."
 					<< endl;
@@ -350,7 +350,7 @@
 	/*
 	 * Checks filter size and initializes filter
 	 */
-	void initSize(size_t size) {
+	void initSize(uint64_t size) {
 		if (size % 8 != 0) {
 			cerr << "ERROR: Filter Size \"" << size
 					<< "\" is not a multiple of 8." << endl;
@@ -367,8 +367,8 @@
 	 * Is an estimated size using approximations of FPR formula
 	 * given the number of hash functions
 	 */
-	size_t calcOptimalSize(size_t entries, double fpr) const {
-		size_t non64ApproxVal = size_t(
+	uint64_t calcOptimalSize(uint64_t entries, double fpr) const {
+		uint64_t non64ApproxVal = uint64_t(
 				-double(entries) * double(m_hashNum)
 						/ log(1.0 - pow(fpr, double(1 / double(m_hashNum)))));
 
@@ -387,7 +387,7 @@
 	 * Calculate FPR based on hash functions, size and number of entries
 	 * see http://en.wikipedia.org/wiki/Bloom_filter
 	 */
-	double calcFPR_numInserted(size_t numEntr) const {
+	double calcFPR_numInserted(uint64_t numEntr) const {
 		return pow(
 				1.0
 						- pow(1.0 - 1.0 / double(m_size),
@@ -402,8 +402,8 @@
 	}
 
 	uint8_t* m_filter;
-	size_t m_size;
-	size_t m_sizeInBytes;
+	uint64_t m_size;
+	uint64_t m_sizeInBytes;
 	unsigned m_hashNum;
 	unsigned m_kmerSize;
 	double m_dFPR;
--- lib/bloomfilter/nthash.hpp	2018-10-25 10:04:44.000000000 -0700
+++ nthash.hpp.patch	2021-06-03 09:42:15.000000000 -0700
@@ -153,13 +153,13 @@
 };
 
 /*// assembly rol
-inline uint64_t rol (uint64_t v, size_t n) {
+inline uint64_t rol (uint64_t v, uint64_t n) {
     asm("rol %b1, %0":"+r,r"(v):"i,c"(n));
     return (v);
 }
 
 // assembly ror
-inline uint64_t ror (uint64_t v, size_t n) {
+inline uint64_t ror (uint64_t v, uint64_t n) {
     asm("ror %b1, %0":"+r,r"(v):"i,c"(n));
     return (v);
 }*/
--- lib/bloomfilter/ntHashIterator.hpp	2018-10-25 10:04:44.000000000 -0700
+++ ntHashIterator.hpp.patch	2021-06-03 09:43:07.000000000 -0700
@@ -26,7 +26,7 @@
     */
     ntHashIterator():
         m_hVec(NULL),
-        m_pos(std::numeric_limits<std::size_t>::max())
+        m_pos(std::numeric_limits<std::uint64_t>::max())
     {}
 
     /**
@@ -45,14 +45,14 @@
     void init()
     {
         if (m_k > m_seq.length()) {
-            m_pos = std::numeric_limits<std::size_t>::max();
+            m_pos = std::numeric_limits<std::uint64_t>::max();
             return;
         }
         unsigned locN=0;
         while (m_pos<m_seq.length()-m_k+1 && !NTMC64(m_seq.data()+m_pos, m_k, m_h, m_fhVal, m_rhVal, locN, m_hVec, m_hStn))
             m_pos+=locN+1;
         if (m_pos >= m_seq.length()-m_k+1)
-            m_pos = std::numeric_limits<std::size_t>::max();
+            m_pos = std::numeric_limits<std::uint64_t>::max();
 		for (unsigned i = 0; i < m_h; ++i) {
 			m_hStnArray[i] = m_hStn;
 		}
@@ -63,7 +63,7 @@
     {
         ++m_pos;
         if (m_pos >= m_seq.length()-m_k+1) {
-            m_pos = std::numeric_limits<std::size_t>::max();
+            m_pos = std::numeric_limits<std::uint64_t>::max();
             return;
         }
         if(seedTab[(unsigned char)(m_seq.at(m_pos+m_k-1))]==seedN) {
@@ -77,7 +77,7 @@
 		}
     }
     
-    size_t pos() const{
+    uint64_t pos() const{
     	return m_pos;
     }
 
@@ -151,7 +151,7 @@
     bool *m_hStnArray;
 
     /** position of current k-mer */
-    size_t m_pos;
+    uint64_t m_pos;
 
     /** forward-strand k-mer hash value */
     uint64_t m_fhVal;
--- lib/bloomfilter/swig/BloomFilter.i	2018-10-25 10:04:45.000000000 -0700
+++ swig/BloomFilter.i.patch	2021-06-03 09:43:47.000000000 -0700
@@ -5,7 +5,7 @@
 /*%apply const uint64_t& { uint64_t & };*/
 /*%apply uint64_t& INOUT {uint64_t& fhVal, uint64_t& rhVal};*/
 namespace std {
-   %template(SizetVector) vector<size_t>;
+   %template(SizetVector) vector<uint64_t>;
 }
 
 %{
@@ -22,20 +22,20 @@
 public:
         KmerBloomFilter();
         ~KmerBloomFilter();
-        KmerBloomFilter(size_t filterSize, unsigned hashNum, unsigned kmerSize);
+        KmerBloomFilter(uint64_t filterSize, unsigned hashNum, unsigned kmerSize);
         KmerBloomFilter(const string &filterFilePath);
 
-        void insert(vector<size_t> const &precomputed);
+        void insert(vector<uint64_t> const &precomputed);
         void insert(const char* kmer);
 
-        bool contains(vector<size_t> const &values);
+        bool contains(vector<uint64_t> const &values);
         bool contains(const char* kmer);
 
         void storeFilter(string const &filterFilePath);
-        size_t getPop();
+        uint64_t getPop();
         unsigned getHashNum();
         unsigned getKmerSize();
-        size_t getFilterSize();
+        uint64_t getFilterSize();
 };
 
 /*
--- lib/bloomfilter/KmerBloomFilter.hpp	2018-10-25 10:04:44.000000000 -0700
+++ KmerBloomFilter.hpp.patch	2021-06-03 09:44:41.000000000 -0700
@@ -30,7 +30,7 @@
 	 *
 	 * kmerSize refers to the number of bases the kmer has
 	 */
-	KmerBloomFilter(size_t filterSize, unsigned hashNum, unsigned kmerSize) :
+	KmerBloomFilter(uint64_t filterSize, unsigned hashNum, unsigned kmerSize) :
 			BloomFilter(filterSize, hashNum, kmerSize) {
 	}
 
@@ -46,7 +46,7 @@
 	 */
 	bool contains(const char* kmer) const {
 		uint64_t hVal = NTPC64(kmer, m_kmerSize);
-		size_t normalizedValue = hVal % m_size;
+		uint64_t normalizedValue = hVal % m_size;
 		unsigned char bit = bitMask[normalizedValue % bitsPerChar];
 		if ((m_filter[normalizedValue / bitsPerChar] & bit) == 0)
 			return false;
@@ -61,11 +61,11 @@
 
 	void insert(const char* kmer) {
 		uint64_t hVal = NTPC64(kmer, m_kmerSize);
-		size_t normalizedValue = hVal % m_size;
+		uint64_t normalizedValue = hVal % m_size;
 		__sync_fetch_and_or(&m_filter[normalizedValue / bitsPerChar],
 				bitMask[normalizedValue % bitsPerChar]);
 		for (unsigned i = 1; i < m_hashNum; i++) {
-			size_t normalizedValue = NTE64(hVal, m_kmerSize, i) % m_size;
+			uint64_t normalizedValue = NTE64(hVal, m_kmerSize, i) % m_size;
 			__sync_fetch_and_or(&m_filter[normalizedValue / bitsPerChar],
 					bitMask[normalizedValue % bitsPerChar]);
 		}
