# Migrated from https://anaconda.org/jakirkham/rsa/

package:
  name: rsa
  version: "3.1.4"

source:
  fn: rsa-3.1.4.tar.gz
  url: https://pypi.python.org/packages/source/r/rsa/rsa-3.1.4.tar.gz
  md5: b6b1c80e1931d4eba8538fd5d4de1355
#  patches:
   # List any patch files here
   # - fix.patch

build:
  skip: False
  # preserve_egg_dir: True
  entry_points:
    # Put any entry points (scripts to be generated automatically) here. The
    # syntax is module:function.  For example
    #
    # - rsa = rsa:main
    #
    # Would create an entry point called rsa that calls rsa.main()

    - pyrsa-priv2pub = rsa.util:private_to_public
    - pyrsa-keygen = rsa.cli:keygen
    - pyrsa-encrypt = rsa.cli:encrypt
    - pyrsa-decrypt = rsa.cli:decrypt
    - pyrsa-sign = rsa.cli:sign
    - pyrsa-verify = rsa.cli:verify
    - pyrsa-encrypt-bigfile = rsa.cli:encrypt_bigfile
    - pyrsa-decrypt-bigfile = rsa.cli:decrypt_bigfile

  # If this is a new build for the same version, increment the build
  # number. If you do not include this key, it defaults to 0.
  # number: 1

requirements:
  build:
    - python
    - setuptools
    - pyasn1 >=0.1.3

  run:
    - python
    - pyasn1 >=0.1.3

test:
  # Python imports
  imports:
    - rsa

  commands:
    # You can put test commands to be run here.  Use this to test that the
    # entry points work.

    - pyrsa-priv2pub --help
    - pyrsa-keygen --help
    - pyrsa-encrypt --help
    - pyrsa-decrypt --help
    - pyrsa-sign --help
    - pyrsa-verify --help
    - pyrsa-encrypt-bigfile --help
    - pyrsa-decrypt-bigfile --help

  # You can also put a file called run_test.py in the recipe that will be run
  # at test time.

  # requires:
    # Put any additional test requirements here.  For example
    # - nose

about:
  home: http://stuvel.eu/rsa
  license: Apache Software License
  summary: 'Pure-Python RSA implementation'

# See
# http://docs.continuum.io/conda/build.html for
# more information about meta.yaml
