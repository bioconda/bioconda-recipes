diff -Naur sdm-1.73/.gitignore nsoranzo_sdm/.gitignore
--- sdm-1.73/.gitignore	2021-02-12 11:59:41.000000000 +0000
+++ nsoranzo_sdm/.gitignore	2021-02-13 03:35:02.714757311 +0000
@@ -1,3 +1,4 @@
+sdm
 ## Ignore Visual Studio temporary files, build results, and
 ## files generated by popular Visual Studio add-ons.
 
@@ -49,6 +50,7 @@
 *.ilk
 *.meta
 *.obj
+*.o
 *.pch
 *.pdb
 *.pgc
diff -Naur sdm-1.73/Makefile nsoranzo_sdm/Makefile
--- sdm-1.73/Makefile	2021-02-12 11:59:41.000000000 +0000
+++ nsoranzo_sdm/Makefile	2021-02-13 03:35:02.722757312 +0000
@@ -16,7 +16,7 @@
 program_LIBRARIES :=
 
 
-CPPFLAGS +=-Wall -O3 -lz -D__USE_XOPEN2K8 -std=c++17 -pthread
+CPPFLAGS +=-Wall -O3 -D__USE_XOPEN2K8 -std=c++17 -pthread
 CPPFLAGS += $(foreach includedir,$(program_INCLUDE_DIRS),-I$(includedir))
 LDFLAGS += $(foreach librarydir,$(program_LIBRARY_DIRS),-L$(librarydir))
 LDFLAGS += $(foreach library,$(program_LIBRARIES),-l$(library))
@@ -37,7 +37,7 @@
 clean:
 	@- $(RM) $(program_NAME)
 	@- $(RM) $(program_OBJS)
-	rm sdm
+	@- $(RM) sdm
 
 distclean: clean
 
diff -Naur sdm-1.73/Math.h nsoranzo_sdm/Math.h
--- sdm-1.73/Math.h	2021-02-12 11:59:41.000000000 +0000
+++ nsoranzo_sdm/Math.h	1970-01-01 01:00:00.000000000 +0100
@@ -1,34 +0,0 @@
-#pragma once
-#include <stdio.h>
-//#include <tchar.h>
-#include <string>
-#include <vector>
-#include <fstream>
-#include <sstream>
-#include <iostream>
-//#include <string.h>
-#include <string>
-#include <map>
-#include <stdlib.h>
-#include <algorithm>
-#include <time.h>
-#include <random>
-
-#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) && !defined(__CYGWIN__)
-#define _gziprea//d
-#else
-#define _gzipread
-#endif
-
-
-
-//#ifdef _gzipread
-//#include "gzstream.h"
-//#endif
-
-const bool verbose=1;
-
-
-int getRand(int until);
-
-void swap(int &x,int &y);
diff -Naur sdm-1.73/strict_fstream.hpp nsoranzo_sdm/strict_fstream.hpp
--- sdm-1.73/strict_fstream.hpp	2021-02-12 11:59:41.000000000 +0000
+++ nsoranzo_sdm/strict_fstream.hpp	2021-02-13 03:35:02.730757312 +0000
@@ -1,10 +1,10 @@
-#ifndef __STRICT_FSTREAM_HPP
-#define __STRICT_FSTREAM_HPP
+#pragma once
 
 #include <cassert>
 #include <fstream>
 #include <cstring>
 #include <string>
+#include <vector>
 
 /**
  * This namespace defines wrappers for std::ifstream, std::ofstream, and
@@ -17,30 +17,66 @@
 namespace strict_fstream
 {
 
-/// Overload of error-reporting function, to enable use with VS.
-/// Ref: http://stackoverflow.com/a/901316/717706
+// Help people out a bit, it seems like this is a common recommenation since
+// musl breaks all over the place.
+#if defined(__NEED_size_t) && !defined(__MUSL__)
+#warning "It seems to be recommended to patch in a define for __MUSL__ if you use musl globally: https://www.openwall.com/lists/musl/2013/02/10/5"
+#define __MUSL__
+#endif
+
+// Workaround for broken musl implementation
+// Since musl insists that they are perfectly compatible, ironically enough,
+// they don't officially have a __musl__ or similar. But __NEED_size_t is defined in their
+// relevant header (and not in working implementations), so we can use that.
+#ifdef __MUSL__
+#warning "Working around broken strerror_r() implementation in musl, remove when musl is fixed"
+#endif
+
+// Non-gnu variants of strerror_* don't necessarily null-terminate if
+// truncating, so we have to do things manually.
+inline std::string trim_to_null(const std::vector<char> &buff)
+{
+    std::string ret(buff.begin(), buff.end());
+
+    const std::string::size_type pos = ret.find('\0');
+    if (pos == std::string::npos) {
+        ret += " [...]"; // it has been truncated
+    } else {
+        ret.resize(pos);
+    }
+    return ret;
+}
+
+/// Overload of error-reporting function, to enable use with VS and non-GNU
+/// POSIX libc's
+/// Ref:
+///   - http://stackoverflow.com/a/901316/717706
 static std::string strerror()
 {
-    std::string buff(80, '\0');
+    // Can't use std::string since we're pre-C++17
+    std::vector<char> buff(256, '\0');
+
 #ifdef _WIN32
-    if (strerror_s(&buff[0], buff.size(), errno) != 0)
-    {
-        buff = "Unknown error";
+    // Since strerror_s might set errno itself, we need to store it.
+    const int err_num = errno;
+    if (strerror_s(buff.data(), buff.size(), err_num) != 0) {
+        return trim_to_null(buff);
+    } else {
+        return "Unknown error (" + std::to_string(err_num) + ")";
     }
-#elif (_POSIX_C_SOURCE >= 200112L || _XOPEN_SOURCE >= 600) && ! _GNU_SOURCE
+#elif ((_POSIX_C_SOURCE >= 200112L || _XOPEN_SOURCE >= 600 || defined(__APPLE__)) && ! _GNU_SOURCE) || defined(__MUSL__)
 // XSI-compliant strerror_r()
-    if (strerror_r(errno, &buff[0], buff.size()) != 0)
-    {
-        buff = "Unknown error";
+    const int err_num = errno; // See above
+    if (strerror_r(err_num, buff.data(), buff.size()) == 0) {
+        return trim_to_null(buff);
+    } else {
+        return "Unknown error (" + std::to_string(err_num) + ")";
     }
 #else
 // GNU-specific strerror_r()
-    auto p = strerror_r(errno, &buff[0], buff.size());
-    std::string tmp(p, std::strlen(p));
-    std::swap(buff, tmp);
+    char * p = strerror_r(errno, &buff[0], buff.size());
+    return std::string(p, std::strlen(p));
 #endif
-    buff.resize(buff.find('\0'));
-    return buff;
 }
 
 /// Exception class thrown by failed operations.
@@ -125,7 +161,7 @@
             is_p->peek();
             peek_failed = is_p->fail();
         }
-        catch (std::ios_base::failure e) {}
+        catch (const std::ios_base::failure &) {}
         if (peek_failed)
         {
             throw Exception(std::string("strict_fstream: open('")
@@ -199,4 +235,3 @@
 
 } // namespace strict_fstream
 
-#endif
