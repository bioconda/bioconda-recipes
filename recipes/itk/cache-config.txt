// Path to a program.
CMAKE_AR:FILEPATH=/usr/bin/ar

// Enable/Disable color output during build.
CMAKE_COLOR_MAKEFILE:BOOL=ON

// CXX compiler.
CMAKE_CXX_COMPILER:FILEPATH=/usr/bin/c++

// Flags used by the compiler during all build types.
CMAKE_CXX_FLAGS:STRING=

// Flags used by the compiler during debug builds.
CMAKE_CXX_FLAGS_DEBUG:STRING=-g

// Flags used by the compiler during release builds for minimum size.
CMAKE_CXX_FLAGS_MINSIZEREL:STRING=-Os -DNDEBUG

// Flags used by the compiler during release builds.
CMAKE_CXX_FLAGS_RELEASE:STRING=-O3 -DNDEBUG

// Flags used by the compiler during release builds with debug info.
CMAKE_CXX_FLAGS_RELWITHDEBINFO:STRING=-O2 -g -DNDEBUG

// C compiler.
CMAKE_C_COMPILER:FILEPATH=/usr/bin/cc

// Flags used by the compiler during all build types.
CMAKE_C_FLAGS:STRING=

// Flags used by the compiler during debug builds.
CMAKE_C_FLAGS_DEBUG:STRING=-g

// Flags used by the compiler during release builds for minimum size.
CMAKE_C_FLAGS_MINSIZEREL:STRING=-Os -DNDEBUG

// Flags used by the compiler during release builds.
CMAKE_C_FLAGS_RELEASE:STRING=-O3 -DNDEBUG

// Flags used by the compiler during release builds with debug info.
CMAKE_C_FLAGS_RELWITHDEBINFO:STRING=-O2 -g -DNDEBUG

// Flags used by the linker.
CMAKE_EXE_LINKER_FLAGS:STRING= 

// Flags used by the linker during debug builds.
CMAKE_EXE_LINKER_FLAGS_DEBUG:STRING=

// Flags used by the linker during release minsize builds.
CMAKE_EXE_LINKER_FLAGS_MINSIZEREL:STRING=

// Flags used by the linker during release builds.
CMAKE_EXE_LINKER_FLAGS_RELEASE:STRING=

// Flags used by the linker during Release with Debug Info builds.
CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO:STRING=

// Enable/Disable output of compile commands during generation.
CMAKE_EXPORT_COMPILE_COMMANDS:BOOL=OFF

// Install path prefix, prepended onto install directories.
CMAKE_INSTALL_PREFIX:PATH=/local/froger/miniconda/envs/_build

// Path to a program.
CMAKE_LINKER:FILEPATH=/usr/bin/ld

// Path to a program.
CMAKE_MAKE_PROGRAM:FILEPATH=/usr/bin/make

// Flags used by the linker during the creation of modules.
CMAKE_MODULE_LINKER_FLAGS:STRING= 

// Flags used by the linker during debug builds.
CMAKE_MODULE_LINKER_FLAGS_DEBUG:STRING=

// Flags used by the linker during release minsize builds.
CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL:STRING=

// Flags used by the linker during release builds.
CMAKE_MODULE_LINKER_FLAGS_RELEASE:STRING=

// Flags used by the linker during Release with Debug Info builds.
CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO:STRING=

// Path to a program.
CMAKE_NM:FILEPATH=/usr/bin/nm

// Path to a program.
CMAKE_OBJCOPY:FILEPATH=/usr/bin/objcopy

// Path to a program.
CMAKE_OBJDUMP:FILEPATH=/usr/bin/objdump

// Path to a program.
CMAKE_RANLIB:FILEPATH=/usr/bin/ranlib

// Flags used by the linker during the creation of dll's.
CMAKE_SHARED_LINKER_FLAGS:STRING= 

// Flags used by the linker during debug builds.
CMAKE_SHARED_LINKER_FLAGS_DEBUG:STRING=

// Flags used by the linker during release minsize builds.
CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL:STRING=

// Flags used by the linker during release builds.
CMAKE_SHARED_LINKER_FLAGS_RELEASE:STRING=

// Flags used by the linker during Release with Debug Info builds.
CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO:STRING=

// If set, runtime paths are not added when installing shared libraries, but are added when building.
CMAKE_SKIP_INSTALL_RPATH:BOOL=NO

// If set, runtime paths are not added when using shared libraries.
CMAKE_SKIP_RPATH:BOOL=NO

// Flags used by the linker during the creation of static libraries.
CMAKE_STATIC_LINKER_FLAGS:STRING=

// Flags used by the linker during debug builds.
CMAKE_STATIC_LINKER_FLAGS_DEBUG:STRING=

// Flags used by the linker during release minsize builds.
CMAKE_STATIC_LINKER_FLAGS_MINSIZEREL:STRING=

// Flags used by the linker during release builds.
CMAKE_STATIC_LINKER_FLAGS_RELEASE:STRING=

// Flags used by the linker during Release with Debug Info builds.
CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO:STRING=

// Path to a program.
CMAKE_STRIP:FILEPATH=/usr/bin/strip

// Thread library used.
CMAKE_THREAD_LIBS:STRING=-lpthread

// If true, cmake will use relative paths in makefiles and projects.
CMAKE_USE_RELATIVE_PATHS:BOOL=OFF

// If this value is on, makefiles will be generated without the .SILENT directive, and all commands will be echoed to the console during the make.  This is useful for debugging only. With Visual Studio IDE projects all commands are done without /nologo.
CMAKE_VERBOSE_MAKEFILE:BOOL=FALSE

// Enable to build Debian packages
CPACK_BINARY_DEB:BOOL=OFF

// Enable to build NSIS packages
CPACK_BINARY_NSIS:BOOL=OFF

// Enable to build RPM packages
CPACK_BINARY_RPM:BOOL=OFF

// Enable to build STGZ packages
CPACK_BINARY_STGZ:BOOL=ON

// Enable to build TBZ2 packages
CPACK_BINARY_TBZ2:BOOL=OFF

// Enable to build TGZ packages
CPACK_BINARY_TGZ:BOOL=ON

// Enable to build TZ packages
CPACK_BINARY_TZ:BOOL=ON

// Enable to build TBZ2 source packages
CPACK_SOURCE_TBZ2:BOOL=ON

// Enable to build TGZ source packages
CPACK_SOURCE_TGZ:BOOL=ON

// Enable to build TZ source packages
CPACK_SOURCE_TZ:BOOL=ON

// Enable to build ZIP source packages
CPACK_SOURCE_ZIP:BOOL=OFF

// Path to a program.
CPPCHECK_EXECUTABLE:FILEPATH=CPPCHECK_EXECUTABLE-NOTFOUND

// Path to search for cppcheck
CPPCHECK_ROOT_DIR:PATH=

// Path to a library.
EXECINFO_LIB:FILEPATH=EXECINFO_LIB-NOTFOUND

// Semicolon-separated list of local directories holding data objects in the layout %(algo)/%(hash).
ExternalData_OBJECT_STORES:STRING=

// Additional URL templates for the ExternalData CMake script to look for testing data. E.g.
file:///var/bigharddrive/%(algo)/%(hash)
ExternalData_URL_TEMPLATES:STRING=

// Enable compatibility with ITK3.x when possible.
ITKV3_COMPATIBILITY:BOOL=OFF

// Build the tests of module dependencies.
ITK_BUILD_ALL_MODULES_FOR_TESTS:BOOL=OFF

// Build the default ITK modules.
ITK_BUILD_DEFAULT_MODULES:BOOL=ON

// Provide here the size of your RAM Memory in GigaBytes
ITK_COMPUTER_MEMORY_SIZE:STRING=1

// Run cppcheck for static code analysis
ITK_CPPCHECK_TEST:BOOL=OFF

// Doxygen will generate Microsoft HTML help
ITK_DOXYGEN_CHM:BOOL=OFF

// Doxygen will generate additional index files for Xcode 3
ITK_DOXYGEN_DOCSET:BOOL=OFF

// Doxygen will generate Eclipse help plugin
ITK_DOXYGEN_ECLIPSEHELP:BOOL=OFF

// Doxygen will generate HTML Output
ITK_DOXYGEN_HTML:BOOL=ON

// Doxygen will generate LaTeX output
ITK_DOXYGEN_LATEX:BOOL=OFF

// Doxygen will generate Qt Compressed Help
ITK_DOXYGEN_QHP:BOOL=OFF

// Doxygen will generate RTF output optimized for Word 97
ITK_DOXYGEN_RTF:BOOL=OFF

// Doxygen will generate XML output
ITK_DOXYGEN_XML:BOOL=OFF

// Do not download source code or data from the network
ITK_FORBID_DOWNLOADS:BOOL=OFF

// Remove all legacy code completely.
ITK_LEGACY_REMOVE:BOOL=OFF

// Silence all legacy code messages.
ITK_LEGACY_SILENT:BOOL=OFF

// When ON, ITK will use 64 bits integers to index pixels. This is needed for managing images larger than 4Gb in some platforms.
ITK_USE_64BITS_IDS:BOOL=OFF

// Download and use BrainWeb data for advanced testing
ITK_USE_BRAINWEB_DATA:BOOL=OFF

// Turn on concept checking to give helpful errors at compile time if a type cannot be used as a template parameter.
ITK_USE_CONCEPT_CHECKING:BOOL=ON

// Use single precision for origin/spacing/directions in itk::Image
ITK_USE_FLOAT_SPACE_PRECISION:BOOL=OFF

// GPU acceleration via OpenCL
ITK_USE_GPU:BOOL=OFF

// Enable the use of KWStyle for checking coding style.
ITK_USE_KWSTYLE:BOOL=OFF

// Turn on Strict concept checking to give more stringent errors at compile time if a type cannot be used as a template parameter.
ITK_USE_STRICT_CONCEPT_CHECKING:BOOL=OFF

// Use an outside build of double-conversion
ITK_USE_SYSTEM_DOUBLECONVERSION:BOOL=OFF

// Use system-installed expat
ITK_USE_SYSTEM_EXPAT:BOOL=OFF

// Use system-installed zlib
ITK_USE_SYSTEM_ZLIB:BOOL=ON

// Build Java support (Currently not supported)
ITK_WRAP_JAVA:BOOL=OFF

// Build Perl support (Currently not supported)
ITK_WRAP_PERL:BOOL=OFF

// Build Python support
ITK_WRAP_PYTHON:BOOL=OFF

// Build Ruby support (Currently not supported)
ITK_WRAP_RUBY:BOOL=OFF

// Build Tcl support (Currently not supported)
ITK_WRAP_TCL:BOOL=OFF

// Path to the KWStyle executable
KWSTYLE_EXECUTABLE:FILEPATH=KWSTYLE_EXECUTABLE-NOTFOUND

// The number of headers in a HeaderTest code.
MAXIMUM_NUMBER_OF_HEADERS:STRING=35

// AnalyzeObjectMapIO plugin for ITK. From Insight Journal article with handle: http://hdl.handle.net/1926/593
Module_AnalyzeObjectMapIO:BOOL=OFF

// This module contains a filter to compute higher order
  accurate numerical derivatives and gradients from an input scalar image.
  field from a displacement field image.
  Higher Order Accurate Derivative and Gradient Calculation in ITK
  http://www.insight-journal.org/browse/publication/775
  http://hdl.handle.net/10380/3231
Module_HigherOrderAccurateGradient:BOOL=OFF

// FDFImageIO plugin for ITK. Authors Gleen Pierce/Nick Tustison/Kent Williams
Module_IOFDF:BOOL=OFF

// This module contains classes for reading and writing QuadEdgeMeshes using
  the STL (STereoLithography)file format. http://hdl.handle.net/10380/3452
Module_IOSTL:BOOL=OFF

// The modules contains classes for reading spatial transform from DICOM
  files. See http://www.insight-journal.org/browse/publication/923
             http://hdl.handle.net/10380/3468
Module_IOTransformDCMTK:BOOL=OFF

// Request building ITKDCMTK
Module_ITKDCMTK:BOOL=OFF

// Request building ITKDeprecated
Module_ITKDeprecated:BOOL=OFF

// Request building ITKIODCMTK
Module_ITKIODCMTK:BOOL=OFF

// Request building ITKIOMINC
Module_ITKIOMINC:BOOL=OFF

// Request building ITKIOPhilipsREC
Module_ITKIOPhilipsREC:BOOL=OFF

// Request building ITKLevelSetsv4Visualization
Module_ITKLevelSetsv4Visualization:BOOL=OFF

// Request building ITKMINC
Module_ITKMINC:BOOL=OFF

// Request building ITKReview
Module_ITKReview:BOOL=OFF

// Request building ITKV3Compatibility
Module_ITKV3Compatibility:BOOL=OFF

// Request building ITKVideoBridgeOpenCV
Module_ITKVideoBridgeOpenCV:BOOL=OFF

// Request building ITKVtkGlue
Module_ITKVtkGlue:BOOL=OFF

// Framework for determining the sizes of lesions in medical images.
Module_LesionSizingToolkit:BOOL=OFF

// MGHIO ImageIO plugin for ITK
Module_MGHIO:BOOL=OFF

// SCIFIO (Bioformats) ImageIO plugin for ITK
Module_SCIFIO:BOOL=OFF

// A class to perform automatic skull-stripping for neuroimage analysis.
Module_SkullStrip:BOOL=OFF

// GPU and CPU Young & Van Vliet Recursive Gaussian Smoothing Filter: http://hdl.handle.net/10380/3425
Module_SmoothingRecursiveYvvGaussianFilter:BOOL=OFF

// This module builds the examples found at http://itk.org/ITKExamples/
Module_SphinxExamples:BOOL=OFF

// This module contains filter called
itk::SplitComponentsImageFilter.  This filter generates component images from an
itk::Image of, for example, itk::Vector, itk::CovariantVector, or
itk::SymmetricSecondRankTensor. http://hdl.handle.net/10380/3230
Module_SplitComponents:BOOL=OFF

// Triangle and edge based QuadEdgeMesh subdivision filters.

See the following Insight Journal's publication:

  Wanlin Zhu, "Triangle Mesh Subdivision"
  http://www.insight-journal.org/browse/publication/831
  http://hdl.handle.net/10380/3307
Module_SubdivisionQuadEdgeMeshFilter:BOOL=OFF

// A module to perform variational image registration. http://hdl.handle.net/10380/3460
Module_VariationalRegistration:BOOL=OFF

// A collection of examples that illustrate how to use ITK.
Module_WikiExamples:BOOL=OFF

// Path to a program.
PERL_EXECUTABLE:FILEPATH=/usr/local/bin/perl


// Path to a program.
PYTHON_EXECUTABLE:FILEPATH=/local/froger/miniconda/bin/python

// Use HIDDEN visibility support if available.
USE_COMPILER_HIDDEN_VISIBILITY:BOOL=ON

// Enable C++0x standard extensions
VCL_INCLUDE_CXX_0X:BOOL=OFF

// Whether vnl_vector/vnl_matrix accessor methods check index bounds.
VNL_CONFIG_CHECK_BOUNDS:BOOL=ON

// Enable Streaming SIMD Extensions 2 optimisations (hardware dependant). Currently broken. For use by VNL developers only.
VNL_CONFIG_ENABLE_SSE2:BOOL=OFF

// Enable Streaming SIMD Extensions 2 implementation of rounding (hardware dependant).
VNL_CONFIG_ENABLE_SSE2_ROUNDING:BOOL=ON

// Whether backward-compatibility methods are provided by vnl.
VNL_CONFIG_LEGACY_METHODS:BOOL=OFF

// Whether thread-safe vnl implementations are used.
VNL_CONFIG_THREAD_SAFE:BOOL=ON
