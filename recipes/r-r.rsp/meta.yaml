{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-r.rsp
  version: "0.30.0"

source:
  fn: R.rsp_0.30.0.tar.gz
  url:
    - http://cran.r-project.org/src/contrib/R.rsp_0.30.0.tar.gz
    - http://cran.r-project.org/src/contrib/Archive/R.rsp/R.rsp_0.30.0.tar.gz
  md5: 761a6c9422b67028400c79528d6e4287

build:

  rpaths:
    - lib/R/lib/
    - lib/

# Suggests: tcltk, digest (>= 0.6.9), ascii (>= 2.1), markdown (>= 0.7.7), knitr (>= 1.9), R.devices (>= 2.14.0), base64enc (>= 0.1-3)
requirements:
  build:
    - r
    - r-r.cache >=0.12.0
    - r-r.methodss3 >=1.7.1
    - r-r.oo >=1.20.0
    - r-r.utils

  run:
    - r
    - r-r.cache >=0.12.0
    - r-r.methodss3 >=1.7.1
    - r-r.oo >=1.20.0
    - r-r.utils

test:
  commands:
    - $R -e "library('R.rsp')" # [not win]
    - "\"%R%\" -e \"library('R.rsp')\"" # [win]


about:
  home: https://github.com/HenrikBengtsson/R.rsp
  license: LGPL (>= 2.1)
  summary: The RSP markup language makes any text-based document come alive.  RSP provides a
    powerful markup for controlling the content and output of LaTeX, HTML, Markdown,
    AsciiDoc, Sweave and knitr documents (and more), e.g. 'Today's date is <%=Sys.Date()%>'.  Contrary
    to many other literate programming languages, with RSP it is straightforward to
    loop over mixtures of code and text sections, e.g. in month-by-month summaries.  RSP
    has also several preprocessing directives for incorporating static and dynamic contents
    of external files (local or online) among other things.  Functions rstring() and
    rcat() make it easy to process RSP strings, rsource() sources an RSP file as it
    was an R script, while rfile() compiles it (even online) into its final output format,
    e.g. rfile('report.tex.rsp') generates 'report.pdf' and rfile('report.md.rsp') generates
    'report.html'.  RSP is ideal for self-contained scientific reports and R package
    vignettes.  It's easy to use - if you know how to write an R script, you'll be up
    and running within minutes.
  license_family: LGPL

# The original CRAN metadata for this package was:

# Package: R.rsp
# Version: 0.30.0
# Depends: R (>= 2.14.0)
# Imports: methods, stats, tools, utils, R.methodsS3 (>= 1.7.1), R.oo (>= 1.20.0), R.utils, R.cache (>= 0.12.0)
# Suggests: tcltk, digest (>= 0.6.9), ascii (>= 2.1), markdown (>= 0.7.7), knitr (>= 1.9), R.devices (>= 2.14.0), base64enc (>= 0.1-3)
# SuggestsNote: Recommended: digest, R.devices, base64enc, markdown
# VignetteBuilder: R.rsp
# Date: 2016-05-15
# Title: Dynamic Generation of Scientific Reports
# Authors@R: c(person("Henrik", "Bengtsson", role=c("aut", "cre", "cph"), email = "henrikb@braju.com"))
# Author: Henrik Bengtsson [aut, cre, cph]
# Maintainer: Henrik Bengtsson <henrikb@braju.com>
# Description: The RSP markup language makes any text-based document come alive.  RSP provides a powerful markup for controlling the content and output of LaTeX, HTML, Markdown, AsciiDoc, Sweave and knitr documents (and more), e.g. 'Today's date is <%=Sys.Date()%>'.  Contrary to many other literate programming languages, with RSP it is straightforward to loop over mixtures of code and text sections, e.g. in month-by-month summaries.  RSP has also several preprocessing directives for incorporating static and dynamic contents of external files (local or online) among other things.  Functions rstring() and rcat() make it easy to process RSP strings, rsource() sources an RSP file as it was an R script, while rfile() compiles it (even online) into its final output format, e.g. rfile('report.tex.rsp') generates 'report.pdf' and rfile('report.md.rsp') generates 'report.html'.  RSP is ideal for self-contained scientific reports and R package vignettes.  It's easy to use - if you know how to write an R script, you'll be up and running within minutes.
# License: LGPL (>= 2.1)
# URL: https://github.com/HenrikBengtsson/R.rsp
# BugReports: https://github.com/HenrikBengtsson/R.rsp/issues
# LazyLoad: TRUE
# NeedsCompilation: no
# Packaged: 2016-05-15 16:18:43 UTC; hb
# Repository: CRAN
# Date/Publication: 2016-05-15 22:09:23

# See
# http://docs.continuum.io/conda/build.html for
# more information about meta.yaml
