diff --git a/kmc_tools/config.h b/kmc_tools/config.h
index 96555ba..b82c061 100644
--- a/kmc_tools/config.h
+++ b/kmc_tools/config.h
@@ -15,6 +15,7 @@
 #include <string>
 #include <vector>
 #include <memory>
+#include "make_unique.h"
 #include <cstring>
 #include "kmc_header.h"
 #include "percent_progress.h"
diff --git a/kmc_tools/expression_node.h b/kmc_tools/expression_node.h
index fce54f8..f948ed7 100644
--- a/kmc_tools/expression_node.h
+++ b/kmc_tools/expression_node.h
@@ -16,6 +16,7 @@
 #include <string>
 #include <sstream>
 #include <memory>
+#include "make_unique.h"
 #include "kmc1_db_reader.h"
 #include "kmc2_db_reader.h"
 
diff --git a/kmc_tools/kmc2_db_reader.h b/kmc_tools/kmc2_db_reader.h
index bbecbb9..e79b707 100644
--- a/kmc_tools/kmc2_db_reader.h
+++ b/kmc_tools/kmc2_db_reader.h
@@ -17,6 +17,7 @@ Date   : 2017-01-28
 #include <vector>
 #include <mutex>
 #include <memory>
+#include "make_unique.h"
 #include <tuple>
 //#include <stack>
 #include <queue>
diff --git a/kmc_tools/make_unique.h b/kmc_tools/make_unique.h
new file mode 100644
index 0000000..0c90da7
--- /dev/null
+++ b/kmc_tools/make_unique.h
@@ -0,0 +1,47 @@
+#if __cplusplus < 201402L
+#ifndef _MAKE_UNIQUE_H
+#define  _MAKE_UNIQUE_H
+// extract from https://isocpp.org/files/papers/N3656.txt
+
+// make_unique<T>(args...)
+// make_unique<T[]>(n)
+// make_unique<T[N]>(args...) = delete
+
+#include <cstddef>
+#include <memory>
+#include <type_traits>
+#include <utility>
+
+namespace std {
+    template<class T> struct _Unique_if {
+        typedef unique_ptr<T> _Single_object;
+    };
+
+    template<class T> struct _Unique_if<T[]> {
+        typedef unique_ptr<T[]> _Unknown_bound;
+    };
+
+    template<class T, size_t N> struct _Unique_if<T[N]> {
+        typedef void _Known_bound;
+    };
+
+    template<class T, class... Args>
+        typename _Unique_if<T>::_Single_object
+        make_unique(Args&&... args) {
+            return unique_ptr<T>(new T(std::forward<Args>(args)...));
+        }
+
+    template<class T>
+        typename _Unique_if<T>::_Unknown_bound
+        make_unique(size_t n) {
+            typedef typename remove_extent<T>::type U;
+            return unique_ptr<T>(new U[n]());
+        }
+
+    template<class T, class... Args>
+        typename _Unique_if<T>::_Known_bound
+        make_unique(Args&&...) = delete;
+}
+
+#endif // _MAKE_UNIQUE_H
+#endif // __cplusplus < 201402L
diff --git a/kmc_tools/parameters_parser.h b/kmc_tools/parameters_parser.h
index 413666b..4f7f1a9 100644
--- a/kmc_tools/parameters_parser.h
+++ b/kmc_tools/parameters_parser.h
@@ -14,6 +14,7 @@
 #include "defs.h"
 #include "parser.h"
 #include <memory>
+#include "make_unique.h"
 class CParametersParser
 {	
 	std::unique_ptr<CParser> complex_parser;
diff --git a/makefile b/makefile
index 2a9417c..89b39f5 100644
--- a/makefile
+++ b/makefile
@@ -10,8 +10,8 @@ CXX 	?= g++
 CFLAGS	= -Wall -O3 -m64 -Wl,--whole-archive -lpthread -Wl,--no-whole-archive -std=c++11
 CLINK	= -lm -O3 -Wl,--whole-archive -lpthread -Wl,--no-whole-archive -std=c++11
 
-KMC_TOOLS_CFLAGS	= -Wall -O3 -m64 -Wl,--whole-archive -lpthread -Wl,--no-whole-archive -std=c++14
-KMC_TOOLS_CLINK	= -lm -O3 -Wl,--whole-archive -lpthread -Wl,--no-whole-archive -std=c++14
+KMC_TOOLS_CFLAGS	= -Wall -O3 -m64 -Wl,--whole-archive -lpthread -Wl,--no-whole-archive -std=c++11
+KMC_TOOLS_CLINK	= -lm -O3 -Wl,--whole-archive -lpthread -Wl,--no-whole-archive -std=c++11
 
 DISABLE_ASMLIB ?= false
 
diff --git a/makefile_mac b/makefile_mac
index 258243f..4fe93f7 100644
--- a/makefile_mac
+++ b/makefile_mac
@@ -9,8 +9,8 @@ KMC_TOOLS_DIR = kmc_tools
 CXX ?= /usr/local/gcc-6.3.0/bin/g++
 CFLAGS	= -Wall -O3 -m64 -static-libgcc -static-libstdc++ -fopenmp -pthread -std=c++11
 CLINK	= -lm -fopenmp -static-libgcc -static-libstdc++ -O3 -pthread -std=c++11
-KMC_TOOLS_CFLAGS	= -Wall -O3 -m64 -static-libgcc -static-libstdc++ -pthread -std=c++14
-KMC_TOOLS_CLINK	= -lm -static-libgcc -static-libstdc++ -O3 -pthread -std=c++14
+KMC_TOOLS_CFLAGS	= -Wall -O3 -m64 -static-libgcc -static-libstdc++ -pthread -std=c++11
+KMC_TOOLS_CLINK	= -lm -static-libgcc -static-libstdc++ -O3 -pthread -std=c++11
 
 DISABLE_ASMLIB ?= false
 
